<?xml version="1.0" encoding="utf-8"?>
<!--

****************************************************************************
*  Copyright (c) 2021,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this driver, you expressly agree with the usage terms and
conditions set out below.
This driver and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this driver is strictly for personal use only.
This driver may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
driver is forbidden.

Any modifications to this driver by the user are only allowed for
personal use and within the intended purpose of the driver,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the driver resulting from a modification
or adaptation by the user.

The content of this driver is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe



Revision History (auto generated):

DATE          VERSION    AUTHOR                         COMMENTS

08/06/2021    1.0.0.1    FME, Skyline Communications    NF: Initial version
05/10/2021    1.0.0.2    JWA, Skyline Communications    Change: Added Ethernet port status session
-->
<Protocol xmlns="http://www.skyline.be/protocol">
  <Name>Ross Video Iggy-AES16.16</Name>
  <Description>Ross Video Iggy-AES16.16 DataMiner driver</Description>
  <Version>1.0.0.3</Version>
  <IntegrationID>DMS-DRV-7164</IntegrationID>
  <Provider>Skyline Communications</Provider>
  <Vendor>Ross Video</Vendor>
  <VendorOID>1.3.6.1.4.1.8813.2.642</VendorOID>
  <DeviceOID>16</DeviceOID>
  <ElementType>Audio Converter</ElementType>
  <Type relativeTimers="true">http</Type>
  <Display defaultPage="General" pageOrder="General;AES3 Input;Ethernet I/O;Sessions;----------;Timing;PTP Ports;----------;Web Interface#http://[Polling Ip]/" wideColumnPages="Sessions;Ethernet I/O;AES3 Input;PTP Ports" />
  <SNMP includepages="true">auto</SNMP>
  <Compliancies>
    <CassandraReady>true</CassandraReady>
  </Compliancies>
	<ParameterGroups>
		<Group id="1" name="Interfaces" type="inout" dynamicId="1100" dynamicIndex="*" />
	</ParameterGroups>
  <Params>
    <Param id="1" trending="false">
      <Name>responseStatus</Name>
      <Description>Response Status</Description>
      <Type>read</Type>
      <Information>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="2" trending="false">
      <Name>responseContent</Name>
      <Description>Response Content</Description>
      <Type>read</Type>
      <Information>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="3" trending="false">
      <Name>postBodyGetSessionBasicInfo</Name>
      <Description>Post Body Get Basic Info</Description>
      <Type>read</Type>
      <Information>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="4" trending="false">
      <Name>postBodyPtpSetParameters</Name>
      <Description>Post Body PTP Set Parameters</Description>
      <Type>read</Type>
      <Information>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="10">
      <Name>runQARebootParse</Name>
      <Description>Run QA Reboot Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="11">
      <Name>runQADeviceStatusParse</Name>
      <Description>Run QA Device Status Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="12">
      <Name>runQAAkmStatusParse</Name>
      <Description>Run QA Akm Status Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="13">
      <Name>runQAAlarmStatusParse</Name>
      <Description>Run QA Alarm Status Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="14">
      <Name>runQAPtpGetParse</Name>
      <Description>Run QA PTP Get Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="15">
      <Name>runQAPtpSetParse</Name>
      <Description>Run QA PTP Set Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="16">
      <Name>runQAPtpRunningParse</Name>
      <Description>Run QA PTP Running Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="17">
      <Name>runQASessionBasicInfo</Name>
      <Description>Run QA Session Basic Info</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="18">
      <Name>runQAAutoClearReceiversAndSenders</Name>
      <Description>Run QA Auto Clear Receivers and Senders Tables</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="19">
      <Name>runQAEthernetPortStatusParse</Name>
      <Description>Run QAEthernet Port Status Parse Response</Description>
      <Type>dummy</Type>
    </Param>
    <Param id="50">
      <Name>titleEndGeneric</Name>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <!--Note that by adding multiple positions,
					the same title end can be re-used for closing different group boxes.
					Indeed, Cube only uses the positions in order to potentially group a title begin to a title end.-->
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>16</Row>
          </Position>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>9</Row>
          </Position>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>7</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="end">title</Type>
      </Measurement>
    </Param>
    <Param id="51">
      <Name>titleBeginDeviceInfo</Name>
      <Description>Device Information</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="begin">title</Type>
      </Measurement>
    </Param>
    <Param id="52">
      <Name>titleBeginPtpConfig</Name>
      <Description>PTP Configuration</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="begin">title</Type>
      </Measurement>
    </Param>
    <Param id="53">
      <Name>titleBeginPtpInfo</Name>
      <Description>PTP Information</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="begin">title</Type>
      </Measurement>
    </Param>
    <Param id="54">
      <Name>titleBeginPtpStatus</Name>
      <Description>Status</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>title</Type>
      </Measurement>
    </Param>
    <Param id="55">
      <Name>titleBeginPtpLocal</Name>
      <Description>Local</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>5</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>title</Type>
      </Measurement>
    </Param>
    <Param id="56">
      <Name>titleBeginPtpGrandmaster</Name>
      <Description>Grandmaster</Description>
      <Type>fixed</Type>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>10</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>title</Type>
      </Measurement>
    </Param>
    <Param id="100" trending="true">
      <Name>aes3InputAlarmState</Name>
      <Description>AES3 Input State</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether any of the PLL-Unlock entries is in an alarm state.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Alarm</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="101" trending="true">
      <Name>ethernetIoControlRJ45Status</Name>
      <Description>Control RJ45 Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether the Control RJ45 is in an alarm state.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>3</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Alarm</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="102" trending="true">
      <Name>ethernetIoNetStatus</Name>
      <Description>NET Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether any NET entry is in an alarm state.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>4</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Alarm</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="103" trending="true">
      <Name>ethernetIoReceiversStatus</Name>
      <Description>Receivers Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether receivers are in an alarm state.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>5</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Not in Use</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Alarm</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="104" trending="true">
      <Name>ethernetIoSendersActiveStreamStatus</Name>
      <Description>Active Stream Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether the senders active stream is in an alarm state.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>-1</Normal>
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>6</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Alarm</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="105" trending="false">
      <Name>deviceId</Name>
      <Description>Device ID</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Displays the device ID.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="190">
      <Name>rebootDevice</Name>
      <Type>write</Type>
      <Information>
        <Subtext>Reboots the device.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>8</Row>
          </Position>
        </Positions>
      </Display>
      <Message>Are you sure you want to proceed with this action?</Message>
      <Measurement>
        <Type width="110">button</Type>
        <Discreets>
          <Discreet>
            <Display>Reboot</Display>
            <Value>-1</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="200" trending="true">
      <Name>ptpSlaveOnly</Name>
      <Description>Slave Only</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether the slave only is enabled.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>-1</Normal>
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Enabled</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Disabled</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="250">
      <Name>ptpSlaveOnly</Name>
      <Description>Slave Only</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>togglebutton</Type>
        <Discreets>
          <Discreet>
            <Display>Enabled</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Disabled</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="201" trending="false">
      <Name>ptpProfile</Name>
      <Description>Profile</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the PTP profile.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="251">
      <Name>ptpProfile</Name>
      <Description>Profile</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="202" trending="true">
      <Name>ptpDomain</Name>
      <Description>Domain</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the domain number of the current syntonization domain.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>0</CL>
        <CH>127</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>127</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>3</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="252">
      <Name>ptpDomain</Name>
      <Description>Domain</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>127</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>3</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="203" trending="true">
      <Name>ptpPriority1</Name>
      <Description>Priority 1</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the priority 2 attribute of the local clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>0</CL>
        <Normal>128</Normal>
        <CH>255</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>4</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="253">
      <Name>ptpPriority1</Name>
      <Description>Priority 1</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>4</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="204" trending="true">
      <Name>ptpPriority2</Name>
      <Description>Priority 2</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the priority 2 attribute of the local clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>0</CL>
        <Normal>128</Normal>
        <CH>255</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>5</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="254">
      <Name>ptpPriority2</Name>
      <Description>Priority 2</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>0</Column>
            <Row>5</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="205" trending="false">
      <Name>ptpLocalId</Name>
      <Description>Local ID</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The clock identity of the local clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>6</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="206" trending="true">
      <Name>ptpLocalMeanPathDelay</Name>
      <Description>Mean Path Delay</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The current value (in ns) of the mean propagation time between a master and a slave clock as computed by the slave.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Units>ns</Units>
        <Range>
          <Low>0</Low>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>7</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="207" trending="true">
      <Name>ptpLocalOffsetFromMaster</Name>
      <Description>Offset From Master</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The current value (in ns) of the time difference between a master and a slave clock as computed by the slave.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.11.1 any real number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Units>ns</Units>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>8</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.11.1 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="208" trending="true">
      <Name>ptpLocalMinDelayRequestInterval</Name>
      <Description>Min Delay Request Interval</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the minimum delay request interval.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>0</Normal>
        <CL>-3</CL>
        <CH>4</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>9</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>125 ms</Display>
            <Value>-3</Value>
          </Discreet>
          <Discreet>
            <Display>250 ms</Display>
            <Value>-2</Value>
          </Discreet>
          <Discreet>
            <Display>500 ms</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>1 s</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>2 s</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>4 s</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>8 s</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>16 s</Display>
            <Value>4</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="209" trending="false">
      <Name>ptpGrandmasterId</Name>
      <Description>Grandmaster ID</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the clock identity attribute of the grandmaster clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>11</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="210" trending="true">
      <Name>ptpGrandmasterPriority1</Name>
      <Description>Grandmaster Priority 1</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The priority 1 attribute of the grandmaster clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>0</CL>
        <Normal>128</Normal>
        <CH>255</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>12</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="211" trending="true">
      <Name>ptpGrandmasterPriority2</Name>
      <Description>Grandmaster Priority 2</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The priority 2 attribute of the grandmaster clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>0</CL>
        <Normal>128</Normal>
        <CH>255</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
          <High>255</High>
        </Range>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>13</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="212" trending="true">
      <Name>ptpGrandmasterClockAccuracy</Name>
      <Description>Clock Accuracy</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The clock accuracy indicates the expected accuracy of the clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.11.1 insufficient info -->
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>14</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <!-- /SuppressValidator 2.11.1 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="213" trending="true">
      <Name>ptpGrandmasterClockClass</Name>
      <Description>Clock Class</Description>
      <Type>read</Type>
      <Information>
        <Subtext>The clock class denotes the traceability of the time or frequency distributed by the clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.11.1 insufficient info -->
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>15</Row>
          </Position>
        </Positions>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <!-- /SuppressValidator 2.11.1 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="214" trending="true">
      <Name>ptpCurrentReference</Name>
      <Description>Current Reference</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Displays the current reference.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="215" trending="true">
      <Name>ptpTimingSystemClockStatus</Name>
      <Description>System Clock Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Displays the lock status of a clock.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>-1</Normal>
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>3</Row>
          </Position>
          <Position>
            <Page>General</Page>
            <Column>0</Column>
            <Row>7</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Locked</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Unlocked</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="216" trending="true">
      <Name>ptpInterfaceStatus</Name>
      <Description>Interface Status</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Displays the lock status of an interface.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>-1</Normal>
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Timing</Page>
            <Column>1</Column>
            <Row>4</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Locked</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Unlocked</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="220" trending="false">
      <Name>sessionIdListHidden</Name>
      <Description>List of Session IDs Hidden</Description>
      <Type>read</Type>
      <Information>
        <Subtext>List of Session IDs Hidden.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="221" trending="false">
      <Name>sessionIdTotalHidden</Name>
      <Description>Total of Session IDs Hidden</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Total of Session IDs Hidden.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <DefaultValue>0</DefaultValue>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="222" trending="true">
      <Name>sessionIdRequestsProgess</Name>
      <Description>Session ID Update</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the update progression status of session IDs buffer.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>100</Normal>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Units>%</Units>
        <Range>
          <Low>0</Low>
          <High>100</High>
        </Range>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>analog</Type>
      </Measurement>
    </Param>
    <Param id="223" trending="true" save="true">
      <Name>autoclearReceiverAndSenderTables</Name>
      <Description>Auto Clear Old Entries</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Enables or disables the auto clear functionality for receivers and senders tables.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <DefaultValue>0</DefaultValue>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>-1</Normal>
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>On</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Off</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="273" setter="true">
      <Name>autoclearReceiverAndSenderTables</Name>
      <Description>Auto Clear Old Entries</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>1</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type>togglebutton</Type>
        <Discreets>
          <Discreet>
            <Display>On</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Off</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="224" trending="true" save="true">
      <Name>maxTime</Name>
      <Description>Maximum Time for Old Entries</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Defines the maximum time for keeping old entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <Decimals>8</Decimals>
        <DefaultValue>300</DefaultValue>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>300</Normal>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Decimals>8</Decimals>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="time">number</Type>
      </Measurement>
    </Param>
    <Param id="274" setter="true">
      <Name>maxTime</Name>
      <Description>Maximum Time for Old Entries</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <Decimals>8</Decimals>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Decimals>8</Decimals>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>2</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="time">number</Type>
      </Measurement>
    </Param>
    <Param id="1000">
      <Name>ethernetIo</Name>
      <Description>Ethernet I/O</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1002">
        <ColumnOption idx="0" pid="1001" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1002" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1003" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1004" type="retrieved" options="" />
        <ColumnOption idx="4" pid="1005" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1006" type="retrieved" options="" />
      </ArrayOptions>
      <Information>
        <Subtext>tableInformation</Subtext>
      </Information>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Ethernet I/O</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="tab=columns:1001|0-1002|1-1003|2-1004|3-1005|4-1006|5,width:0-116-100-100-100-120,sort:STRING-STRING-STRING-STRING-STRING-STRING,lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1001" trending="false">
      <Name>ethernetIoIndex</Name>
      <Description>Index (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1002" trending="false">
      <Name>ethernetIoDisplayKey</Name>
      <Description>Display Key [IDX] (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1003" trending="false">
      <Name>ethernetIoName</Name>
      <Description>Name (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the interface name.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1004" trending="true">
      <Name>ethernetIoLinkStatus</Name>
      <Description>Link Status (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the link status.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Fault</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1005" trending="false">
      <Name>ethernetIoCurrentIp</Name>
      <Description>Current IP (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the current IP.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1006" trending="false">
      <Name>ethernetIoMacAddress</Name>
      <Description>MAC Address (Ethernet I/O)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the MAC address.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1100">
      <Name>aes3InputStatus</Name>
      <Description>AES3 Input Status</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1102">
        <ColumnOption idx="0" pid="1101" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1102" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1103" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1104" type="retrieved" options="" />
        <ColumnOption idx="4" pid="1105" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1106" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
      </ArrayOptions>
      <Information>
        <Subtext>tableInformation</Subtext>
      </Information>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>AES3 Input</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="tab=columns:1101|0-1102|1-1103|2-1104|3-1105|4-1106|5,width:0-116-100-100-120-133,sort:STRING-STRING-STRING-STRING-STRING-INT,lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1101" trending="false">
      <Name>aes3InputStatusIndex</Name>
      <Description>Index (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1102" trending="false">
      <Name>aes3InputStatusDisplayKey</Name>
      <Description>Display Key [IDX] (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1103" trending="true">
      <Name>aes3InputStatusInputlocked</Name>
      <Description>Input Locked (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether the input is locked.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>-1</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>0</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Fault</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1104" trending="true">
      <Name>aes3InputStatusPartyError</Name>
      <Description>Party Error (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether there is a party error.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>0</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>-1</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Fault</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>OK</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1105" trending="true">
      <Name>aes3InputStatusNonLpcmDetect</Name>
      <Description>Non-LPCM Detect (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates whether non-LPCM is detected.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Info />
        <CL />
        <MaL />
        <MiL />
        <WaL />
        <Normal>0</Normal>
        <WaH />
        <MiH />
        <MaH />
        <CH>-1</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Fault</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>OK</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1106" trending="true">
      <Name>aes3InputStatusSamplingFrequency</Name>
      <Description>Sampling Frequency (AES3 Input Status)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sampling frequency.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Decimals>1</Decimals>
        <Units>kHz</Units>
        <Range>
          <Low>0</Low>
        </Range>
      </Display>
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1200">
      <Name>ptpPorts</Name>
      <Description>PTP Ports</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1202">
        <ColumnOption idx="0" pid="1201" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1202" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1203" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1204" type="retrieved" options="" />
        <ColumnOption idx="4" pid="1205" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1206" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
        <ColumnOption idx="6" pid="1207" type="retrieved" options="" />
        <ColumnOption idx="7" pid="1208" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
      </ArrayOptions>
      <Information>
        <Subtext>tableInformation</Subtext>
      </Information>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>PTP Ports</Page>
            <Column>0</Column>
            <Row>0</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="tab=columns:1201|0-1202|1-1203|2-1204|3-1205|4-1206|5-1207|6-1208|7,width:0-116-100-100-123-171-0-0,sort:STRING-STRING-STRING-STRING-STRING-STRING-STRING-INT,lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1201" trending="false">
      <Name>ptpPortsIndex</Name>
      <Description>Index (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1202" trending="false">
      <Name>ptpPortsDisplayKey</Name>
      <Description>Display Key [IDX] (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1203" trending="true">
      <Name>ptpPortsRoleStatus</Name>
      <Description>Role Status (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the role status.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Alarm>
        <Monitored>true</Monitored>
        <CH>2;8</CH>
        <WaH>1</WaH>
        <Normal>3;4;5;6;7;9</Normal>
      </Alarm>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Initializing</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>Fault</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>Disabled</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>Listening</Display>
            <Value>4</Value>
          </Discreet>
          <Discreet>
            <Display>Pre-Master</Display>
            <Value>5</Value>
          </Discreet>
          <Discreet>
            <Display>Master</Display>
            <Value>6</Value>
          </Discreet>
          <Discreet>
            <Display>Passive</Display>
            <Value>7</Value>
          </Discreet>
          <Discreet>
            <Display>Uncalibrated</Display>
            <Value>8</Value>
          </Discreet>
          <Discreet>
            <Display>Slave</Display>
            <Value>9</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1204" trending="true">
      <Name>ptpPortsSyncInterval</Name>
      <Description>Sync Interval (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sync interval.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>0</Normal>
        <CL>-3</CL>
        <CH>4</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>7.812 ms</Display>
            <Value>-7</Value>
          </Discreet>
          <Discreet>
            <Display>15.625 ms</Display>
            <Value>-6</Value>
          </Discreet>
          <Discreet>
            <Display>31.250 ms</Display>
            <Value>-5</Value>
          </Discreet>
          <Discreet>
            <Display>62.500 ms</Display>
            <Value>-4</Value>
          </Discreet>
          <Discreet>
            <Display>125 ms</Display>
            <Value>-3</Value>
          </Discreet>
          <Discreet>
            <Display>250 ms</Display>
            <Value>-2</Value>
          </Discreet>
          <Discreet>
            <Display>500 ms</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>1 s</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>2 s</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>4 s</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>8 s</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>16 s</Display>
            <Value>4</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1254">
      <Name>ptpPortsSyncInterval</Name>
      <Description>Sync Interval (PTP Ports)</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>7.812 ms</Display>
            <Value>-7</Value>
          </Discreet>
          <Discreet>
            <Display>15.625 ms</Display>
            <Value>-6</Value>
          </Discreet>
          <Discreet>
            <Display>31.250 ms</Display>
            <Value>-5</Value>
          </Discreet>
          <Discreet>
            <Display>62.500 ms</Display>
            <Value>-4</Value>
          </Discreet>
          <Discreet>
            <Display>125 ms</Display>
            <Value>-3</Value>
          </Discreet>
          <Discreet>
            <Display>250 ms</Display>
            <Value>-2</Value>
          </Discreet>
          <Discreet>
            <Display>500 ms</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>1 s</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>2 s</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>4 s</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>8 s</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>16 s</Display>
            <Value>4</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1205" trending="true">
      <Name>ptpPortsAnnounceInterval</Name>
      <Description>Announce Interval (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the announce interval.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>0</Normal>
        <CL>-3</CL>
        <CH>4</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>125 ms</Display>
            <Value>-3</Value>
          </Discreet>
          <Discreet>
            <Display>250 ms</Display>
            <Value>-2</Value>
          </Discreet>
          <Discreet>
            <Display>500 ms</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>1 s</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>2 s</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>4 s</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>8 s</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>16 s</Display>
            <Value>4</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1255">
      <Name>ptpPortsAnnounceInterval</Name>
      <Description>Announce Interval (PTP Ports)</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>125 ms</Display>
            <Value>-3</Value>
          </Discreet>
          <Discreet>
            <Display>250 ms</Display>
            <Value>-2</Value>
          </Discreet>
          <Discreet>
            <Display>500 ms</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>1 s</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>2 s</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>4 s</Display>
            <Value>2</Value>
          </Discreet>
          <Discreet>
            <Display>8 s</Display>
            <Value>3</Value>
          </Discreet>
          <Discreet>
            <Display>16 s</Display>
            <Value>4</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1206" trending="true">
      <Name>ptpPortsAnnounceReceiptTimeout</Name>
      <Description>Announce Receipt Timeout (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the announce receipt timeout.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <CL>2</CL>
        <Normal>3</Normal>
        <CH>10</CH>
      </Alarm>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>2</Low>
          <High>10</High>
        </Range>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1256">
      <Name>ptpPortsAnnounceReceiptTimeout</Name>
      <Description>Announce Receipt Timeout (PTP Ports)</Description>
      <Type>write</Type>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>2</Low>
          <High>10</High>
        </Range>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1207" trending="false">
      <Name>ptpPortsId</Name>
      <Description>ID (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Identity.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1208" trending="true">
      <Name>ptpPortsPortId</Name>
      <Description>Port ID (PTP Ports)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the port identity.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
        </Range>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1300">
      <Name>receivers</Name>
      <Description>Receivers</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1302">
        <ColumnOption idx="0" pid="1301" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1302" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1303" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1304" type="retrieved" options=";save" />
        <ColumnOption idx="4" pid="1305" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1306" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
        <ColumnOption idx="6" pid="1307" type="retrieved" options="" />
        <ColumnOption idx="7" pid="1308" type="retrieved" options="" />
        <ColumnOption idx="8" pid="1309" type="retrieved" options=";save" />
        <ColumnOption idx="9" pid="1360" type="retrieved" options="" />
      </ArrayOptions>
      <Information>
        <Subtext>Displays the receivers information.</Subtext>
      </Information>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>3</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="tab=columns:1301|0-1302|1-1303|2-1304|3-1305|4-1306|5-1307|6-1308|7-1309|8-1360|9,width:0-200-100-200-100-100-101-150-144-100,sort:STRING-STRING-STRING-STRING-STRING-INT-STRING-STRING-INT|DESC-STRING,lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1301" trending="false">
      <Name>receiversIndex</Name>
      <Description>Index (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1302" trending="false">
      <Name>receiversDisplayKey</Name>
      <Description>Display Key [IDX] (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1303" trending="true">
      <Name>receiversStatus</Name>
      <Description>Status (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the receiver's status.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <Exceptions>
          <Exception id="1" value="-1">
            <Display state="disabled">Unknown</Display>
            <Value>-1</Value>
          </Exception>
        </Exceptions>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>1</Normal>
        <Info>2</Info>
        <CH>0;$-1</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Fault</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>Enabled</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>Paused</Display>
            <Value>2</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1304" trending="false">
      <Name>receiversName</Name>
      <Description>Name (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the receiver's name.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1305" trending="false">
      <Name>receiversTransportIp</Name>
      <Description>Transport IP (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's transport IP.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1306" trending="true">
      <Name>receiversUdpPort</Name>
      <Description>UDP Port (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's UDP port.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
        </Range>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1307" trending="false">
      <Name>receiversAlarmSeverity</Name>
      <Description>Alarm Severity (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm severity for alarmed streams.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1308" trending="false">
      <Name>receiversAlarmDescription</Name>
      <Description>Alarm Description (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm description for alarmed stream.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1309" trending="false">
      <Name>receiversLastUpdate</Name>
      <Description>Last Update (Receivers)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the last update received in DataMiner.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>false</Monitored>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type options="datetime">number</Type>
      </Measurement>
    </Param>
    <Param id="1360" trending="false">
      <Name>receiversDeleteRow</Name>
      <Description>Delete (Receivers)</Description>
      <Type>write</Type>
      <Information>
        <Subtext>Removes the row entry.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type width="110">button</Type>
        <Discreets>
          <Discreet>
            <Display>Delete</Display>
            <Value>-1</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1400">
      <Name>senders</Name>
      <Description>Senders</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1402">
        <ColumnOption idx="0" pid="1401" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1402" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1403" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1404" type="retrieved" options=";save" />
        <ColumnOption idx="4" pid="1405" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1406" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
        <ColumnOption idx="6" pid="1407" type="retrieved" options="" />
        <ColumnOption idx="7" pid="1408" type="retrieved" options="" />
        <ColumnOption idx="8" pid="1409" type="retrieved" options=";save" />
        <ColumnOption idx="9" pid="1460" type="retrieved" options="" />
      </ArrayOptions>
      <Information>
        <Subtext>Displays the senders information.</Subtext>
      </Information>
      <Display>
        <RTDisplay>true</RTDisplay>
        <Positions>
          <Position>
            <Page>Sessions</Page>
            <Column>0</Column>
            <Row>4</Row>
          </Position>
        </Positions>
      </Display>
      <Measurement>
        <Type options="tab=columns:1401|0-1402|1-1403|2-1404|3-1405|4-1406|5-1407|6-1408|7-1409|8-1460|9,width:0-200-100-200-123-100-101-150-144-100,sort:STRING-STRING-STRING-STRING-STRING-INT-STRING-STRING-INT|DESC-STRING,lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1401" trending="false">
      <Name>sendersIndex</Name>
      <Description>Index (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1402" trending="false">
      <Name>sendersDisplayKey</Name>
      <Description>Display Key [IDX] (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1403" trending="true">
      <Name>sendersStatus</Name>
      <Description>Status (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's status.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
        <Exceptions>
          <Exception id="1" value="-1">
            <Display state="disabled">Unknown</Display>
            <Value>-1</Value>
          </Exception>
        </Exceptions>
      </Interprete>
      <Alarm>
        <Monitored>true</Monitored>
        <Normal>1</Normal>
        <Info>2</Info>
        <CH>0;$-1</CH>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>Fault</Display>
            <Value>0</Value>
          </Discreet>
          <Discreet>
            <Display>Enabled</Display>
            <Value>1</Value>
          </Discreet>
          <Discreet>
            <Display>Paused</Display>
            <Value>2</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1404" trending="false">
      <Name>sendersName</Name>
      <Description>Name (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's name.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1405" trending="false">
      <Name>sendersTransportIp</Name>
      <Description>Transport IP (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's transport IP.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1406" trending="true">
      <Name>sendersUdpPort</Name>
      <Description>UDP Port (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the sender's UDP port.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <!-- SuppressValidator 2.9.7 just a number -->
      <Display>
        <RTDisplay>true</RTDisplay>
        <Range>
          <Low>0</Low>
        </Range>
      </Display>
      <!-- /SuppressValidator 2.9.7 -->
      <Measurement>
        <Type>number</Type>
      </Measurement>
    </Param>
    <Param id="1407" trending="false">
      <Name>sendersAlarmSeverity</Name>
      <Description>Alarm Severity (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm severity for alarmed streams.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1408" trending="false">
      <Name>sendersAlarmDescription</Name>
      <Description>Alarm Description (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm description for alarmed stream.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <!-- SuppressValidator 2.5.1 insufficient info -->
      <Alarm>
        <Monitored>true</Monitored>
      </Alarm>
      <!-- /SuppressValidator 2.5.1 -->
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1409" trending="false">
      <Name>sendersLastUpdate</Name>
      <Description>Last Update (Senders)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the last update received in DataMiner.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Alarm>
        <Monitored>false</Monitored>
      </Alarm>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type options="datetime">number</Type>
      </Measurement>
    </Param>
    <Param id="1460" trending="false">
      <Name>sendersDeleteRow</Name>
      <Description>Delete Entry (Senders)</Description>
      <Type>write</Type>
      <Information>
        <Subtext>Removes the row entry.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>true</RTDisplay>
      </Display>
      <Measurement>
        <Type width="110">button</Type>
        <Discreets>
          <Discreet>
            <Display>Delete</Display>
            <Value>-1</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1500">
      <Name>streams</Name>
      <Description>Streams</Description>
      <Type>array</Type>
      <ArrayOptions index="0" options=";naming=.1502">
        <ColumnOption idx="0" pid="1501" type="retrieved" options="" />
        <ColumnOption idx="1" pid="1502" type="retrieved" options="" />
        <ColumnOption idx="2" pid="1503" type="retrieved" options="" />
        <ColumnOption idx="3" pid="1504" type="retrieved" options="" />
        <ColumnOption idx="4" pid="1505" type="retrieved" options="" />
        <ColumnOption idx="5" pid="1506" type="retrieved" options="" />
        <ColumnOption idx="6" pid="1507" type="retrieved" options="" />
      </ArrayOptions>
      <Information>
        <Subtext>Displays the available streams for each session and current alarms information.</Subtext>
      </Information>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type options="tab=lines:25,filter:true">table</Type>
      </Measurement>
    </Param>
    <Param id="1501" trending="false">
      <Name>streamsIndex</Name>
      <Description>Index (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1502" trending="false">
      <Name>streamsDisplayKey</Name>
      <Description>Display Key [IDX] (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1503" trending="false">
      <Name>streamsStreamId</Name>
      <Description>Stream ID (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the stream ID.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1504" trending="false">
      <Name>streamsSessionId</Name>
      <Description>Session ID (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the session ID.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1505" trending="false">
      <Name>streamsStatus</Name>
      <Description>Status (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the stream's status.</Subtext>
      </Information>
      <Interprete>
        <RawType>numeric text</RawType>
        <Type>double</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>discreet</Type>
        <Discreets>
          <Discreet>
            <Display>OK</Display>
            <Value>-1</Value>
          </Discreet>
          <Discreet>
            <Display>Fault</Display>
            <Value>0</Value>
          </Discreet>
        </Discreets>
      </Measurement>
    </Param>
    <Param id="1506" trending="false">
      <Name>streamsAlarmSeverity</Name>
      <Description>Alarm Severity (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm severity for alarmed streams.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
    <Param id="1507" trending="false">
      <Name>streamsAlarmDescription</Name>
      <Description>Alarm Description (Streams)</Description>
      <Type>read</Type>
      <Information>
        <Subtext>Indicates the alarm description for alarmed stream.</Subtext>
      </Information>
      <Interprete>
        <RawType>other</RawType>
        <Type>string</Type>
        <LengthType>next param</LengthType>
      </Interprete>
      <Display>
        <RTDisplay>false</RTDisplay>
      </Display>
      <Measurement>
        <Type>string</Type>
      </Measurement>
    </Param>
  </Params>
  <QActions>
    <QAction id="63000" encoding="csharp" name="** Auto-generated Class Library **" options="precompile" dllImport="System.Runtime.Serialization.dll;System.Xml.dll"><![CDATA[// --- auto-generated code --- do not modify ---

/*
{{StartPackageInfo}}
<PackageInfo xmlns="http://www.skyline.be/ClassLibrary">
	<BasePackage>
		<Identity>
			<Name>Class Library</Name>
			<Version>1.0.1.3</Version>
		</Identity>
	</BasePackage>
	<CustomPackages>
		<Package>
			<Identity>
				<Name>Utility Library</Name>
				<Version>1.0.0.9</Version>
			</Identity>
		</Package>
	</CustomPackages>
</PackageInfo>
{{EndPackageInfo}}
*/

namespace Skyline.DataMiner.Library
{
    namespace Common.Attributes
    {
        /// <summary>
        /// This attribute indicates a DLL is required.
        /// </summary>
        [System.AttributeUsage(System.AttributeTargets.All, AllowMultiple = true)]
        public sealed class DllImportAttribute : System.Attribute
        {
            /// <summary>
            /// Initializes a new instance of the <see cref = "DllImportAttribute"/> class.
            /// </summary>
            /// <param name = "dllImport">The name of the DLL to be imported.</param>
            public DllImportAttribute(string dllImport)
            {
                DllImport = dllImport;
            }

            /// <summary>
            /// Gets the name of the DLL to be imported.
            /// </summary>
            public string DllImport
            {
                get;
                private set;
            }
        }
    }

    namespace Protocol
    {
        /// <summary>
        /// Class used to make set parameters to SLProtocol.
        /// </summary>
        public class SetParameterRequest
        {
            /// <summary>
            /// Initializes a new instance of the <see cref = "SetParameterRequest"/> class.
            /// </summary>
            /// <param name = "id">ID of the parameter to set.</param>
            /// <param name = "value">Value to set on the parameter.</param>
            public SetParameterRequest(int id, object value)
            {
                this.Id = id;
                this.Value = value;
            }

            /// <summary>
            /// Gets the ID of the parameter to set the value.
            /// </summary>
            public int Id
            {
                get;
                private set;
            }

            /// <summary>
            /// Gets the value to set on the parameter.
            /// </summary>
            public object Value
            {
                get;
                private set;
            }
        }

        /// <summary>
        /// Class with <see cref = "SLProtocol"/> extension methods.
        /// </summary>
        [Skyline.DataMiner.Library.Common.Attributes.DllImport("QActionHelperBaseClasses.dll")]
        public static class SLProtocolExtensionMethods
        {
            /// <summary>
            /// Gets two columns from a table and returns an array with the given selector.
            /// </summary>
            /// <typeparam name = "T1">Type of the first Column.</typeparam>
            /// <typeparam name = "T2">Type of the second Column.</typeparam>
            /// <typeparam name = "TReturn">Type of the return value.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "tableId">Id of the Table.</param>
            /// <param name = "columnsIdx">Array with the Columns Indexes.</param>
            /// <param name = "returnSelector">A function to map each column element to a return element.</param>
            /// <returns>An <see cref = "IEnumerable{T}"/> of <typeparamref name = "TReturn"/> with the desired columns.</returns>
            /// <exception cref = "ArgumentOutOfRangeException">
            /// Number of columns doesn't match the number of returned members.
            /// </exception>
            public static System.Collections.Generic.IEnumerable<TReturn> GetColumns<T1, T2, TReturn>(this Skyline.DataMiner.Scripting.SLProtocol protocol, int tableId, uint[] columnsIdx, System.Func<T1, T2, TReturn> returnSelector)
                where T1 : System.IConvertible where T2 : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (columnsIdx == null)
                {
                    throw new System.ArgumentNullException("columnsIdx");
                }

                if (returnSelector == null)
                {
                    throw new System.ArgumentNullException("returnSelector");
                }

                if (columnsIdx.Length != 2)
                {
                    throw new System.ArgumentOutOfRangeException("columnsIdx", "Number of columns has to be 2");
                }

                var columns = (object[])protocol.NotifyProtocol(321, tableId, columnsIdx);
                for (var i = 0; i < ((object[])columns[0]).Length; i++)
                {
                    yield return returnSelector(Skyline.DataMiner.Library.MiscExtensions.ChangeType<T1>(((object[])columns[0])[i]), Skyline.DataMiner.Library.MiscExtensions.ChangeType<T2>(((object[])columns[1])[i]));
                }
            }

            /// <summary>
            /// Gets four columns from a table and returns an array with the given selector.
            /// </summary>
            /// <typeparam name = "T1">Type of the first Column.</typeparam>
            /// <typeparam name = "T2">Type of the second Column.</typeparam>
            /// <typeparam name = "T3">Type of the third Column.</typeparam>
            /// <typeparam name = "T4">Type of the fourth Column.</typeparam>
            /// <typeparam name = "TReturn">Type of the return value.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "tableId">Id of the Table.</param>
            /// <param name = "columnsIdx">Array with the Columns Indexes.</param>
            /// <param name = "returnSelector">A function to map each column element to a return element.</param>
            /// <returns>An <see cref = "IEnumerable{T}"/> of <typeparamref name = "TReturn"/> with the desired columns.</returns>
            /// <exception cref = "ArgumentOutOfRangeException">
            /// Number of columns doesn't match the number of returned members.
            /// </exception>
            public static System.Collections.Generic.IEnumerable<TReturn> GetColumns<T1, T2, T3, T4, TReturn>(this Skyline.DataMiner.Scripting.SLProtocol protocol, int tableId, uint[] columnsIdx, System.Func<T1, T2, T3, T4, TReturn> returnSelector)
                where T1 : System.IConvertible where T2 : System.IConvertible where T3 : System.IConvertible where T4 : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (columnsIdx == null)
                {
                    throw new System.ArgumentNullException("columnsIdx");
                }

                if (returnSelector == null)
                {
                    throw new System.ArgumentNullException("returnSelector");
                }

                if (columnsIdx.Length != 4)
                {
                    throw new System.ArgumentOutOfRangeException("columnsIdx", "Number of columns has to be 4");
                }

                var columns = (object[])protocol.NotifyProtocol(321, tableId, columnsIdx);
                for (var i = 0; i < ((object[])columns[0]).Length; i++)
                {
                    yield return returnSelector(Skyline.DataMiner.Library.MiscExtensions.ChangeType<T1>(((object[])columns[0])[i]), Skyline.DataMiner.Library.MiscExtensions.ChangeType<T2>(((object[])columns[1])[i]), Skyline.DataMiner.Library.MiscExtensions.ChangeType<T3>(((object[])columns[2])[i]), Skyline.DataMiner.Library.MiscExtensions.ChangeType<T4>(((object[])columns[3])[i]));
                }
            }

            /// <summary>
            /// Executes a <see cref = "SLProtocol.GetParameter(int)"/> and return the value in the desired format.
            /// </summary>
            /// <typeparam name = "T">Type of the Parameter.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "paramId">Id of the parameter to retrieve.</param>
            /// <returns>The parameter value.</returns>
            public static T GetParameter<T>(this Skyline.DataMiner.Scripting.SLProtocol protocol, int paramId)
                where T : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                return Skyline.DataMiner.Library.MiscExtensions.ChangeType<T>(protocol.GetParameter(paramId));
            }

            /// <summary>
            /// Executes a <see cref = "SLProtocol.GetParameterIndexByKey(int, string, int)"/> and return the value in the desired format.
            /// </summary>
            /// <typeparam name = "T">Desired return Type.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "tableId">Id of the table.</param>
            /// <param name = "key">Key of the desired row.</param>
            /// <param name = "columnIdx">Index of the desired column (1 based index).</param>
            /// <returns>The value of the desired cell.</returns>
            public static T GetParameterIndexByKey<T>(this Skyline.DataMiner.Scripting.SLProtocol protocol, int tableId, string key, int columnIdx)
                where T : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                return Skyline.DataMiner.Library.MiscExtensions.ChangeType<T>(protocol.GetParameterIndexByKey(tableId, key, columnIdx));
            }

            /// <summary>
            /// Gets the desired parameters and converts to the given types.
            /// </summary>
            /// <typeparam name = "T1">Type of the fist parameter.</typeparam>
            /// <typeparam name = "T2">Type of the second parameter.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "paramIds">Array with the ids of the Parameters to fetch.</param>
            /// <param name = "param1">Out variable with the first parameter value.</param>
            /// <param name = "param2">Out variable with the second parameter value.</param>
            /// <exception cref = "ArgumentOutOfRangeException">
            /// If the length of the paramIds is different from the number of out parameters.
            /// </exception>
            public static void GetParameters<T1, T2>(this Skyline.DataMiner.Scripting.SLProtocol protocol, uint[] paramIds, out T1 param1, out T2 param2)
                where T1 : System.IConvertible where T2 : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (paramIds == null)
                {
                    throw new System.ArgumentNullException("paramIds");
                }

                if (paramIds.Length != 2)
                {
                    throw new System.ArgumentOutOfRangeException("paramIds", "paramIds need to have the same length as the number of out parameters");
                }

                object[] parameters = (object[])protocol.GetParameters(paramIds);
                param1 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T1>(parameters[0]);
                param2 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T2>(parameters[1]);
            }

            /// <summary>
            /// Gets the desired parameters and converts to the given types.
            /// </summary>
            /// <typeparam name = "T1">Type of the fist parameter.</typeparam>
            /// <typeparam name = "T2">Type of the second parameter.</typeparam>
            /// <typeparam name = "T3">Type of the third parameter.</typeparam>
            /// <typeparam name = "T4">Type of the fourth parameter.</typeparam>
            /// <typeparam name = "T5">Type of the fifth parameter.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "paramIds">Array with the ids of the Parameters to fetch.</param>
            /// <param name = "param1">Out variable with the first parameter value.</param>
            /// <param name = "param2">Out variable with the second parameter value.</param>
            /// <param name = "param3">Out variable with the third parameter value.</param>
            /// <param name = "param4">Out variable with the fourth parameter value.</param>
            /// <param name = "param5">Out variable with the fifth parameter value.</param>
            /// <exception cref = "ArgumentOutOfRangeException">
            /// If the length of the paramIds is different from the number of out parameters.
            /// </exception>
            public static void GetParameters<T1, T2, T3, T4, T5>(this Skyline.DataMiner.Scripting.SLProtocol protocol, uint[] paramIds, out T1 param1, out T2 param2, out T3 param3, out T4 param4, out T5 param5)
                where T1 : System.IConvertible where T2 : System.IConvertible where T3 : System.IConvertible where T4 : System.IConvertible where T5 : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (paramIds == null)
                {
                    throw new System.ArgumentNullException("paramIds");
                }

                if (paramIds.Length != 5)
                {
                    throw new System.ArgumentOutOfRangeException("paramIds", "paramIds need to have the same length as the number of out parameters");
                }

                object[] parameters = (object[])protocol.GetParameters(paramIds);
                param1 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T1>(parameters[0]);
                param2 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T2>(parameters[1]);
                param3 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T3>(parameters[2]);
                param4 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T4>(parameters[3]);
                param5 = Skyline.DataMiner.Library.MiscExtensions.ChangeType<T5>(parameters[4]);
            }

            /// <summary>
            /// Sets multiple parameters at once.
            /// </summary>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "requests">
            /// Array of <see cref = "SetParameterRequest"/> with the parameter ids and values to be set.
            /// </param>
            /// <exception cref = "ArgumentNullException"><paramref name = "protocol"/> or <paramref name = "requests"/> is null.</exception>
            public static void SetParameters(this Skyline.DataMiner.Scripting.SLProtocol protocol, params Skyline.DataMiner.Library.Protocol.SetParameterRequest[] requests)
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (requests == null)
                {
                    throw new System.ArgumentNullException("requests");
                }

                if (requests.Length == 0)
                {
                    return;
                }

                var ids = new int[requests.Length];
                var values = new object[requests.Length];
                for (int i = 0; i < requests.Length; i++)
                {
                    ids[i] = requests[i].Id;
                    values[i] = requests[i].Value;
                }

                protocol.SetParameters(ids, values);
            }
        }
    }

    /// <summary>
    /// Class is Miscellaneous Extension methods.
    /// </summary>
    [Skyline.DataMiner.Library.Common.Attributes.DllImport("System.Runtime.Serialization.dll")]
    [Skyline.DataMiner.Library.Common.Attributes.DllImport("System.Xml.dll")]
    public static class MiscExtensions
    {
        private static readonly System.Type DateTimeType = typeof(System.DateTime);
        /// <summary>
        /// Converts an object to the desired type.
        /// </summary>
        /// <typeparam name = "T">Type of the result.</typeparam>
        /// <param name = "obj">Object to convert.</param>
        /// <returns>The converted object.</returns>
        /// <exception cref = "InvalidCastException">This conversion is not supported. Or <paramref name = "obj"/> does not implement the <see cref = "IConvertible"/> interface.</exception>
        /// <exception cref = "FormatException"><paramref name = "obj"/> is not in a format rmecognized by conversionType.</exception>
        /// <exception cref = "OverflowException"><paramref name = "obj"/> represents a number that is out of the range of conversionType.</exception>
        public static T ChangeType<T>(this object obj)
            where T : System.IConvertible
        {
            if (obj == null)
            {
                return default(T);
            }

            var type = typeof(T);
            if (type.IsEnum)
            {
                return (T)System.Enum.ToObject(type, Skyline.DataMiner.Library.MiscExtensions.ChangeType<int>(obj));
            }
            else if (type == DateTimeType)
            {
                var oadate = System.Convert.ToDouble(obj);
                if (!Skyline.DataMiner.Library.MiscExtensions.InRange(oadate, -657435.0, 2958465.99999999))
                {
                    throw new System.OverflowException(string.Format("{0} is not a valid OA Date, supported range -657435.0 to 2958465.99999999", obj));
                }

                object date = System.DateTime.FromOADate(oadate);
                return (T)date;
            }
            else
            {
                return (T)System.Convert.ChangeType(obj, type);
            }
        }

        /// <summary>
        /// Converts a <see cref = "StringValueAttribute"/> into the corresponding enum value.
        /// </summary>
        /// <typeparam name = "T">Type of the enum.</typeparam>
        /// <param name = "value">String value of the enum.</param>
        /// <returns>The correct enum value if applicable.</returns>
        /// <exception cref = "ArgumentNullException">If <paramref name = "value"/> is null.</exception>
        /// <exception cref = "ArgumentException">If <typeparamref name = "T"/> is not an enum.</exception>
        /// <exception cref = "FormatException">If <paramref name = "value"/> doesn't represent a <typeparamref name = "T"/> valid <see cref = "StringValueAttribute"/>.</exception>
        public static T FromStringValue<T>(this string value)
            where T : struct, System.IComparable, System.IFormattable, System.IConvertible
        {
            if (value == null)
            {
                throw new System.ArgumentNullException("value");
            }

            var type = typeof(T);
            if (!type.IsEnum)
            {
                throw new System.ArgumentException("T must be an enumerated type");
            }

            foreach (var field in type.GetFields())
            {
                var stringValue = string.Empty;
                var attributes = field.GetCustomAttributes(typeof(Skyline.DataMiner.Library.StringValueAttribute), false) as Skyline.DataMiner.Library.StringValueAttribute[];
                if (attributes != null && attributes.Length > 0)
                {
                    stringValue = attributes[0].Value;
                }

                if (stringValue == value)
                {
                    return (T)System.Enum.Parse(type, field.Name);
                }
            }

            throw new System.FormatException(string.Format("{0} is not a valued StringValue for Enum {1}", value, type.Name));
        }

        /// <summary>
        /// Checks if a values is inside an interval.
        /// </summary>
        /// <typeparam name = "T">Type of the value.</typeparam>
        /// <param name = "value">Value to check.</param>
        /// <param name = "fromInclusive">Lower Range, inclusive value.</param>
        /// <param name = "toInclusive">High Range, inclusive value.</param>
        /// <returns>True if the value is between the given interval; otherwise false.</returns>
        /// <exception cref = "ArgumentNullException">If <paramref name = "value"/> is null.</exception>
        public static bool InRange<T>(this T value, T fromInclusive, T toInclusive)
            where T : System.IComparable
        {
            if (value == null)
            {
                throw new System.ArgumentNullException("value");
            }

            return value.CompareTo(fromInclusive) >= 0 && value.CompareTo(toInclusive) <= 0;
        }
    }

    /// <summary>
    /// String value for <see cref = "Enum"/> members.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Field, AllowMultiple = false)]
    public sealed class StringValueAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref = "StringValueAttribute"/> class.
        /// </summary>
        /// <param name = "value">Value to be set.</param>
        public StringValueAttribute(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Gets the attribute value.
        /// </summary>
        public string Value
        {
            get;
            private set;
        }
    }
}]]></QAction>
    <QAction id="1" name="Precompiled Code" encoding="csharp" options="precompile" dllImport="Newtonsoft.Json.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll"><![CDATA[
//---------------------------------
// QAction_1.cs
//---------------------------------
namespace Skyline.Protocol
{
	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Linq;
	using Newtonsoft.Json;
	using QAction_1.Interfaces;
	using QAction_1.JsonProperties;
	using Skyline.DataMiner.Library;
	using Skyline.DataMiner.Library.Protocol;
	using Skyline.DataMiner.Scripting;
	using SLNetMessages = Skyline.DataMiner.Net.Messages;

	namespace General
	{
		#region Classes

		public static class Methods
		{
			/// <summary>
			/// Check the type of the arguments value and converts it to the desired type.
			/// </summary>
			/// <typeparam name="T1">Original type.</typeparam>
			/// <typeparam name="T2">Return type.</typeparam>
			/// <param name="value">Value to be converted.</param>
			/// <param name="exceptionValue">Value to be returned if parses fail.</param>
			/// <returns>The converted or exception value in the desired type.</returns>
			public static T2 CheckAndConvertValue<T1, T2>(this T1 value, T2 exceptionValue)
			{
				if (object.Equals(value, default(T1)))
				{
					return exceptionValue;
				}

				try
				{
					var result = (T2)Convert.ChangeType(value, typeof(T2), CultureInfo.InvariantCulture);

					if (exceptionValue is string)
					{
						if (result.Equals(string.Empty) || result.Equals("N/A"))
						{
							return exceptionValue;
						}
					}

					return result;
				}
				catch (Exception)
				{
					return exceptionValue;
				}
			}

			public static SessionStatus GetSessionStatus(string state, bool alarmed = false)
			{
				if (alarmed)
				{
					return SessionStatus.Fault;
				}

				if (string.IsNullOrEmpty(state))
				{
					return SessionStatus.Unknown;
				}

				try
				{
					return state.ToLower().FromStringValue<SessionStatus>();
				}
				catch
				{
					return SessionStatus.Unknown;
				}
			}

			public static TimeSpan GetTimeDifferentTillNow(this string time)
			{
				double start;
				if (!double.TryParse(time, out start))
				{
					return TimeSpan.MaxValue;
				}

				return DateTime.Now - DateTime.FromOADate(start);
			}

			public static double SessionsProgress(int remain, int total)
			{
				return total != 0 ? (double)(total - remain) / total * 100 : 0;
			}
		}

		public static class ParseClasses
		{
			#region Methods

			public static void Aes3InputStatus(SLProtocolExt protocol, AkmStatus akmStatus)
			{
				var codec = new List<Aes3inputstatusQActionRow>();
				akmStatus.CodecList.ForEach(x => codec.Add(new Aes3InputStatus(x).Aes3InputTableRow));

				var aes3Status = codec.FirstOrDefault(x => !Convert.ToBoolean(x.Aes3inputstatusinputlocked_1103)) == default(Aes3inputstatusQActionRow);

				protocol.SetParameter(Parameter.aes3inputalarmstate_100, aes3Status);

				protocol.aes3inputstatus.FillArray(codec.ToArray());
			}

			public static void AlarmStatusParse(SLProtocolExt protocol, AlarmStatus alarmStatus)
			{
				if (alarmStatus == null)
				{
					protocol.Log("QA" + protocol.QActionID + "|AlarmStatusParse|Alarm status class is null", LogType.Error, LogLevel.NoLogging);
					return;
				}

				if (alarmStatus.Sessions == null ||
					alarmStatus.Sessions.Count < 1)
				{
					protocol.Log("QA" + protocol.QActionID + "|AlarmStatusParse|No sessions were found.", LogType.Error, LogLevel.NoLogging);
					return;
				}

				var streams = new List<StreamsQActionRow>();
				string oldIds = protocol.GetParameter<string>(Parameter.sessionidlisthidden_220);
				SessionsBuffer sessionBuffer = new SessionsBuffer(oldIds);

				var newIds = new List<string>();

				foreach (var session in alarmStatus.Sessions)
				{
					session.Streams.ForEach(stream => streams.Add(new Stream(session.Id, stream).StreamsTableRow));
					newIds.Add(session.Id);
				}

				if (newIds.Count > 0)
				{
					sessionBuffer.UpdateBuffer(newIds);
				}

				var totalIds = sessionBuffer.RemainIds;

				protocol.streams.FillArray(streams.ToArray());

				protocol.SetParameters(
					new SetParameterRequest(Parameter.sessionidlisthidden_220, string.Join(";", sessionBuffer.Buffer)),
					new SetParameterRequest(Parameter.sessionidtotalhidden_221, totalIds),
					new SetParameterRequest(Parameter.postbodygetsessionbasicinfo_3, GetPostBodySessionRequest(sessionBuffer.NextSessionId)),
					new SetParameterRequest(Parameter.sessionidrequestsprogess_222, Methods.SessionsProgress(sessionBuffer.RemainIds, totalIds)));
			}

			public static void DeviceStatusInformation(SLProtocolExt protocol, DeviceStatus deviceInfo)
			{
				if (deviceInfo.Status == null)
				{
					protocol.Log("QA" + protocol.QActionID + "|DeviceStatusInformation|Response does not contain the status class.", LogType.Error, LogLevel.NoLogging);
					return;
				}

				if (deviceInfo.Status.Eths == null)
				{
					protocol.SetParameter(Parameter.deviceid_105, deviceInfo.Status.DeviceId);
					protocol.CheckTrigger(10);
					return;
				}

				EthernetStatusToProtocol(protocol, deviceInfo.Status.Eths, deviceInfo.Status.DeviceId);
			}

			public static void EthernetPortStatusInformation(SLProtocolExt protocol, EthernetPortStatus ethernetPortStatusInfo)
			{
				if (ethernetPortStatusInfo.DynamicInfo == null)
				{
					protocol.Log("QA" + protocol.QActionID + "|EthernetPortStatusInformation|Response does not contain the dynamic class.", LogType.Error, LogLevel.NoLogging);
					return;
				}

				if (ethernetPortStatusInfo.DynamicInfo.Ethbasics == null)
				{
					protocol.Log("QA" + protocol.QActionID + "|EthernetPortStatusInformation|Response does not contain the list of Eth-basics interfaces.", LogType.Error, LogLevel.NoLogging);
					return;
				}

				EthernetStatusToProtocol(protocol, ethernetPortStatusInfo.DynamicInfo.Ethbasics);
			}

			private static void EthernetStatusToProtocol(SLProtocolExt protocol, List<Eth> ethernet, string deviceId = null)
			{
				var interfaces = new List<EthernetioQActionRow>();
				ethernet.ForEach(x => interfaces.Add(new NetworkSetup(x).EthernetTableRow));

				var netStatus = interfaces.Where(x => x.Ethernetioname_1003.ToString().Contains("NET"))
				.FirstOrDefault(x => !Convert.ToBoolean(x.Ethernetiolinkstatus_1004)) == default(EthernetioQActionRow);

				var rj45Status = interfaces.Where(x => x.Ethernetioname_1003.ToString().Contains("Control"))
				.FirstOrDefault(x => !Convert.ToBoolean(x.Ethernetiolinkstatus_1004)) == default(EthernetioQActionRow);

				protocol.ethernetio.FillArray(interfaces.ToArray());

				var paramToSet = new List<SetParameterRequest>
				{
					new SetParameterRequest(Parameter.ethernetiocontrolrj45status_101, rj45Status),
					new SetParameterRequest(Parameter.ethernetionetstatus_102, netStatus)
				};

				if (deviceId != null)
				{
					paramToSet.Add(new SetParameterRequest(Parameter.deviceid_105, deviceId));
				}

				protocol.SetParameters(paramToSet.ToArray());
			}

			public static string GetPostBodySessionRequest(string id)
			{
				return !string.IsNullOrEmpty(id) ? string.Format("{{\"command\": \"get_session_basic_info\", \"json\": {{ \"id\": {0} }} }}", id) : string.Empty;
			}

			public static void PtpGetInfo(SLProtocolExt protocol, PtpGetResponse ptpInfo)
			{
				var ptp = new TimingPtp(ptpInfo);

				protocol.ptpports.FillArray(ptp.PtpPortsTable.ToArray());

				protocol.SetParameters(
					new SetParameterRequest(Parameter.ptpslaveonly_200, ptp.SaveOnly),
					new SetParameterRequest(Parameter.ptpprofile_201, ptp.Profile),
					new SetParameterRequest(Parameter.ptpdomain_202, ptp.Domain),
					new SetParameterRequest(Parameter.ptppriority1_203, ptp.Priority1),
					new SetParameterRequest(Parameter.ptppriority2_204, ptp.Priority2),
					new SetParameterRequest(Parameter.ptplocalid_205, ptp.LocalId),
					new SetParameterRequest(Parameter.ptplocalmeanpathdelay_206, ptp.MeanPathDealy),
					new SetParameterRequest(Parameter.ptplocaloffsetfrommaster_207, ptp.OffsetFromMaster),
					new SetParameterRequest(Parameter.ptplocalmindelayrequestinterval_208, ptp.MinDelayRequestInterval),
					new SetParameterRequest(Parameter.ptpgrandmasterid_209, ptp.GrandmasterId),
					new SetParameterRequest(Parameter.ptpgrandmasterpriority1_210, ptp.GrandmasterPriority1),
					new SetParameterRequest(Parameter.ptpgrandmasterpriority2_211, ptp.GrandmasterPriority2),
					new SetParameterRequest(Parameter.ptpgrandmasterclockaccuracy_212, ptp.ClockAccuracy),
					new SetParameterRequest(Parameter.ptpgrandmasterclockclass_213, ptp.ClockClass),
					new SetParameterRequest(Parameter.ptpcurrentreference_214, ptp.CurrentReference),
					new SetParameterRequest(Parameter.ptptimingsystemclockstatus_215, ptp.SystemStatus),
					new SetParameterRequest(Parameter.ptpinterfacestatus_216, ptp.InterfaceStatus));
			}

			public static void SessionBasicInfoParse(SLProtocolExt protocol, SessionBasicInfo sessionBasicInfo)
			{
				if (sessionBasicInfo == null ||
					sessionBasicInfo.SessionList == null ||
					sessionBasicInfo.SessionList.Count < 1)
				{
					protocol.Log("QA" + protocol.QActionID + "|SessionBasicInfoParse|Session Basic Info or Session List is null.", LogType.Error, LogLevel.NoLogging);
					return;
				}

				var receivers = new List<ReceiversQActionRow>();
				var senders = new List<SendersQActionRow>();

				var streams = protocol.GetColumns(
					Parameter.Streams.tablePid,
					new uint[] { Parameter.Streams.Idx.streamsstreamid_1503, Parameter.Streams.Idx.streamsstatus_1505, Parameter.Streams.Idx.streamsalarmseverity_1506, Parameter.Streams.Idx.streamsalarmdescription_1507 },
					(string id, bool status, string severity, string descr)
						=> new { Id = id, State = status, Severity = severity, Description = descr }).ToArray();

				foreach (var rawSession in sessionBasicInfo.SessionList)
				{
					if (rawSession.Id == null)
					{
						continue;
					}

					var stream = streams.FirstOrDefault(x => x.Id.Equals(rawSession.Id.ToString()));

					if (stream == null)
					{
						continue;
					}

					IReceiverSendersParams session = GetSessionReceiverSenders(protocol, rawSession, !stream.State, stream.Severity, stream.Description);

					if (session == null)
					{
						continue;
					}

					switch (session.Class)
					{
						case SessionClass.Sender:
							senders.Add(new Sender(session).SendersTableRow);
							break;

						case SessionClass.Receiver:
							receivers.Add(new Receiver(session).ReceiversTableRow);
							break;

						default:
							protocol.Log("QA" + protocol.QActionID + "|SessionBasicInfoParse|Session class not implemented.", LogType.Error, LogLevel.NoLogging);
							break;
					}
				}

				string oldIds;
				int totalIds;
				protocol.GetParameters<string, int>(
					new uint[] { Parameter.sessionidlisthidden_220, Parameter.sessionidtotalhidden_221 },
					out oldIds,
					out totalIds);

				SessionsBuffer sessionBuffer = new SessionsBuffer(oldIds);

				protocol.SetParameters(
					new SetParameterRequest(Parameter.sessionidlisthidden_220, string.Join(";", sessionBuffer.Buffer)),
					new SetParameterRequest(Parameter.postbodygetsessionbasicinfo_3, GetPostBodySessionRequest(sessionBuffer.NextSessionId)),
					new SetParameterRequest(Parameter.sessionidrequestsprogess_222, Methods.SessionsProgress(sessionBuffer.RemainIds, totalIds)));

				if (senders.Count > 0)
				{
					protocol.senders.FillArrayNoDelete(senders.ToArray());
				}

				if (receivers.Count > 0)
				{
					protocol.receivers.FillArrayNoDelete(receivers.ToArray());
				}

				if (sessionBuffer.Buffer.Count == 0)
				{
					UpdateReceiversAndSendersStatus(protocol);
				}

				protocol.CheckTrigger(6);
			}

			private static IReceiverSendersParams GetSessionReceiverSenders(SLProtocolExt protocol, SessionList session, bool alarmed, string severity, string description)
			{
				switch (session.Type.ToLower())
				{
					case "video":
						return new VideoSession(session);

					case "audio":
						return new AudioSession(session, alarmed, severity, description);

					default:
						protocol.Log("QA" + protocol.QActionID + "|GetSessionReceiverSenders|Session type not implemented.", LogType.Error, LogLevel.NoLogging);
						return null;
				}
			}

			private static void UpdateReceiversAndSendersStatus(SLProtocolExt protocol)
			{
				var receiversStatus = ((object[])((object[])protocol.NotifyProtocol(
					(int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS,
					Parameter.Receivers.tablePid,
					new uint[] { Parameter.Receivers.Idx.receiversstatus_1303 }))[0]).FirstOrDefault(x => !Convert.ToString(x).Equals("-1")) == null;

				var sendersStatus = ((object[])((object[])protocol.NotifyProtocol(
					(int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS,
					Parameter.Senders.tablePid,
					new uint[] { Parameter.Senders.Idx.sendersstatus_1403 }))[0]).FirstOrDefault(x => !Convert.ToString(x).Equals("-1")) == null;

				protocol.SetParameters(
					new SetParameterRequest(Parameter.ethernetioreceiversstatus_103, receiversStatus),
					new SetParameterRequest(Parameter.ethernetiosendersactivestreamstatus_104, sendersStatus));
			}

			#endregion Methods
		}

		public class Aes3InputStatus
		{
			public Aes3InputStatus(CodecList codec)
			{
				var nameStart = (2 * codec.Id) + 1;
				this.Id = codec.Id;
				this.Name = string.Format("AES3 {0}-{1}", nameStart, nameStart + 1);
				this.InputLocked = !codec.PllUnlock;
				this.NonLpcm = codec.NonPcmDetect;
				this.PartyError = codec.ParityError;
				this.SamplingFrequency = codec.SampFreqKHz;
			}

			public Aes3inputstatusQActionRow Aes3InputTableRow
			{
				get
				{
					return new Aes3inputstatusQActionRow
					{
						Aes3inputstatusindex_1101 = string.Format("{0}.{1}", this.Id, this.Name),
						Aes3inputstatusdisplaykey_1102 = this.Name,
						Aes3inputstatusinputlocked_1103 = this.InputLocked,
						Aes3inputstatuspartyerror_1104 = this.PartyError,
						Aes3inputstatusnonlpcmdetect_1105 = this.NonLpcm,
						Aes3inputstatussamplingfrequency_1106 = this.SamplingFrequency,
					};
				}
			}

			private int Id { get; set; }

			private bool InputLocked { get; set; }

			private string Name { get; set; }

			private bool NonLpcm { get; set; }

			private bool PartyError { get; set; }

			private double SamplingFrequency { get; set; }
		}

		public class NetworkSetup
		{
			private readonly Dictionary<string, string> interfaceName;

			public NetworkSetup(Eth ethernet)
			{
				this.Id = ethernet.Ifid;
				this.Name = ethernet.EthName;
				this.LinkStatus = ethernet.Linkup;
				this.CurrentIp = ethernet.Ipv4;
				this.MacAddress = ethernet.Mac;

				interfaceName = new Dictionary<string, string>
				{
					{ "eth0" , "Control RJ-45"},
					{ "eth1" , "NET 1"},
					{ "eth2" , "NET 2"},
				};
			}

			public EthernetioQActionRow EthernetTableRow
			{
				get
				{
					string result;
					var name = interfaceName.TryGetValue(this.Name, out result) ? result : this.Name;
					return new EthernetioQActionRow
					{
						Ethernetioindex_1001 = string.Format("{0}.{1}", this.Id, this.Name),
						Ethernetiodisplaykey_1002 = string.Format("{0}.{1}", this.Id, name),
						Ethernetioname_1003 = name,
						Ethernetiolinkstatus_1004 = this.LinkStatus,
						Ethernetiocurrentip_1005 = this.CurrentIp,
						Ethernetiomacaddress_1006 = this.MacAddress,
					};
				}
			}

			private string CurrentIp { get; set; }

			private int Id { get; set; }

			private bool LinkStatus { get; set; }

			private string MacAddress { get; set; }

			private string Name { get; set; }
		}

		public class PtpPorts
		{
			public PtpPorts(PtpPort ptpPort)
			{
				if (ptpPort == null)
				{
					return;
				}

				this.Id = ptpPort.Id;
				this.PortId = ptpPort.PortId;

				this.PortName = string.Format("NET {0}", this.PortId);

				try
				{
					this.RoleStatus = ptpPort.RoleStatus.ToLower().FromStringValue<PtpPortRoleStatus>();
				}
				catch
				{
					this.RoleStatus = PtpPortRoleStatus.Unknown;
				}

				this.SyncInterval = ptpPort.SyncInterval;
				this.AnnounceInterval = ptpPort.AnnounceInterval;
				this.AnnounceReceiptTimeout = ptpPort.AnnounceReceiptTimeout;
			}

			public int AnnounceInterval { get; private set; }

			public int AnnounceReceiptTimeout { get; private set; }

			public string Id { get; private set; }

			public int PortId { get; private set; }

			public string PortName { get; private set; }

			public PtpportsQActionRow PtpPortsTableRow
			{
				get
				{
					return new PtpportsQActionRow
					{
						Ptpportsindex_1201 = this.PortId,
						Ptpportsdisplaykey_1202 = string.Format("{0}.{1}", this.PortId, this.PortName),
						Ptpportsrolestatus_1203 = (int)this.RoleStatus,
						Ptpportssyncinterval_1204 = this.SyncInterval,
						Ptpportsannounceinterval_1205 = this.AnnounceInterval,
						Ptpportsannouncereceipttimeout_1206 = this.AnnounceReceiptTimeout,
						Ptpportsid_1207 = this.Id,
						Ptpportsportid_1208 = this.PortId
					};
				}
			}

			public PtpPortRoleStatus RoleStatus { get; private set; }

			public int SyncInterval { get; private set; }
		}

		public class PtpSet
		{
			public PtpSet(SLProtocol protocol, PtpSetType ptpSetType)
			{
				switch (ptpSetType)
				{
					case PtpSetType.Standalone:
						SetStandalones(protocol);
						break;

					case PtpSetType.Table:
						protocol.Log("QA" + protocol.QActionID + "|PptSet|PtpSetType Table not implemented.", LogType.Error, LogLevel.NoLogging);
						break;

					default:
						protocol.Log("QA" + protocol.QActionID + "|PptSet|PtpSetType not implemented.", LogType.Error, LogLevel.NoLogging);
						break;
				}
			}

			[JsonProperty("announceInterval")]
			public int AnnounceInterval { get; private set; }

			[JsonProperty("announceReceiptTimeout")]
			public int AnnounceReceiptTimeout { get; private set; }

			[JsonProperty("domain")]
			public int Domain { get; private set; }

			[JsonProperty("port")]
			public int Port { get; private set; }

			public string PostBody
			{
				get
				{
					var properties = new List<string>
					{
						string.Format("\"{0}\":{1}", "slaveOnly", SlaveOnly.ToString().ToLower()),
						string.Format("\"{0}\":\"{1}\"", "profile", Profile),
						string.Format("\"{0}\":{1}", "domain", Domain),
						string.Format("\"{0}\":{1}", "priority1", Priority1),
						string.Format("\"{0}\":{1}", "priority2", Priority2),
					};

					return string.Format("{{\"command\": \"ptp_set_parameter\", \"json\": {{ {0} }} }}", string.Join(",", properties));
				}
			}

			[JsonProperty("priority1")]
			public int Priority1 { get; private set; }

			[JsonProperty("priority2")]
			public int Priority2 { get; private set; }

			[JsonProperty("profile")]
			public string Profile { get; private set; }

			[JsonProperty("slaveOnly")]
			public bool SlaveOnly { get; private set; }

			[JsonProperty("syncInterval")]
			public int SyncInterval { get; private set; }

			public static string GetPtpSetPostBody(SLProtocol protocol, PtpSetType ptpSetType, string propertyName, string propertyValue, string port = null)
			{
				var properties = new List<string>();
				switch (ptpSetType)
				{
					case PtpSetType.Standalone:
						properties.Add(string.Format("\"{0}\":{1}", propertyName, propertyValue));
						break;

					case PtpSetType.Table:
						if (string.IsNullOrEmpty(port))
						{
							protocol.Log("QA" + protocol.QActionID + "|GetPostBody|Ptp Set for table parameters requires the port number.", LogType.Error, LogLevel.NoLogging);
							return string.Empty;
						}

						properties.Add(string.Format("\"{0}\":{1}", "port", port));
						properties.Add(string.Format("\"{0}\":{1}", propertyName, propertyValue));
						break;

					default:
						protocol.Log("QA" + protocol.QActionID + "|PptSet|PtpSetType not implemented.", LogType.Error, LogLevel.NoLogging);
						break;
				}

				return string.Format("{{\"command\": \"ptp_set_parameter\", \"json\": {{ {0} }} }}", string.Join(",", properties));
			}

			private void SetStandalones(SLProtocol protocol)
			{
				bool slaveOnly;
				string profile;
				int domain;
				int priority1;
				int priority2;
				protocol.GetParameters(
					new uint[]
					{
						Parameter.ptpslaveonly_200,
						Parameter.ptpprofile_201,
						Parameter.ptpdomain_202,
						Parameter.ptppriority1_203,
						Parameter.ptppriority2_204,
					},
					out slaveOnly,
					out profile,
					out domain,
					out priority1,
					out priority2);

				this.SlaveOnly = slaveOnly;
				this.Profile = profile;
				this.Domain = domain;
				this.Priority1 = priority1;
				this.Priority2 = priority2;
			}
		}

		public class SessionsBuffer
		{
			public SessionsBuffer()
			{
				this.Buffer = new List<string>();
				this.NextSessionId = string.Empty;
				this.RemainIds = 0;
			}

			public SessionsBuffer(string oldIds) : this()
			{
				if (string.IsNullOrEmpty(oldIds))
				{
					return;
				}

				this.Buffer = oldIds.Split(';').ToList();
				this.SetNextSessionId();

				this.RemainIds = !string.IsNullOrEmpty(this.NextSessionId) ?
					this.Buffer.Count + 1 :
					this.Buffer.Count;
			}

			public List<string> Buffer { get; private set; }

			public string NextSessionId { get; private set; }

			public int RemainIds { get; private set; }

			public void UpdateBuffer(List<string> newIds, bool restart = false)
			{
				newIds.ForEach(id => { if (!this.Buffer.Contains(id)) this.Buffer.Add(id); });

				this.SetNextSessionId();

				this.RemainIds = !string.IsNullOrEmpty(this.NextSessionId) ?
					this.Buffer.Count + 1 :
					this.Buffer.Count;
			}

			private void SetNextSessionId()
			{
				if (this.Buffer.Count < 1)
				{
					this.NextSessionId = string.Empty;
					return;
				}

				this.NextSessionId = this.Buffer[0];
				this.Buffer.RemoveAt(0);
			}
		}

		public class Stream
		{
			public Stream(string sessionId, AlarmStream stream)
			{
				this.SessionId = sessionId;
				this.StreamId = stream.Id.ToString();

				if (stream.Alarms != null &&
					stream.Alarms.Count > 0)
				{
					this.Status = false;
					this.Severity = stream.Alarms[0].Severity;
					this.Description = stream.Alarms[0].Description;
				}
				else
				{
					this.Status = true;
					this.Severity = string.Empty;
					this.Description = string.Empty;
				}
			}

			public StreamsQActionRow StreamsTableRow
			{
				get
				{
					return new StreamsQActionRow
					{
						Streamsindex_1501 = this.StreamId,
						Streamsdisplaykey_1502 = string.Format("{0}.{1}", this.SessionId, this.StreamId),
						Streamsstreamid_1503 = this.StreamId,
						Streamssessionid_1504 = this.SessionId,
						Streamsstatus_1505 = this.Status,
						Streamsalarmseverity_1506 = this.Severity,
						Streamsalarmdescription_1507 = this.Description,
					};
				}
			}

			private string Description { get; set; }

			private string SessionId { get; set; }

			private string Severity { get; set; }

			private bool Status { get; set; }

			private string StreamId { get; set; }
		}

		public class TimingPtp
		{
			public TimingPtp(PtpGetResponse ptpInfo)
			{
				if (ptpInfo == null)
				{
					return;
				}

				this.SaveOnly = ptpInfo.SlaveOnly;
				this.Profile = ptpInfo.Profile.CheckAndConvertValue("N/A");
				this.Domain = ptpInfo.DomainNumber.CheckAndConvertValue(-1);
				this.Priority1 = ptpInfo.Local.Priority1.CheckAndConvertValue(-1);
				this.Priority2 = ptpInfo.Local.Priority2.CheckAndConvertValue(-1);
				this.LocalId = ptpInfo.Local.Id.CheckAndConvertValue("N/A");
				this.MeanPathDealy = ptpInfo.MeanPathDelay.CheckAndConvertValue(-1);
				this.OffsetFromMaster = ptpInfo.OffsetFromMaster.CheckAndConvertValue(-1);
				this.GrandmasterId = ptpInfo.GrandMaster.Id.CheckAndConvertValue("N/A");
				this.GrandmasterPriority1 = ptpInfo.GrandMaster.Priority1.CheckAndConvertValue(-1);
				this.GrandmasterPriority2 = ptpInfo.GrandMaster.Priority2.CheckAndConvertValue(-1);
				this.ClockAccuracy = ptpInfo.GrandMaster.ClockAccuracy.CheckAndConvertValue(-1);
				this.ClockClass = ptpInfo.GrandMaster.ClockClass.CheckAndConvertValue(-1);

				this.CurrentReference = (ptpInfo.SlaveOnly && ptpInfo.GrandMaster.SlaveOnly) ? "PTP Slave" : "Unknown";
				this.SystemStatus = !string.IsNullOrEmpty(ptpInfo.GrandMaster.Id);

				if (ptpInfo.Port == null ||
					ptpInfo.Port.Count < 1)
				{
					return;
				}

				this.PtpPortsTable = new List<PtpportsQActionRow>();
				this.InterfaceStatus = false;

				foreach (var port in ptpInfo.Port)
				{
					this.PtpPortsTable.Add(new PtpPorts(port).PtpPortsTableRow);

					if (!this.InterfaceStatus &&
						port.RoleStatus.Equals("slave", StringComparison.InvariantCultureIgnoreCase))
					{
						this.MinDelayRequestInterval = port.LogMinPdelayReqInterval;
						this.InterfaceStatus = true;
					}
				}

				this.SystemStatus = !string.IsNullOrEmpty(ptpInfo.GrandMaster.Id) && this.InterfaceStatus;
			}

			public int ClockAccuracy { get; private set; }

			public int ClockClass { get; private set; }

			public string CurrentReference { get; private set; }

			public int Domain { get; private set; }

			public string GrandmasterId { get; private set; }

			public int GrandmasterPriority1 { get; private set; }

			public int GrandmasterPriority2 { get; private set; }

			public bool InterfaceStatus { get; private set; }

			public string LocalId { get; private set; }

			public int MeanPathDealy { get; private set; }

			public int MinDelayRequestInterval { get; private set; }

			public int OffsetFromMaster { get; private set; }

			public int Priority1 { get; private set; }

			public int Priority2 { get; private set; }

			public string Profile { get; private set; }

			public List<PtpportsQActionRow> PtpPortsTable { get; private set; }

			public bool SaveOnly { get; private set; }

			public bool SystemStatus { get; private set; }
		}

		internal class AudioSession : IReceiverSendersParams
		{
			public AudioSession(IAudioSessionList session, bool alarmed, string severity, string description)
			{
				if (session == null)
				{
					return;
				}

				this.Class = session.Class.FromStringValue<SessionClass>();
				this.Id = session.Id.ToString();
				this.Name = session.Name;
				this.Status = Methods.GetSessionStatus(session.State, alarmed);
				this.UdpPort = session.Udp.Destination;
				this.TransportIp = session.Ipv4.Transport;
				this.Severity = severity;
				this.Description = description;
			}

			public SessionClass Class { get; private set; }

			public string Description { get; private set; }

			public string Id { get; private set; }

			public string Name { get; private set; }

			public string Severity { get; private set; }

			public SessionStatus Status { get; private set; }

			public string TransportIp { get; private set; }

			public int UdpPort { get; private set; }
		}

		internal class Receiver : IReceiver
		{
			public Receiver(IReceiver session)
			{
				if (session == null)
				{
					return;
				}

				this.Id = session.Id;
				this.Name = session.Name;
				this.Status = session.Status;
				this.TransportIp = session.TransportIp;
				this.UdpPort = session.UdpPort;
				this.Description = session.Description;
				this.Severity = session.Severity;
			}

			public SessionClass Class { get; private set; }

			public string Description { get; private set; }

			public string Id { get; private set; }

			public string Name { get; private set; }

			public ReceiversQActionRow ReceiversTableRow
			{
				get
				{
					return new ReceiversQActionRow
					{
						Receiversindex_1301 = this.Id,
						Receiversdisplaykey_1302 = string.Format("{0}.{1}", this.Name, this.Id),
						Receiversstatus_1303 = (int)this.Status,
						Receiversname_1304 = this.Name,
						Receiverstransportip_1305 = this.TransportIp,
						Receiversudpport_1306 = this.UdpPort,
						Receiversalarmseverity_1307 = this.Severity,
						Receiversalarmdescription_1308 = this.Description,
						Receiverslastupdate_1309 = DateTime.Now.ToOADate()
					};
				}
			}

			public string Severity { get; private set; }

			public SessionStatus Status { get; private set; }

			public string TransportIp { get; private set; }

			public int UdpPort { get; private set; }
		}

		internal class Sender : ISender
		{
			public Sender(ISender session)
			{
				if (session == null)
				{
					return;
				}

				this.Id = session.Id;
				this.Name = session.Name;
				this.Status = session.Status;
				this.TransportIp = session.TransportIp;
				this.UdpPort = session.UdpPort;
				this.Description = session.Description;
				this.Severity = session.Severity;
			}

			public SessionClass Class { get; private set; }

			public string Description { get; private set; }

			public string Id { get; private set; }

			public string Name { get; private set; }

			public SendersQActionRow SendersTableRow
			{
				get
				{
					return new SendersQActionRow
					{
						Sendersindex_1401 = this.Id,
						Sendersdisplaykey_1402 = string.Format("{0}.{1}", this.Name, this.Id),
						Sendersstatus_1403 = (int)this.Status,
						Sendersname_1404 = this.Name,
						Senderstransportip_1405 = this.TransportIp,
						Sendersudpport_1406 = this.UdpPort,
						Sendersalarmseverity_1407 = this.Severity,
						Sendersalarmdescription_1408 = this.Description,
						Senderslastupdate_1409 = DateTime.Now.ToOADate()
					};
				}
			}

			public string Severity { get; private set; }

			public SessionStatus Status { get; private set; }

			public string TransportIp { get; private set; }

			public int UdpPort { get; private set; }
		}

		internal class VideoSession : IReceiverSendersParams
		{
			public VideoSession(IVideoSessionList session)
			{
				if (session == null)
				{
					return;
				}

				this.Class = session.Class.FromStringValue<SessionClass>();
				this.Name = session.Name;
				this.Status = Methods.GetSessionStatus(session.State);
				this.UdpPort = session.Udp.Destination;
				this.TransportIp = session.Ipv4.Transport;
			}

			public SessionClass Class { get; private set; }

			public string Description { get; private set; }

			public string Id { get; private set; }

			public string Name { get; private set; }

			public string Severity { get; private set; }

			public SessionStatus Status { get; private set; }

			public string TransportIp { get; private set; }

			public int UdpPort { get; private set; }
		}
	}

	#endregion Classes

	public enum PtpPortRoleStatus
	{
		Unknown = -1,

		[StringValue("initializing")]
		Initializing = 1,

		[StringValue("fault")]
		Fault = 2,

		[StringValue("disabled")]
		Disabled = 3,

		[StringValue("listening")]
		Listening = 4,

		[StringValue("premaster")]
		Premaster = 5,

		[StringValue("master")]
		Master = 6,

		[StringValue("passive")]
		Passive = 7,

		[StringValue("uncalibrated")]
		Uncalibrated = 8,

		[StringValue("slave")]
		Slave = 9,
	}

	public enum PtpSetType
	{
		Standalone = 0,
		Table = 1
	}

	public enum SessionClass
	{
		[StringValue("sender")]
		Sender = 0,

		[StringValue("receiver")]
		Receiver = 1
	}

	public enum SessionStatus
	{
		[StringValue("unknown")]
		Unknown = -1,

		[StringValue("fault")]
		Fault = 0,

		[StringValue("enabled")]
		Enabled = 1,

		[StringValue("paused")]
		Paused = 2,
	}
}
//---------------------------------
// Interfaces\IAudioSession.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	using System.Collections.Generic;
	using QAction_1.JsonProperties;

	public interface IAudioSession : ISessionBasicGeneral
	{
	}

	public interface IAudioSessionList : ISessionListGeneral
	{
		List<ChannelList> AudioChannelList { get; set; }

		int ChannelFreq { get; set; }

		string Codec { get; set; }

		string DstMacAddr { get; set; }

		int HwId { get; set; }

		object Id { get; set; }

		int LinkOffset { get; set; }

		int NetworkInterfaceIndex { get; set; }

		int PayloadSize { get; set; }

		string RedundantType { get; set; }

		int Samples { get; set; }

		bool Unicast { get; set; }
	}
}
//---------------------------------
// Interfaces\IReceiver.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	internal interface IReceiver
	{
		string Description { get; }

		string Id { get; }

		string Name { get; }

		string Severity { get; }

		Skyline.Protocol.SessionStatus Status { get; }

		string TransportIp { get; }

		int UdpPort { get; }
	}
}
//---------------------------------
// Interfaces\IReceiverSendersParams.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	using Skyline.Protocol;

	internal interface IReceiverSendersParams : IReceiver, ISender
	{
		SessionClass Class { get; }
	}
}
//---------------------------------
// Interfaces\ISender.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	internal interface ISender
	{
		string Description { get; }

		string Id { get; }

		string Name { get; }

		string Severity { get; }

		Skyline.Protocol.SessionStatus Status { get; }

		string TransportIp { get; }

		int UdpPort { get; }
	}
}
//---------------------------------
// Interfaces\ISessionBasicGeneral.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	using System.Collections.Generic;
	using QAction_1.JsonProperties;

	public interface ISessionBasicGeneral
	{
		object Auxmsg { get; set; }

		string Command { get; set; }

		int Error { get; set; }

		string ErrorString { get; set; }

		long Id { get; set; }

		string Name { get; set; }

		int PtpDomain { get; set; }

		string PtpGmid { get; set; }

		int RemoteSid { get; set; }

		string RemoteSidStr { get; set; }

		string RtspUrl { get; set; }

		List<SessionList> SessionList { get; set; }

		bool Success { get; set; }

		int Version { get; set; }
	}
}
//---------------------------------
// Interfaces\ISessionListGeneral.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	using QAction_1.JsonProperties;

	public interface ISessionListGeneral
	{
		string Class { get; set; }

		Ipv4 Ipv4 { get; set; }

		int L1Bandwidth { get; set; }

		int MediaClkOffset { get; set; }

		string Name { get; set; }

		int PacketSize { get; set; }

		int Ptime { get; set; }

		Rtp Rtp { get; set; }

		string State { get; set; }

		string Type { get; set; }

		Udp Udp { get; set; }

		SessionVlan Vlan { get; set; }
	}
}
//---------------------------------
// Interfaces\IVideoSession.cs
//---------------------------------
namespace QAction_1.Interfaces
{
	using System.Collections.Generic;
	using QAction_1.JsonProperties;

	internal interface IVideoSession : ISessionBasicGeneral
	{
	}

	internal interface IVideoSessionList : ISessionListGeneral
	{
		int SofLinkOffset { get; set; }

		bool SyncEnable { get; set; }

		Video Video { get; set; }

		List<int> VideoChannelList { get; set; }
	}
}
//---------------------------------
// JsonProperties\AkmStatus.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class AkmStatus
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("codec-list")]
		public List<CodecList> CodecList { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class CodecList
	{
		[JsonProperty("ccrc-error")]
		public bool CcrcError { get; set; }

		[JsonProperty("channel-stat-int")]
		public bool ChannelStatInt { get; set; }

		[JsonProperty("chan-stat-invalid")]
		public bool ChanStatInvalid { get; set; }

		[JsonProperty("dts-cd-detect")]
		public bool DtsCdDetect { get; set; }

		[JsonProperty("id")]
		public int Id { get; set; }

		[JsonProperty("non-audio-detect")]
		public bool NonAudioDetect { get; set; }

		[JsonProperty("non-pcm-detect")]
		public bool NonPcmDetect { get; set; }

		[JsonProperty("parity-error")]
		public bool ParityError { get; set; }

		[JsonProperty("pll-unlock")]
		public bool PllUnlock { get; set; }

		[JsonProperty("pre-emp-detect")]
		public bool PreEmpDetect { get; set; }

		[JsonProperty("qcrc-error")]
		public bool QcrcError { get; set; }

		[JsonProperty("q-sub-int-stat")]
		public bool QSubIntStat { get; set; }

		[JsonProperty("samp-freq-KHz")]
		public double SampFreqKHz { get; set; }
	}
}
//---------------------------------
// JsonProperties\AlarmStatus.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class Alarm
	{
		[JsonProperty("description")]
		public string Description { get; set; }

		[JsonProperty("level")]
		public string Level { get; set; }

		[JsonProperty("severity")]
		public string Severity { get; set; }

		[JsonProperty("type")]
		public int Type { get; set; }
	}

	public class AlarmSession
	{
		[JsonProperty("alarms")]
		public List<Alarm> Alarms { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("streams")]
		public List<AlarmStream> Streams { get; set; }
	}

	public class AlarmStatus
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("global-status")]
		public List<GlobalStatu> GlobalStatus { get; set; }

		[JsonProperty("sessions")]
		public List<AlarmSession> Sessions { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class AlarmStream
	{
		[JsonProperty("alarms")]
		public List<Alarm> Alarms { get; set; }

		[JsonProperty("id")]
		public object Id { get; set; }
	}

	public class GlobalStatu
	{
		[JsonProperty("description")]
		public string Description { get; set; }

		[JsonProperty("type")]
		public int Type { get; set; }
	}
}
//---------------------------------
// JsonProperties\DeviceStatus.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class DeviceAlarm
	{
		[JsonProperty("description")]
		public string Description { get; set; }

		[JsonProperty("severity")]
		public string Severity { get; set; }
	}

	public class DeviceStatus
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("status")]
		public Status Status { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class Eth
	{
		[JsonProperty("eth-name")]
		public string EthName { get; set; }

		[JsonProperty("ifid")]
		public int Ifid { get; set; }

		[JsonProperty("ipv4")]
		public string Ipv4 { get; set; }

		[JsonProperty("linkup")]
		public bool Linkup { get; set; }

		[JsonProperty("mac")]
		public string Mac { get; set; }

		[JsonProperty("sfp")]
		public Sfp Sfp { get; set; }
	}

	public class GrandMaster
	{
		[JsonProperty("clockAccuracy")]
		public int ClockAccuracy { get; set; }

		[JsonProperty("clockAccuracyTable6")]
		public string ClockAccuracyTable6 { get; set; }

		[JsonProperty("clockClass")]
		public int ClockClass { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("priority1")]
		public int Priority1 { get; set; }

		[JsonProperty("priority2")]
		public int Priority2 { get; set; }

		[JsonProperty("scaledLogVariance")]
		public int ScaledLogVariance { get; set; }

		[JsonProperty("slaveOnly")]
		public bool SlaveOnly { get; set; }
	}

	public class Local
	{
		[JsonProperty("clockAccuracy")]
		public int ClockAccuracy { get; set; }

		[JsonProperty("clockAccuracyTable6")]
		public string ClockAccuracyTable6 { get; set; }

		[JsonProperty("clockClass")]
		public int ClockClass { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("priority1")]
		public int Priority1 { get; set; }

		[JsonProperty("priority2")]
		public int Priority2 { get; set; }

		[JsonProperty("scaledLogVariance")]
		public int ScaledLogVariance { get; set; }

		[JsonProperty("slaveOnly")]
		public bool SlaveOnly { get; set; }
	}

	public class Port
	{
		[JsonProperty("announceInterval")]
		public int AnnounceInterval { get; set; }

		[JsonProperty("announceReceiptTimeout")]
		public int AnnounceReceiptTimeout { get; set; }

		[JsonProperty("delayMechanism")]
		public string DelayMechanism { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("logMinDelayReqInterval")]
		public int LogMinDelayReqInterval { get; set; }

		[JsonProperty("logMinPdelayReqInterval")]
		public int LogMinPdelayReqInterval { get; set; }

		[JsonProperty("peerMeanPathDelay")]
		public int PeerMeanPathDelay { get; set; }

		[JsonProperty("portId")]
		public int PortId { get; set; }

		[JsonProperty("roleStatus")]
		public string RoleStatus { get; set; }

		[JsonProperty("roleStatusId")]
		public int RoleStatusId { get; set; }

		[JsonProperty("syncInterval")]
		public int SyncInterval { get; set; }
	}

	public class Ptp
	{
		[JsonProperty("domainNumber")]
		public int DomainNumber { get; set; }

		[JsonProperty("grandMaster")]
		public GrandMaster GrandMaster { get; set; }

		[JsonProperty("local")]
		public Local Local { get; set; }

		[JsonProperty("meanPathDelay")]
		public double MeanPathDelay { get; set; }

		[JsonProperty("offsetFromMaster")]
		public double OffsetFromMaster { get; set; }

		[JsonProperty("offsetScaledLogVariance")]
		public double OffsetScaledLogVariance { get; set; }

		[JsonProperty("port")]
		public List<Port> Port { get; set; }

		[JsonProperty("profile")]
		public string Profile { get; set; }

		[JsonProperty("slaveOnly")]
		public bool SlaveOnly { get; set; }

		[JsonProperty("stepsRemoved")]
		public int StepsRemoved { get; set; }
	}

	public class Session
	{
		[JsonProperty("alarms")]
		public List<DeviceAlarm> Alarms { get; set; }

		[JsonProperty("device_id")]
		public string DeviceId { get; set; }

		[JsonProperty("id")]
		public long Id { get; set; }

		[JsonProperty("nmos_id")]
		public string NmosId { get; set; }

		[JsonProperty("stream")]
		public List<Stream> Stream { get; set; }
	}

	public class Sfp
	{
		[JsonProperty("part_number")]
		public string PartNumber { get; set; }

		[JsonProperty("present")]
		public bool Present { get; set; }

		[JsonProperty("rx_power")]
		public double RxPower { get; set; }

		[JsonProperty("temperature")]
		public double Temperature { get; set; }

		[JsonProperty("tx_power")]
		public double TxPower { get; set; }

		[JsonProperty("wavelength")]
		public double Wavelength { get; set; }
	}

	public class Status
	{
		[JsonProperty("device_id")]
		public string DeviceId { get; set; }

		[JsonProperty("eths")]
		public List<Eth> Eths { get; set; }

		[JsonProperty("ptp")]
		public Ptp Ptp { get; set; }

		[JsonProperty("sessions")]
		public List<Session> Sessions { get; set; }
	}

	public class Stream
	{
		[JsonProperty("alarms")]
		public List<DeviceAlarm> Alarms { get; set; }

		[JsonProperty("id")]
		public long Id { get; set; }
	}
}
//---------------------------------
// JsonProperties\EthernetPortStatus.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class EthernetPortStatus
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("dynamic")]
		public DynamicInfo DynamicInfo { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class DynamicInfo
	{
		[JsonProperty("board-model-licensed")]
		public string BoardModelLicensed { get; set; }

		[JsonProperty("chipid-name")]
		public string ChipidName { get; set; }

		[JsonProperty("chipid-version")]
		public string ChipidVersion { get; set; }

		[JsonProperty("eth-basics")]
		public List<Eth> Ethbasics { get; set; }
	}

}
//---------------------------------
// JsonProperties\PtpGet.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class PtpGetResponse
	{
		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("domainNumber")]
		public int DomainNumber { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("grandMaster")]
		public PtpGrandMaster GrandMaster { get; set; }

		[JsonProperty("local")]
		public PtpLocal Local { get; set; }

		[JsonProperty("meanPathDelay")]
		public double MeanPathDelay { get; set; }

		[JsonProperty("offsetFromMaster")]
		public double OffsetFromMaster { get; set; }

		[JsonProperty("offsetScaledLogVariance")]
		public double OffsetScaledLogVariance { get; set; }

		[JsonProperty("port")]
		public List<PtpPort> Port { get; set; }

		[JsonProperty("profile")]
		public string Profile { get; set; }

		[JsonProperty("slaveOnly")]
		public bool SlaveOnly { get; set; }

		[JsonProperty("stepsRemoved")]
		public int StepsRemoved { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class PtpGrandMaster
	{
		[JsonProperty("clockAccuracy")]
		public int ClockAccuracy { get; set; }

		[JsonProperty("clockAccuracyTable6")]
		public string ClockAccuracyTable6 { get; set; }

		[JsonProperty("clockClass")]
		public int ClockClass { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("priority1")]
		public int Priority1 { get; set; }

		[JsonProperty("priority2")]
		public int Priority2 { get; set; }

		[JsonProperty("scaledLogVariance")]
		public int ScaledLogVariance { get; set; }

		[JsonProperty("slaveOnly")]
		public bool SlaveOnly { get; set; }
	}

	public class PtpLocal
	{
		[JsonProperty("clockAccuracy")]
		public int ClockAccuracy { get; set; }

		[JsonProperty("clockClass")]
		public int ClockClass { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("priority1")]
		public int Priority1 { get; set; }

		[JsonProperty("priority2")]
		public int Priority2 { get; set; }

		[JsonProperty("scaledLogVariance")]
		public int ScaledLogVariance { get; set; }
	}

	public class PtpPort
	{
		[JsonProperty("announceInterval")]
		public int AnnounceInterval { get; set; }

		[JsonProperty("announceReceiptTimeout")]
		public int AnnounceReceiptTimeout { get; set; }

		[JsonProperty("delayMechanism")]
		public string DelayMechanism { get; set; }

		[JsonProperty("id")]
		public string Id { get; set; }

		[JsonProperty("logMinDelayReqInterval")]
		public int LogMinDelayReqInterval { get; set; }

		[JsonProperty("logMinPdelayReqInterval")]
		public int LogMinPdelayReqInterval { get; set; }

		[JsonProperty("peerMeanPathDelay")]
		public double PeerMeanPathDelay { get; set; }

		[JsonProperty("portId")]
		public int PortId { get; set; }

		[JsonProperty("roleStatus")]
		public string RoleStatus { get; set; }

		[JsonProperty("roleStatusId")]
		public int RoleStatusId { get; set; }

		[JsonProperty("syncInterval")]
		public int SyncInterval { get; set; }
	}
}
//---------------------------------
// JsonProperties\Reboot.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using Newtonsoft.Json;

	public class Reboot
	{
		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}
}
//---------------------------------
// JsonProperties\SessionBasicInfo.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;
	using QAction_1.Interfaces;

	public class ChannelList
	{
		[JsonProperty("id")]
		public int Id { get; set; }

		[JsonProperty("position")]
		public int Position { get; set; }

		[JsonProperty("type")]
		public string Type { get; set; }
	}

	public class Ipv4
	{
		[JsonProperty("dscp")]
		public int Dscp { get; set; }

		[JsonProperty("local")]
		public string Local { get; set; }

		[JsonProperty("transport")]
		public string Transport { get; set; }

		[JsonProperty("ttl")]
		public int Ttl { get; set; }
	}

	public class Rtp
	{
		[JsonProperty("payload-type")]
		public int PayloadType { get; set; }

		[JsonProperty("sscr")]
		public Sscr Sscr { get; set; }
	}

	public class SessionBasicInfo : IAudioSession, IVideoSession
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("id")]
		public long Id { get; set; }

		[JsonProperty("name")]
		public string Name { get; set; }

		[JsonProperty("ptp-domain")]
		public int PtpDomain { get; set; }

		[JsonProperty("ptp-gmid")]
		public string PtpGmid { get; set; }

		[JsonProperty("remote-sid")]
		public int RemoteSid { get; set; }

		[JsonProperty("remote-sid-str")]
		public string RemoteSidStr { get; set; }

		[JsonProperty("rtsp-url")]
		public string RtspUrl { get; set; }

		[JsonProperty("session-list")]
		public List<SessionList> SessionList { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }

		[JsonProperty("version")]
		public int Version { get; set; }
	}

	public class SessionList : IAudioSessionList, IVideoSessionList
	{
		[JsonProperty("channel-list")]
		public List<ChannelList> AudioChannelList { get; set; }

		[JsonProperty("channel-freq")]
		public int ChannelFreq { get; set; }

		[JsonProperty("class")]
		public string Class { get; set; }

		[JsonProperty("codec")]
		public string Codec { get; set; }

		[JsonProperty("dst-mac-addr")]
		public string DstMacAddr { get; set; }

		[JsonProperty("hw-id")]
		public int HwId { get; set; }

		[JsonProperty("id")]
		public object Id { get; set; }

		[JsonProperty("ipv4")]
		public Ipv4 Ipv4 { get; set; }

		[JsonProperty("l1-bandwidth")]
		public int L1Bandwidth { get; set; }

		[JsonProperty("link-offset")]
		public int LinkOffset { get; set; }

		[JsonProperty("media-clk-offset")]
		public int MediaClkOffset { get; set; }

		[JsonProperty("name")]
		public string Name { get; set; }

		[JsonProperty("network-interface-index")]
		public int NetworkInterfaceIndex { get; set; }

		[JsonProperty("packet-size")]
		public int PacketSize { get; set; }

		[JsonProperty("payload-size")]
		public int PayloadSize { get; set; }

		[JsonProperty("ptime")]
		public int Ptime { get; set; }

		[JsonProperty("redundant-type")]
		public string RedundantType { get; set; }

		[JsonProperty("rtp")]
		public Rtp Rtp { get; set; }

		[JsonProperty("samples")]
		public int Samples { get; set; }

		[JsonProperty("sof-link-offset")]
		public int SofLinkOffset { get; set; }

		[JsonProperty("state")]
		public string State { get; set; }

		[JsonProperty("sync-enable")]
		public bool SyncEnable { get; set; }

		[JsonProperty("type")]
		public string Type { get; set; }

		[JsonProperty("udp")]
		public Udp Udp { get; set; }

		[JsonProperty("unicast")]
		public bool Unicast { get; set; }

		[JsonProperty("video")]
		public Video Video { get; set; }

		public List<int> VideoChannelList { get; set; }

		[JsonProperty("vlan")]
		public SessionVlan Vlan { get; set; }
	}

	public class SessionVlan
	{
		[JsonProperty("id")]
		public int Id { get; set; }

		[JsonProperty("priority")]
		public int Priority { get; set; }

		[JsonProperty("tpid")]
		public int Tpid { get; set; }
	}

	public class Sscr
	{
		[JsonProperty("type")]
		public string Type { get; set; }

		[JsonProperty("value")]
		public int Value { get; set; }
	}

	public class Udp
	{
		[JsonProperty("destination")]
		public int Destination { get; set; }

		[JsonProperty("source")]
		public int Source { get; set; }
	}

	public class Video
	{
		[JsonProperty("format")]
		public string Format { get; set; }
	}
}
//---------------------------------
// JsonProperties\SystemStoredParams.cs
//---------------------------------
namespace QAction_1.JsonProperties
{
	using System.Collections.Generic;
	using Newtonsoft.Json;

	public class Advert
	{
		[JsonProperty("board-name-prefix")]
		public string BoardNamePrefix { get; set; }

		[JsonProperty("eth-port")]
		public string EthPort { get; set; }

		[JsonProperty("tcp-port")]
		public int TcpPort { get; set; }
	}

	public class Cfg
	{
		[JsonProperty("autosave-enable")]
		public bool AutosaveEnable { get; set; }

		[JsonProperty("cfg-file-path")]
		public string CfgFilePath { get; set; }

		[JsonProperty("offset-from-master-threshold")]
		public int OffsetFromMasterThreshold { get; set; }
	}

	public class Ember
	{
		[JsonProperty("tcp-port")]
		public int TcpPort { get; set; }
	}

	public class Ethipv4
	{
		[JsonProperty("eth")]
		public string Eth { get; set; }

		[JsonProperty("mode")]
		public string Mode { get; set; }

		[JsonProperty("static")]
		public Static Static { get; set; }
	}

	public class Nmos
	{
		[JsonProperty("advertisement-interface")]
		public string AdvertisementInterface { get; set; }

		[JsonProperty("device-name")]
		public string DeviceName { get; set; }

		[JsonProperty("enable")]
		public bool Enable { get; set; }

		[JsonProperty("http-sdp-port")]
		public int HttpSdpPort { get; set; }

		[JsonProperty("node-description")]
		public string NodeDescription { get; set; }

		[JsonProperty("node-name")]
		public string NodeName { get; set; }

		[JsonProperty("node-port")]
		public int NodePort { get; set; }

		[JsonProperty("query-port")]
		public int QueryPort { get; set; }

		[JsonProperty("registration-port")]
		public int RegistrationPort { get; set; }

		[JsonProperty("shelf-id")]
		public int ShelfId { get; set; }

		[JsonProperty("slot-id")]
		public int SlotId { get; set; }
	}

	public class Redundancy
	{
		[JsonProperty("enable")]
		public bool Enable { get; set; }
	}

	public class Rtsp
	{
		[JsonProperty("eth-port")]
		public string EthPort { get; set; }

		[JsonProperty("tcp-port")]
		public int TcpPort { get; set; }
	}

	public class Sap
	{
		[JsonProperty("enable")]
		public bool Enable { get; set; }
	}

	public class Slp
	{
		[JsonProperty("enable")]
		public bool Enable { get; set; }
	}

	public class Static
	{
		[JsonProperty("gw")]
		public string Gw { get; set; }

		[JsonProperty("ip")]
		public string Ip { get; set; }

		[JsonProperty("mask")]
		public string Mask { get; set; }
	}

	public class Stored
	{
		[JsonProperty("advert")]
		public Advert Advert { get; set; }

		[JsonProperty("cfg")]
		public Cfg Cfg { get; set; }

		[JsonProperty("ember")]
		public Ember Ember { get; set; }

		[JsonProperty("ethipv4")]
		public List<Ethipv4> Ethipv4 { get; set; }

		[JsonProperty("nmos")]
		public Nmos Nmos { get; set; }

		[JsonProperty("redundancy")]
		public Redundancy Redundancy { get; set; }

		[JsonProperty("rtsp")]
		public Rtsp Rtsp { get; set; }

		[JsonProperty("sap")]
		public Sap Sap { get; set; }

		[JsonProperty("serial-number")]
		public string SerialNumber { get; set; }

		[JsonProperty("slp")]
		public Slp Slp { get; set; }

		[JsonProperty("tdm")]
		public Tdm Tdm { get; set; }

		[JsonProperty("videoTimingParameters")]
		public VideoTimingParameters VideoTimingParameters { get; set; }

		[JsonProperty("vlan")]
		public Vlan Vlan { get; set; }

		[JsonProperty("vtc")]
		public Vtc Vtc { get; set; }

		[JsonProperty("walkabout")]
		public Walkabout Walkabout { get; set; }
	}

	public class SystemStoredParams
	{
		[JsonProperty("auxmsg")]
		public object Auxmsg { get; set; }

		[JsonProperty("command")]
		public string Command { get; set; }

		[JsonProperty("error")]
		public int Error { get; set; }

		[JsonProperty("error_string")]
		public string ErrorString { get; set; }

		[JsonProperty("stored")]
		public Stored Stored { get; set; }

		[JsonProperty("success")]
		public bool Success { get; set; }
	}

	public class Tdm
	{
		[JsonProperty("channels-per-line")]
		public int ChannelsPerLine { get; set; }
	}

	public class VideoTimingParameters
	{
		[JsonProperty("timing-mode")]
		public string TimingMode { get; set; }
	}

	public class Vlan
	{
		[JsonProperty("ID1")]
		public int ID1 { get; set; }

		[JsonProperty("ID2")]
		public int ID2 { get; set; }
	}

	public class Vtc
	{
		[JsonProperty("image-path")]
		public string ImagePath { get; set; }
	}

	public class Walkabout
	{
		[JsonProperty("enable")]
		public bool Enable { get; set; }
	}
}]]></QAction>
    <QAction id="3" name="Parse Responses" encoding="csharp" triggers="10;11;12;13;14;15;16;17;19" dllImport="Newtonsoft.Json.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll"><![CDATA[using System;
using Newtonsoft.Json;
using QAction_1.JsonProperties;
using Skyline.DataMiner.Library.Protocol;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.General;

internal enum TriggerPids
{
	Reboot = 10,
	DeviceStatus = 11,
	AkmStatus = 12,
	AlarmStatus = 13,
	PtpGet = 14,
	PtpSet = 15,
	PtpRunning = 16,
	SessionBasic = 17,
	EthernetPort = 19
}

/// <summary>
/// DataMiner QAction Class: Parse Responses.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			var trigger = (TriggerPids)protocol.GetTriggerParameter();

			if (!Enum.IsDefined(typeof(TriggerPids), trigger))
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
				return;
			}

			string status;
			string content;
			protocol.GetParameters<string, string>(
				new uint[] { Parameter.responsestatus_1, Parameter.responsecontent_2 },
				out status,
				out content);

			if (!status.Contains("200") || string.IsNullOrEmpty(content))
			{
				protocol.Log("QA" + protocol.QActionID + "|" + (int)trigger + "|Run|Status code: " + status, LogType.Error, LogLevel.NoLogging);
				return;
			}

			switch (trigger)
			{
				case TriggerPids.Reboot:
					protocol.Log("QA" + protocol.QActionID + "|Run|Rebooted.", LogType.Information, LogLevel.Level3);
					break;

				case TriggerPids.DeviceStatus:
					ParseClasses.DeviceStatusInformation(protocol, JsonConvert.DeserializeObject<DeviceStatus>(content));

					break;

				case TriggerPids.AkmStatus:
					ParseClasses.Aes3InputStatus(protocol, JsonConvert.DeserializeObject<AkmStatus>(content));
					break;

				case TriggerPids.AlarmStatus:
					ParseClasses.AlarmStatusParse(protocol, JsonConvert.DeserializeObject<AlarmStatus>(content));
					break;

				case TriggerPids.PtpGet:
					ParseClasses.PtpGetInfo(protocol, JsonConvert.DeserializeObject<PtpGetResponse>(content));
					break;

				case TriggerPids.PtpSet:
					protocol.Log("QA" + protocol.QActionID + "|Run|PTP Set. No special output information except for the success status.", LogType.Information, LogLevel.Level3);
					break;

				case TriggerPids.PtpRunning:
					break;

				case TriggerPids.SessionBasic:
					ParseClasses.SessionBasicInfoParse(protocol, JsonConvert.DeserializeObject<SessionBasicInfo>(content));
					break;
				case TriggerPids.EthernetPort:
					ParseClasses.EthernetPortStatusInformation(protocol, JsonConvert.DeserializeObject<EthernetPortStatus>(content));
					break;
				default:
					protocol.Log("QA" + protocol.QActionID + "|Run-Switch|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
					break;
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]></QAction>
    <QAction id="4" name="Send PTP Configuration for Standalone Params" encoding="csharp" triggers="250;251;252;253;254" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll"><![CDATA[using System;
using Skyline.DataMiner.Library.Protocol;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol;
using Skyline.Protocol.General;

internal enum TriggerPids
{
	Slave = 250,
	Profile = 251,
	Domain = 252,
	Priority1 = 253,
	Priority2 = 254,
}

/// <summary>
/// DataMiner QAction Class: Send PTP Configuration.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			var trigger = (TriggerPids)protocol.GetTriggerParameter();

			if (!Enum.IsDefined(typeof(TriggerPids), (int)trigger))
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
				return;
			}

			var property = string.Empty;

			switch (trigger)
			{
				case TriggerPids.Slave:
					property = "slaveOnly";
					break;

				case TriggerPids.Profile:
					property = "profile";
					break;

				case TriggerPids.Domain:
					property = "domain";
					break;

				case TriggerPids.Priority1:
					property = "priority1";
					break;

				case TriggerPids.Priority2:
					property = "priority2";
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
					break;
			}

			var value = protocol.GetParameter<string>((int)trigger);
			var postBody = PtpSet.GetPtpSetPostBody(protocol, PtpSetType.Standalone, property, value);

			if (string.IsNullOrEmpty(postBody))
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|PTP Set Post Body is empty.", LogType.Error, LogLevel.NoLogging);
				return;
			}

			protocol.Log("QA" + protocol.QActionID + "|Run|PTP Set Post Body:" + postBody, LogType.Information, LogLevel.Level3);
			protocol.SetParameter(Parameter.postbodyptpsetparameters_4, postBody);
			protocol.CheckTrigger(8);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]></QAction>
    <QAction id="5" name="Send PTP Configuration for Table Params" encoding="csharp" row="true" triggers="1254;1255;1256" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll"><![CDATA[using System;
using Skyline.DataMiner.Library.Protocol;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol;
using Skyline.Protocol.General;

internal enum TriggerPids
{
	SyncInterval = 1254,
	AnnounceInterval = 1255,
	AnnounceTimeout = 1256,
}

/// <summary>
/// DataMiner QAction Class: Send PTP Configuration for Table Params.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			var trigger = (TriggerPids)protocol.GetTriggerParameter();

			if (!Enum.IsDefined(typeof(TriggerPids), (int)trigger))
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
				return;
			}

			var property = string.Empty;

			switch (trigger)
			{
				case TriggerPids.SyncInterval:
					property = "syncInterval";
					break;

				case TriggerPids.AnnounceInterval:
					property = "announceInterval";

					break;

				case TriggerPids.AnnounceTimeout:
					property = "announceReceiptTimeout";
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
					break;
			}

			var pk = protocol.RowKey();
			var value = protocol.GetParameter<string>((int)trigger);
			var portId = protocol.GetParameterIndexByKey<string>(Parameter.Ptpports.tablePid, pk, Parameter.Ptpports.Idx.ptpportsportid_1208 + 1);

			var postBody = PtpSet.GetPtpSetPostBody(protocol, PtpSetType.Table, property, value, portId);

			if (string.IsNullOrEmpty(postBody))
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|PTP Set Post Body is empty.", LogType.Error, LogLevel.NoLogging);
				return;
			}

			protocol.Log("QA" + protocol.QActionID + "|Run|PTP Set Post Body:" + postBody, LogType.Information, LogLevel.Level3);
			protocol.SetParameter(Parameter.postbodyptpsetparameters_4, postBody);
			protocol.CheckTrigger(8);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]></QAction>
    <QAction id="6" name="Delete Entry from Table" encoding="csharp" row="true" triggers="1360;1460" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll"><![CDATA[using System;

using Skyline.DataMiner.Scripting;

internal enum TriggerPIDs
{
	Receivers = 1360,
	Senders = 1460
}

/// <summary>
/// DataMiner QAction Class: Delete Entry from Table.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			var trigger = (TriggerPIDs)protocol.GetTriggerParameter();
			int tableId = -1;

			switch (trigger)
			{
				case TriggerPIDs.Receivers:
					tableId = Parameter.Receivers.tablePid;
					break;

				case TriggerPIDs.Senders:
					tableId = Parameter.Senders.tablePid;
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Trigger not implemented: " + (int)trigger, LogType.Error, LogLevel.NoLogging);
					return;
			}

			if (tableId < 0)
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|Invalid table ID: " + tableId, LogType.Error, LogLevel.NoLogging);
				return;
			}

			var pk = protocol.RowKey();
			DeleteTableEntry(protocol, tableId, pk);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static void DeleteTableEntry(SLProtocol protocol, int tableId, string primaryKey)
	{
		protocol.Log("QA" + protocol.QActionID + "|DeleteTableEntry|Table ID:" + tableId + "; PrimaryKey" + primaryKey, LogType.Information, LogLevel.NoLogging);
		protocol.DeleteRow(tableId, primaryKey);
	}
}]]></QAction>
    <QAction id="7" name="Auto Clear Old Entries from Receivers and Senders Tables" encoding="csharp" triggers="18;223;224" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
      <Condition>id:223 == -1</Condition><![CDATA[using System;
using System.Linq;
using Skyline.DataMiner.Library.Protocol;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.General;

/// <summary>
/// DataMiner QAction Class: Auto Clear Old Entries from Receivers and Senders Tables.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			bool autoclear;
			double maxTime;
			protocol.GetParameters(
				new uint[] { Parameter.autoclearreceiverandsendertables_223, Parameter.maxtime_224 },
				out autoclear,
				out maxTime);

			if (!autoclear)
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|Auto clear is disabled.", LogType.Error, LogLevel.NoLogging);
				return;
			}

			var receivers = protocol.GetColumns(
				Parameter.Receivers.tablePid,
				new uint[] { Parameter.Receivers.Idx.receiversindex_1301, Parameter.Receivers.Idx.receiverslastupdate_1309 },
				(string pk, string lastupdate) => new { Key = pk, LastUpdate = lastupdate.GetTimeDifferentTillNow().TotalSeconds })
				.Where(x => x.LastUpdate > maxTime).Select(x => x.Key);

			var senders = protocol.GetColumns(
				Parameter.Senders.tablePid,
				new uint[] { Parameter.Senders.Idx.sendersindex_1401, Parameter.Senders.Idx.senderslastupdate_1409 },
				(string pk, string lastupdate) => new { Key = pk, LastUpdate = lastupdate.GetTimeDifferentTillNow().TotalSeconds })
				.Where(x => x.LastUpdate > maxTime).Select(x => x.Key);

			if (receivers.Any())
			{
				protocol.DeleteRow(Parameter.Receivers.tablePid, receivers.ToArray());
			}

			if (senders.Any())
			{
				protocol.DeleteRow(Parameter.Senders.tablePid, senders.ToArray());
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]></QAction>
  </QActions>
  <HTTP>
    <Session id="1" name="Reboot">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "reboot", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="2" name="Get Device Status">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "get_device_status", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="3" name="Get Akm Status">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "get_akm_status", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="4" name="Get Alarm Status">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "get_alarm_status", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="5" name="PTP Get">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "ptp_get", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="6" name="PTP Set Parameter">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data pid="4" />
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="8" name="Get Session Basic Info">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data pid="3" />
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
    <Session id="9" name="Get Ethernet Port Status">
      <Connection id="1">
        <Request verb="POST" url="/cgi-bin/handleCommands">
          <Headers>
            <Header key="Content-Type">application/json</Header>
          </Headers>
          <Data><![CDATA[{"command": "sysmgr_get_dynamic_parameters", "json": ""}]]></Data>
        </Request>
        <Response statusCode="1">
          <Content pid="2" />
        </Response>
      </Connection>
    </Session>
  </HTTP>
  <Groups>
    <Group id="1">
      <Name>Get Device Status</Name>
      <Description>Get Device Status</Description>
      <Type>poll</Type>
      <Content>
        <Session>2</Session>
      </Content>
    </Group>
    <Group id="2">
      <Name>Get Akm Status</Name>
      <Description>Get Akm Status</Description>
      <Type>poll</Type>
      <Content>
        <Session>3</Session>
      </Content>
    </Group>
    <Group id="3">
      <Name>Get Alarm Status</Name>
      <Description>Get Alarm Status</Description>
      <Type>poll</Type>
      <Content>
        <Session>4</Session>
      </Content>
    </Group>
    <Group id="4">
      <Name>Get PTP Info</Name>
      <Description>Get PTP Info</Description>
      <Type>poll</Type>
      <Content>
        <Session>5</Session>
      </Content>
    </Group>
    <Group id="5">
      <Name>Get Session Basic Info</Name>
      <Description>Get Session Basic Info</Description>
      <Type>poll</Type>
      <Content>
        <Session>8</Session>
      </Content>
    </Group>
    <Group id="6">
      <Name>Reboot Device</Name>
      <Description>Reboot Device</Description>
      <Type>poll</Type>
      <Content>
        <Session>1</Session>
      </Content>
    </Group>
    <Group id="7">
      <Name>PTP Set Parameters</Name>
      <Description>PTP Set Parameters</Description>
      <Type>poll</Type>
      <Content>
        <Session>6</Session>
      </Content>
    </Group>
    <Group id="8">
      <Name>Get Ethernet Port Status</Name>
      <Description>Get Ethernet Port Status</Description>
      <Type>poll</Type>
      <Content>
        <Session>9</Session>
      </Content>
    </Group>
  </Groups>
  <Triggers>
    <Trigger id="1">
      <Name>After Group Get Device Status</Name>
      <On id="1">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>1</Id>
      </Content>
    </Trigger>
    <Trigger id="2">
      <Name>After Group Get Akm Status</Name>
      <On id="2">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>2</Id>
      </Content>
    </Trigger>
    <Trigger id="3">
      <Name>After Group Get Alarm Status</Name>
      <On id="3">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>3</Id>
        <Id>6</Id>
        <Id>10</Id>
      </Content>
    </Trigger>
    <Trigger id="4">
      <Name>After Group Get PTP Info</Name>
      <On id="4">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>4</Id>
      </Content>
    </Trigger>
    <Trigger id="5">
      <Name>After Group Get Session Basic Info</Name>
      <On id="5">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>5</Id>
      </Content>
    </Trigger>
    <Trigger id="6">
      <Name>QA Get Session Basic Info</Name>
      <Type>action</Type>
      <Content>
        <Id>10</Id>
      </Content>
    </Trigger>
    <Trigger id="7">
      <Name>On Change Reboot Device</Name>
      <On id="190">parameter</On>
      <Time>change</Time>
      <Type>action</Type>
      <Content>
        <Id>11</Id>
      </Content>
    </Trigger>
    <Trigger id="8">
      <Name>QA Get PTP Set Parameters</Name>
      <Type>action</Type>
      <Content>
        <Id>12</Id>
      </Content>
    </Trigger>
    <Trigger id="9">
      <Name>After Group PTP Set Parameters</Name>
      <On id="7">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>14</Id>
        <Id>13</Id>
      </Content>
    </Trigger>
    <Trigger id="10">
      <Name>Execute Get Ethernet Port Status</Name>
      <Type>action</Type>
      <Content>
        <Id>15</Id>
      </Content>
    </Trigger>
    <Trigger id="11">
      <Name>After Group Get Ethernet Port Status</Name>
      <On id="8">group</On>
      <Time>after</Time>
      <Type>action</Type>
      <Content>
        <Id>16</Id>
      </Content>
    </Trigger>
  </Triggers>
  <Actions>
    <Action id="1">
      <Name>Run QA Parse Device Status</Name>
      <On id="11">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="2">
      <Name>Run QA Parse Akm Status</Name>
      <On id="12">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="3">
      <Name>Run QA Parse Alarm Status</Name>
      <On id="13">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="4">
      <Name>Run QA Parse PTP Info</Name>
      <On id="14">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="5">
      <Name>Run QA Parse Session Basic Info</Name>
      <On id="17">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="6">
      <Name>Run QA Check Auto Clear</Name>
      <Condition><![CDATA[id:223 == -1]]></Condition>
      <On id="18">parameter</On>
      <Type>run actions</Type>
    </Action>
    <Action id="10">
      <Name>Get Session Basic Info</Name>
      <Condition><![CDATA[id:3 != ""]]></Condition>
      <On id="5">group</On>
      <Type>execute one top</Type>
    </Action>
    <Action id="11">
      <Name>Reboot Device</Name>
      <On id="6">group</On>
      <Type>execute next</Type>
    </Action>
    <Action id="12">
      <Name>PTP Set Parameters</Name>
      <Condition><![CDATA[id:4 != ""]]></Condition>
      <On id="7">group</On>
      <Type>execute next</Type>
    </Action>
    <Action id="13">
      <Name>Poll PTP Get</Name>
      <On id="4">group</On>
      <Type>execute one top</Type>
    </Action>
    <Action id="14">
      <Name>Add Delay Between Set and Get</Name>
      <On>group</On>
      <Type value="1000">sleep</Type>
    </Action>
    <Action id="15">
      <Name>Execute Get Ethernet Port Status Group</Name>
      <On id="8">group</On>
      <Type>execute next</Type>
    </Action>
    <Action id="16">
      <Name>Run QA Parse Ethernet Port Status</Name>
      <On id="19">parameter</On>
      <Type>run actions</Type>
    </Action>
  </Actions>
  <Timers>
    <Timer id="1">
      <Name>Fast Timer (10s)</Name>
      <Time initial="true">10000</Time>
      <Interval>75</Interval>
      <Content>
        <Group>1</Group>
        <Group>4</Group>
      </Content>
    </Timer>
    <Timer id="2">
      <Name>Medium Timer (30s)</Name>
      <Time initial="true">30000</Time>
      <Interval>75</Interval>
      <Content>
        <Group>2</Group>
        <Group>3</Group>
      </Content>
    </Timer>
  </Timers>
  <PortSettings name="HTTP Connection">
    <PortTypeSerial>
      <Disabled>true</Disabled>
    </PortTypeSerial>
    <BusAddress>
      <DefaultValue>ByPassProxy</DefaultValue>
      <Disabled>false</Disabled>
    </BusAddress>
    <IPport>
      <DefaultValue>80</DefaultValue>
      <Disabled>false</Disabled>
    </IPport>
  </PortSettings>
  <VersionHistory>
    <Branches>
      <Branch id="1">
        <Comment>Main Branch</Comment>
        <SystemVersions>
          <SystemVersion id="0">
            <MajorVersions>
              <MajorVersion id="0">
                <MinorVersions>
                  <MinorVersion id="1">
                    <Date>2021-06-08</Date>
                    <Provider>
                      <Author>FME</Author>
                      <Company>Skyline Communications</Company>
                    </Provider>
                    <Changes>
                      <NewFeature>Initial version</NewFeature>
                    </Changes>
                    <References>
                      <TaskId>149647</TaskId>
                    </References>
                  </MinorVersion>
                  <MinorVersion id="2" basedOn="1.0.0.1">
                    <Date>2021-10-05</Date>
                    <Provider>
                      <Author>JWA</Author>
                      <Company>Skyline Communications</Company>
                    </Provider>
                    <Changes>
                      <Change>Added Ethernet port status session</Change>
                    </Changes>
                    <References>
                      <TaskId>162199</TaskId>
                    </References>
                  </MinorVersion>
                </MinorVersions>
              </MajorVersion>
            </MajorVersions>
          </SystemVersion>
        </SystemVersions>
      </Branch>
    </Branches>
  </VersionHistory>
  <Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
    <SignedInfo>
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" />
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
      <Reference URI="">
        <Transforms>
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />
        </Transforms>
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />
        <DigestValue>Q92jxw1okP77UCOoKl2IQ7uiKVs=</DigestValue>
      </Reference>
    </SignedInfo>
    <SignatureValue>qY5qZx1apjICdb7D/pQ9Xh/aaN1BrIxlUJOOBtciVc03lHDhl4tf+hl4mt0XvZsEGne11iQOXvjqd7qrvKvDhVINFBvAzS7MpK+mduChOhUgfyl0EXlgjN4NFv9E1SwIlAk/MmWDUZ5K4D5BscU9cn6lyW0bxjUIw4vI2xIMecU=</SignatureValue>
  </Signature>
</Protocol>