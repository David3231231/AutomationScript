<?xml version="1.0" encoding="utf-8" ?>
<!--
****************************************************************************
* Copyright (c) 2021,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this driver, you expressly agree with the usage terms and
conditions set out below.
This driver and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this driver is strictly for personal use only.
This driver may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
driver is forbidden.

Any modifications to this driver by the user are only allowed for
personal use and within the intended purpose of the driver,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the driver resulting from a modification
or adaptation by the user.

The content of this driver is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe

****************************************************************************
 Revision History:

	DATE		VERSION		AUTHOR			COMMENTS

	05/02/2018	1.0.0.1		CBE, Skyline	Initial Version

	06/05/2019	1.0.1.1		TVO, Skyline	Handled QA remarks.

	25/06/2019	1.0.1.2		RBL, Skyline	Enabled Write to Active Input

****************************************************************************



Revision History (auto generated):

DATE          VERSION    AUTHOR                         COMMENTS

06/11/2019    1.0.1.3    MCO, Skyline Communications    NF: Allow to create flows on the device;
14/01/2020    1.0.1.4    JRI, Skyline Communications    Fix: Fix PTP Parameter types
12/02/2020    1.0.1.5    JRI, Skyline Communications    Change: Update Discreet Values on Param PTP Lock Status
15/09/2020    1.0.1.6    DSI, Skyline Communications    Fix: Fixed exceptions cases being logged in QA 2000 and QA 2300.
                                                        NF: Added two new parameters to 'PTP Information' page.
09/04/2021    1.0.1.7    PDO, Skyline Communications    NF: Added name and flows of the active input
                                                        NF: Added RTP stats in the flows condensed table
31/05/2021    1.0.2.1    PDO, Skyline Communications    Change: Changed column display order for tables ‘Audio Flow Configuration’ and ‘Video Flow Configuration’.
07/10/2021    1.0.2.2    TVO, Skyline Communications    Fix: Fix to allow first Input selection for Active Input.
08/03/2022    1.0.2.3    ADK, Skyline Communications    NF: Extend with MC Property
29/03/2022    1.0.2.4    ADK, Skyline Communications    NF: Presets implementation
-->
<Protocol xmlns="http://www.skyline.be/protocol">
	<Name>Tektronix Prism</Name>
	<Description>Tektronix Prism HTTP driver</Description>
	<Version>1.0.2.4</Version>
	<Provider>Skyline Communications</Provider>
	<Vendor>Tektronix</Vendor>
	<VendorOID>1.3.6.1.4.1.8813.2.88</VendorOID>
	<DeviceOID>17</DeviceOID>
	<IntegrationID>DMS-DRV-5753</IntegrationID>
	<ElementType>Audio Video Monitor</ElementType>
	<Type relativeTimers="true" options="">http</Type>
	<Display defaultPage="General" pageOrder="General;Inputs;Audio;PTP Information;Flows;Presets Overview;Network;Hardware Info;----------;Web Interface#http://[Polling Ip]:6080/" wideColumnPages="Presets;Network;General;Audio;Hardware Info;Inputs;PTP Information;Flows" />
	<SNMP includepages="true">auto</SNMP>
	<ParameterGroups>
		<Group id="1" type="in" name="inputs" dynamicId="8000" dynamicIndex="*" />
		<Group id="2" type="inout" name="Ethernet1" />
		<Group id="3" type="inout" name="Ethernet2" />
	</ParameterGroups>

	<Relations>
		<Relation path="8800;8850" />
	</Relations>

	<TreeControls>
		<TreeControl parameterId="50">
			<Hierarchy>
				<Table id="8800" />
				<Table id="8850" parent="8800" />
			</Hierarchy>
		</TreeControl>
	</TreeControls>

	<Params>
		<Param id="2">
			<Name>AfterStartup</Name>
			<Description>After Startup</Description>
			<Type>dummy</Type>
		</Param>
		<Param id="50" trending="false">
			<Name>TreeControlLayers</Name>
			<Description>Tree Control Layers</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Layers and nested scenes</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>false</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets Overview</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="51">
			<Name>pageButtonPresets</Name>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets Overview</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Presets...</Display>
						<Value>Presets</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="52" trending="false">
			<Name>DynamicDependencyValuesPresets</Name>
			<Description>Dynamic Dependency Values Presets</Description>
			<Information>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="53" save="true">
			<Name>variablePresets</Name>
			<Description>Choose Preset</Description>
			<Information>
				<Subtext>Save configuration to selected preset.</Subtext>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets dependencyId="52">
				</Discreets>
			</Measurement>
		</Param>
		<Param id="54">
			<Name>variablePresets</Name>
			<Description>Choose Preset</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets dependencyId="52">
				</Discreets>
			</Measurement>
		</Param>
		<Param id="55">
			<Name>savePreset</Name>
			<Type>write</Type>
			<Information>
				<Subtext>Store current state in preset specified by the parameters configured.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Save Preset</Display>
						<Value>Save Preset</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="56" trending="false">
			<Name>newPresetName</Name>
			<Description>New Preset Name (Optional)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Give an optional new name to the saved preset.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="57" setter="true">
			<Name>newPresetName</Name>
			<Description>New Preset Name (Optional)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="58">
			<Name>savePresetData</Name>
			<Description>Save Preset Data</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="59">
			<Name>savePresetResponse</Name>
			<Description>Save Preset Response</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="60" trending="false">
			<Name>savedPresetStatus</Name>
			<Description>Saved Preset Status</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Confirms if the preset is saved or failed to save.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>1</Normal>
				<CH>0</CH>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Failed</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>OK</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="61">
			<Name>factoryPreset</Name>
			<Type>write</Type>
			<Information>
				<Subtext>Do a factory preset.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>7</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Factory Preset</Display>
						<Value>Factory Preset</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="62" trending="false">
			<Name>loadedPresetsStatus</Name>
			<Description>Loaded Presets Status</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Confirms if the preset is loaded.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>2</Normal>
				<CH>0;1</CH>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>9</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Failed: No Data in Preset</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Failed: Preset Not Found.</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Success.</Display>
						<Value>2</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="63" trending="false">
			<Name>loadedPreset</Name>
			<Description>loaded Preset</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The loaded preset at the time displayed.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="80">
			<Name>Title_Begin_SavePreset</Name>
			<Description>Save Preset</Description>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="begin">title</Type>
			</Measurement>
		</Param>
		<Param id="81">
			<Name>Title_End_Generic</Name>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<!--Note that by adding multiple positions,
					the same title end can be re-used for closing different group boxes.
					Indeed, Cube only uses the positions in order to potentially group a title begin to a title end.-->
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>5</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="end">title</Type>
			</Measurement>
		</Param>
		<Param id="100" trending="true" save="true">
			<Name>DcfEthernetInterfaceseMulticastProperty</Name>
			<Description>DCF Ethernet Interfaces Multicast Property</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Allows the definition of a DCF Interface Property related to the network adapters.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<DefaultValue>0</DefaultValue>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Default thresholds need to be set by the customer -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Column>1</Column>
						<Row>10</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="200">
			<Name>DcfEthernetInterfaceseMulticastProperty</Name>
			<Description>DCF Ethernet Interfaces Multicast Property</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Column>1</Column>
						<Row>10</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="800">
			<Name>pbSettings</Name>
			<Description />
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Settings...</Display>
						<Value>Settings</Value>
					</Discreet>
					<Discreet>
						<Display>Session...</Display>
						<Value>Session</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!--URIs-->
		<Param id="1000" trending="false">
			<Name>audioMixerVolumeURI</Name>
			<Description>Audio Mixer Volume URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/audiomixer_volume</Value>
			</Interprete>
		</Param>
		<Param id="1005" trending="false">
			<Name>audioMixerLatencyURI</Name>
			<Description>Audio Mixer Latency URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/audiomixer_latency</Value>
			</Interprete>
		</Param>
		<Param id="1015" trending="false">
			<Name>audioMixerMuteURI</Name>
			<Description>Audio Mixer Mute URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>19</Length>
				<Value>api/audiomixer_mute</Value>
			</Interprete>
		</Param>
		<Param id="1020" trending="false">
			<Name>ipV4ConfigIP1URI</Name>
			<Description>IPv4 Config IP1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/ip_config_v4/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1025" trending="false">
			<Name>ipV4ConfigIP2URI</Name>
			<Description>IPv4 Config IP2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/ip_config_v4/IP2</Value>
			</Interprete>
		</Param>
		<!-- This one requires a scope, although the docs don't mention it-->
		<Param id="1030" trending="false">
			<Name>inputHardwareIdInfoURI</Name>
			<Description>Input HW ID Info URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>32</Length>
				<Value>api/input_hardware_id_info/slot0</Value>
			</Interprete>
		</Param>
		<Param id="1035" trending="false">
			<Name>diagnosticURLPresetURI</Name>
			<Description>Diagnostic URL Preset URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>25</Length>
				<Value>api/diagnostic_url_preset</Value>
			</Interprete>
		</Param>
		<Param id="1050" trending="false">
			<Name>mpiLedBrightnessURI</Name>
			<Description>MPI LED Brightness URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/mpi_led_brightness</Value>
			</Interprete>
		</Param>
		<Param id="1060" trending="false">
			<Name>inputHardwareVoltageURI</Name>
			<Description>Input Hardware Voltage URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/input_hardware_voltage</Value>
			</Interprete>
		</Param>
		<Param id="1065" trending="false">
			<Name>eyeHardwareVoltageURI</Name>
			<Description>Eye Hardware Voltage URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>24</Length>
				<Value>api/eye_hardware_voltage</Value>
			</Interprete>
		</Param>
		<Param id="1075" trending="false">
			<Name>eyeHardwareTemperatureURI</Name>
			<Description>Eye Hardware Temperature URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>28</Length>
				<Value>api/eye_hardware_temperature</Value>
			</Interprete>
		</Param>
		<Param id="1085" trending="false">
			<Name>fanSpeedURI</Name>
			<Description>Fan Speed URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>13</Length>
				<Value>api/fan_speed</Value>
			</Interprete>
		</Param>
		<Param id="1090" trending="false">
			<Name>inputHardwareFPGATemperatureURI</Name>
			<Description>Input Hardware FPGA Temperature URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>28</Length>
				<Value>api/input_hardware_fpga_temp</Value>
			</Interprete>
		</Param>
		<Param id="1095" trending="false">
			<Name>fanDiagnosticsURI</Name>
			<Description>Fan Diagnostics URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>12</Length>
				<Value>api/fan_diag</Value>
			</Interprete>
		</Param>
		<Param id="1100" trending="false">
			<Name>frontPanelTestModeURI</Name>
			<Description>Front Panel Test Mode URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/fp_test_mode</Value>
			</Interprete>
		</Param>
		<Param id="1130" trending="false">
			<Name>softwareVersionURI</Name>
			<Description>Software Version URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/software_version</Value>
			</Interprete>
		</Param>
		<Param id="1135" trending="false">
			<Name>softwareBuildIdURI</Name>
			<Description>Software Build ID URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/software_build_id</Value>
			</Interprete>
		</Param>
		<Param id="1140" trending="false">
			<Name>softwareBuildDateURI</Name>
			<Description>Software Build Date URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>23</Length>
				<Value>api/software_build_date</Value>
			</Interprete>
		</Param>
		<Param id="1155" trending="false">
			<Name>macAddressIp1URI</Name>
			<Description>MAC Address IP 1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/ip_mac_address/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1160" trending="false">
			<Name>macAddressIp2URI</Name>
			<Description>MAC Address IP 2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/ip_mac_address/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1165" trending="false">
			<Name>videoIpAddressIp1URI</Name>
			<Description>Video IP Address IP 1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/ip_address_v4/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1170" trending="false">
			<Name>videoIpAddressIp2URI</Name>
			<Description>Video IP Address IP 2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/ip_address_v4/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1175" trending="false">
			<Name>nomenclatureURI</Name>
			<Description>Nomenclature URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/nomenclature</Value>
			</Interprete>
		</Param>
		<Param id="1180" trending="false">
			<Name>serialNumberURI</Name>
			<Description>Serial Number URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>17</Length>
				<Value>api/serial_number</Value>
			</Interprete>
		</Param>
		<Param id="1190" trending="false">
			<Name>inputStatusURI</Name>
			<Description>Input Status URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/input_status</Value>
			</Interprete>
		</Param>
		<Param id="1200" trending="false">
			<Name>sessionControlURI</Name>
			<Description>Session Control URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>25</Length>
				<Value>api/video_session_control</Value>
			</Interprete>
		</Param>
		<Param id="1205" trending="false">
			<Name>colorimetrySettingsURI</Name>
			<Description>Colorimetry Settings URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>37</Length>
				<Value>api/ioslave_source_config_colorimetry</Value>
			</Interprete>
		</Param>
		<Param id="1210" trending="false">
			<Name>eotfSettingsURI</Name>
			<Description>EOTF Settings URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>30</Length>
				<Value>api/ioslave_source_config_eotf</Value>
			</Interprete>
		</Param>
		<Param id="1215" trending="false">
			<Name>currentBitrateIp1URI</Name>
			<Description>Current Bitrate IP1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>32</Length>
				<Value>api/ip_ethernet_curr_bitrate/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1220" trending="false">
			<Name>currentBitrateIp2URI</Name>
			<Description>Current Bitrate IP2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>32</Length>
				<Value>api/ip_ethernet_curr_bitrate/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1225" trending="false">
			<Name>currentEthernetStatsIp1URI</Name>
			<Description>Current Ethernet Stats IP1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>33</Length>
				<Value>api/ip_ethernet_current_stats/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1230" trending="false">
			<Name>currentEthernetStatsIp2URI</Name>
			<Description>Current Ethernet Stats IP2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>33</Length>
				<Value>api/ip_ethernet_current_stats/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1235" trending="false">
			<Name>ipPITSummaryIp1URI</Name>
			<Description>IP PIT Summary IP1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/ip_pit_summary/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1240" trending="false">
			<Name>ipPITSummaryIp2URI</Name>
			<Description>IP PIT Summary IP2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/ip_pit_summary/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1275" trending="false">
			<Name>hostIdURI</Name>
			<Description>Host ID URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>11</Length>
				<Value>api/host_id</Value>
			</Interprete>
		</Param>
		<Param id="1300" trending="false">
			<Name>cableCalibrationSaveURI</Name>
			<Description>Cable Calibration Save URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/cable_calibration_save</Value>
			</Interprete>
		</Param>
		<Param id="1305" trending="false">
			<Name>cableCalibrationResetURI</Name>
			<Description>Cable Calibration Reset URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>27</Length>
				<Value>api/cable_calibration_reset</Value>
			</Interprete>
		</Param>
		<Param id="1310" trending="false">
			<Name>eyeMeasurementsURI</Name>
			<Description>Eye Measurements URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/eye_measurements</Value>
			</Interprete>
		</Param>
		<Param id="1315" trending="false">
			<Name>cableTypeURI</Name>
			<Description>Cable Type URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/cable_type</Value>
			</Interprete>
		</Param>
		<Param id="1320" trending="false">
			<Name>knownCableTypesURI</Name>
			<Description>Known Cable Types URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/known_cable_types</Value>
			</Interprete>
		</Param>
		<Param id="1325" trending="false">
			<Name>cableMeasurementsURI</Name>
			<Description>Cable Measurements URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/cable_measurements</Value>
			</Interprete>
		</Param>
		<Param id="1330" trending="false">
			<Name>jitterHPFURI</Name>
			<Description>Jitter HPF URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/jitter_hpf</Value>
			</Interprete>
		</Param>
		<Param id="1335" trending="false">
			<Name>jitterMeasurementsURI</Name>
			<Description>Jitter Measurements URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>23</Length>
				<Value>api/jitter_measurements</Value>
			</Interprete>
		</Param>
		<Param id="1340" trending="false">
			<Name>eyeHardwareInfoURI</Name>
			<Description>Eye Hardware Info URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/eye_hardware_info</Value>
			</Interprete>
		</Param>
		<Param id="1345" trending="false">
			<Name>eyeHistogramDataURI</Name>
			<Description>Eye Histogram Data URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>22</Length>
				<Value>api/eye_histogram_data</Value>
			</Interprete>
		</Param>
		<Param id="1350" trending="false">
			<Name>pictureDisplayAverageLuminanceURI</Name>
			<Description>Picture Display Average Luminance URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>25</Length>
				<Value>api/picture_show_avg_luma</Value>
			</Interprete>
		</Param>
		<Param id="1355" trending="false">
			<Name>pictureLutControlURI</Name>
			<Description>Picture LUT Control URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>15</Length>
				<Value>api/picture_lut</Value>
			</Interprete>
		</Param>
		<Param id="1365" trending="false">
			<Name>loadPresetURI</Name>
			<Description>Load Preset URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/loadpreset</Value>
			</Interprete>
		</Param>
		<Param id="1370" trending="false">
			<Name>savePresetURI</Name>
			<Description>Save Preset URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/savepreset</Value>
			</Interprete>
		</Param>
		<Param id="1375" trending="false">
			<Name>getPresetGroupsURI</Name>
			<Description>Get Preset Groups URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>19</Length>
				<Value>api/getpresetgroups</Value>
			</Interprete>
		</Param>
		<Param id="1380" trending="false">
			<Name>namePresetGroupsURI</Name>
			<Description>Name Preset Groups URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/namepresetgroups</Value>
			</Interprete>
		</Param>
		<Param id="1385" trending="false">
			<Name>getPresetsURI</Name>
			<Description>Get Presets URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/getpresets</Value>
			</Interprete>
		</Param>
		<Param id="1390" trending="false">
			<Name>namePresetURI</Name>
			<Description>Name Preset URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/namepreset</Value>
			</Interprete>
		</Param>
		<Param id="1395" trending="false">
			<Name>currentTimezoneURI</Name>
			<Description>Current Timezone URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/current_timezone</Value>
			</Interprete>
		</Param>
		<Param id="1400" trending="false">
			<Name>currentTimeURI</Name>
			<Description>Current Time URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/current_time</Value>
			</Interprete>
		</Param>
		<Param id="1450" trending="false">
			<Name>systemUptimeURI</Name>
			<Description>System Uptime URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>17</Length>
				<Value>api/system_uptime</Value>
			</Interprete>
		</Param>
		<Param id="1455" trending="false">
			<Name>gpioReadURI</Name>
			<Description>GPIO Read URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>13</Length>
				<Value>api/gpio_read</Value>
			</Interprete>
		</Param>
		<Param id="1460" trending="false">
			<Name>gpioAssertURI</Name>
			<Description>GPIO Assert URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>15</Length>
				<Value>api/gpio_assert</Value>
			</Interprete>
		</Param>
		<Param id="1465" trending="false">
			<Name>externalReferenceURI</Name>
			<Description>External Reference URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>11</Length>
				<Value>api/ext_ref</Value>
			</Interprete>
		</Param>
		<Param id="1470" trending="false">
			<Name>audioTestPlayURI</Name>
			<Description>Audio Test Play URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/audiotest_play</Value>
			</Interprete>
		</Param>
		<Param id="1475" trending="false">
			<Name>audioTestFrequencyURI</Name>
			<Description>Audio Test Frequency URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/audiotest_freq</Value>
			</Interprete>
		</Param>
		<Param id="1480" trending="false">
			<Name>audioTestChanURI</Name>
			<Description>Audio Test Chan URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/audiotest_chan</Value>
			</Interprete>
		</Param>
		<Param id="1485" trending="false">
			<Name>audioTestVolumeURI</Name>
			<Description>Audio Test Volume URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>17</Length>
				<Value>api/audiotest_vol</Value>
			</Interprete>
		</Param>
		<Param id="1490" trending="false">
			<Name>usbTestURI</Name>
			<Description>USB Test URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>12</Length>
				<Value>api/usb_test</Value>
			</Interprete>
		</Param>
		<Param id="1495" trending="false">
			<Name>biosNomenclatureURI</Name>
			<Description>BIOS Nomenclature URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/bios_nomenclature</Value>
			</Interprete>
		</Param>
		<Param id="1500" trending="false">
			<Name>biosVersionURI</Name>
			<Description>BIOS Version URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/bios_version</Value>
			</Interprete>
		</Param>
		<Param id="1505" trending="false">
			<Name>biosTypeURI</Name>
			<Description>BIOS Type URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>13</Length>
				<Value>api/bios_type</Value>
			</Interprete>
		</Param>
		<Param id="1510" trending="false">
			<Name>sataModeURI</Name>
			<Description>SATA Mode URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>13</Length>
				<Value>api/sata_mode</Value>
			</Interprete>
		</Param>
		<Param id="1515" trending="false">
			<Name>bootDiskDriverURI</Name>
			<Description>Boot Disk Driver URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>20</Length>
				<Value>api/boot_disk_driver</Value>
			</Interprete>
		</Param>
		<Param id="1520" trending="false">
			<Name>hostNameURI</Name>
			<Description>Host Name URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>13</Length>
				<Value>api/host_name</Value>
			</Interprete>
		</Param>
		<Param id="1525" trending="false">
			<Name>riserVersionURI</Name>
			<Description>Riser Version URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>17</Length>
				<Value>api/riser_version</Value>
			</Interprete>
		</Param>
		<Param id="1530" trending="false">
			<Name>sdiYcrcErrorSecsURI</Name>
			<Description>SDI YCRC Error Secs URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/sdi_ycrc_err_secs</Value>
			</Interprete>
		</Param>
		<Param id="1535" trending="false">
			<Name>sdiCcrcErrorSecsURI</Name>
			<Description>SDI CCRC Error Secs URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/sdi_ccrc_err_secs</Value>
			</Interprete>
		</Param>
		<Param id="1540" trending="false">
			<Name>sfpModuleInfoIP1URI</Name>
			<Description>SFP Module Info IP1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>23</Length>
				<Value>api/sfp_module_info/IP1</Value>
			</Interprete>
		</Param>
		<Param id="1545" trending="false">
			<Name>sfpModuleInfoIP2URI</Name>
			<Description>SFP Module Info IP2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>23</Length>
				<Value>api/sfp_module_info/IP2</Value>
			</Interprete>
		</Param>
		<Param id="1550" trending="false">
			<Name>tileSelectURI</Name>
			<Description>Tile Select URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>15</Length>
				<Value>api/tile_select</Value>
			</Interprete>
		</Param>
		<Param id="1555" trending="false">
			<Name>vectorLutURI</Name>
			<Description>Vector Lut URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/vector_lut</Value>
			</Interprete>
		</Param>
		<Param id="1560" trending="false">
			<Name>vectorIQAxisURI</Name>
			<Description>Vector IQ Axis URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/vector_iq_axis</Value>
			</Interprete>
		</Param>
		<Param id="1565" trending="false">
			<Name>waveformModeURI</Name>
			<Description>Waveform Mode URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>17</Length>
				<Value>api/waveform_mode</Value>
			</Interprete>
		</Param>
		<Param id="1570" trending="false">
			<Name>waveformSweepURI</Name>
			<Description>Waveform Sweep URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/waveform_sweep</Value>
			</Interprete>
		</Param>
		<Param id="1575" trending="false">
			<Name>waveformGratSDIUnitsURI</Name>
			<Description>Waveform Graticule Units URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>27</Length>
				<Value>api/waveform_grat_sdi_units</Value>
			</Interprete>
		</Param>
		<Param id="1580" trending="false">
			<Name>waveformLutURI</Name>
			<Description>Waveform Lut URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>16</Length>
				<Value>api/waveform_lut</Value>
			</Interprete>
		</Param>
		<Param id="1585" trending="false">
			<Name>waveformAverageLuminanceIndicatorURI</Name>
			<Description>Waveform Average Luminance Indicator URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/waveform_show_avg_luma</Value>
			</Interprete>
		</Param>
		<Param id="1590" trending="false">
			<Name>waveformActiveAreaURI</Name>
			<Description>Waveform Active Area URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>24</Length>
				<Value>api/waveform_active_area</Value>
			</Interprete>
		</Param>
		<Param id="1595" trending="false">
			<Name>activeInputURI</Name>
			<Description>Active Input URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>15</Length>
				<Value>api/activeInput</Value>
			</Interprete>
		</Param>
		<Param id="1695" trending="false">
			<Name>rawWriteActiveInput</Name>
			<Description>Raw Write Active Input</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1600" trending="false">
			<Name>inputConfigureInput0URI</Name>
			<Description>Input Configure Input 0 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=0</Value>
			</Interprete>
		</Param>
		<Param id="1650" trending="false">
			<Name>rawWriteInputConfigureInput0</Name>
			<Description>Raw Write Input Configure Input 0</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1601" trending="false">
			<Name>inputConfigureInput1URI</Name>
			<Description>Input Configure Input 1 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=1</Value>
			</Interprete>
		</Param>
		<Param id="1651" trending="false">
			<Name>rawWriteInputConfigureInput1</Name>
			<Description>Raw Write Input Configure Input 1</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1602" trending="false">
			<Name>inputConfigureInput2URI</Name>
			<Description>Input Configure Input 2 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=2</Value>
			</Interprete>
		</Param>
		<Param id="1652" trending="false">
			<Name>rawWriteInputConfigureInput2</Name>
			<Description>Raw Write Input Configure Input 2</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1603" trending="false">
			<Name>inputConfigureInput3URI</Name>
			<Description>Input Configure Input 3 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=3</Value>
			</Interprete>
		</Param>
		<Param id="1653" trending="false">
			<Name>rawWriteInputConfigureInput3</Name>
			<Description>Raw Write Input Configure Input 3</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1604" trending="false">
			<Name>inputConfigureInput4URI</Name>
			<Description>Input Configure Input 4 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=4</Value>
			</Interprete>
		</Param>
		<Param id="1654" trending="false">
			<Name>rawWriteInputConfigureInput4</Name>
			<Description>Raw Write Input Configure Input 4</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1605" trending="false">
			<Name>inputConfigureInput5URI</Name>
			<Description>Input Configure Input 5 URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>26</Length>
				<Value>api/inputConfigure?input=5</Value>
			</Interprete>
		</Param>
		<Param id="1655" trending="false">
			<Name>rawWriteInputConfigureInput5</Name>
			<Description>Raw Write Input Configure Input 5</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="1606" trending="false">
			<Name>inputConfigureURI</Name>
			<Description>Input Configure URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>18</Length>
				<Value>api/inputConfigure</Value>
			</Interprete>
		</Param>
		<Param id="1610" trending="false">
			<Name>flowTableCondensedURI</Name>
			<Description>Flow Table Condensed URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>27</Length>
				<Value>api/ip_flow_table_condensed</Value>
			</Interprete>
		</Param>
		<Param id="1614" trending="false">
			<Name>ptpProfileURI</Name>
			<Description>PTP Profile URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>15</Length>
				<Value>api/ptp_profile</Value>
			</Interprete>
		</Param>
		<Param id="1615" trending="false">
			<Name>ptpStatusURI</Name>
			<Description>PTP Status URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>14</Length>
				<Value>api/ptp_status</Value>
			</Interprete>
		</Param>
		<Param id="1616" trending="false">
			<Name>ptpMessageRatesURI</Name>
			<Description>PTP Message Rates URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>fixed</LengthType>
				<Type>string</Type>
				<Length>21</Length>
				<Value>api/ptp_message_rates</Value>
			</Interprete>
		</Param>
		<Param id="1617" trending="false">
			<Name>ptpProfileDomainURI</Name>
			<Description>PTP Profile Domain URI</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<!-- Raw data. The following parameters are used to received the raw data from the HTTP responses-->
		<Param id="2000" trending="false">
			<Name>audioMixerVolumeRaw</Name>
			<Description>Audio Mixer Volume Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2015" trending="false">
			<Name>audioMixerMuteRaw</Name>
			<Description>Audio Mixer Mute Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2020" trending="false">
			<Name>ipV4ConfigIP1Raw</Name>
			<Description>IPv4 Config IP1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2025" trending="false">
			<Name>ipV4ConfigIP2Raw</Name>
			<Description>IPv4 Config IP2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2030" trending="false">
			<Name>inputHardwareIdInfoRaw</Name>
			<Description>Input HW ID Info Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2035" trending="false">
			<Name>diagnosticURLPresetRaw</Name>
			<Description>Diagnostic URL Preset Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2050" trending="false">
			<Name>mpiLedBrightnessRaw</Name>
			<Description>MPI LED Brightness Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2060" trending="false">
			<Name>inputHardwareVoltageRaw</Name>
			<Description>Input Hardware Voltage Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2065" trending="false">
			<Name>eyeHardwareVoltageRaw</Name>
			<Description>Eye Hardware Voltage Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2075" trending="false">
			<Name>eyeHardwareTemperatureRaw</Name>
			<Description>Eye Hardware Temperature Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2085" trending="false">
			<Name>fanSpeedRaw</Name>
			<Description>Fan Speed Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2090" trending="false">
			<Name>inputHardwareFPGATemperatureRaw</Name>
			<Description>Input Hardware FPGA Temperature Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2095" trending="false">
			<Name>fanDiagnosticsRaw</Name>
			<Description>Fan Diagnostics Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2100" trending="false">
			<Name>frontPanelTestModeRaw</Name>
			<Description>Front Panel Test Mode Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2130" trending="false">
			<Name>softwareVersionRaw</Name>
			<Description>Software Version Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2135" trending="false">
			<Name>softwareBuildIdRaw</Name>
			<Description>Software Build ID Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2140" trending="false">
			<Name>softwareBuildDateRaw</Name>
			<Description>Software Build Date Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2155" trending="false">
			<Name>macAddressIp1Raw</Name>
			<Description>MAC Address IP 1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2160" trending="false">
			<Name>macAddressIp2Raw</Name>
			<Description>MAC Address IP 2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2165" trending="false">
			<Name>videoIpAddressIp1Raw</Name>
			<Description>Video IP Address IP 1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2170" trending="false">
			<Name>videoIpAddressIp2Raw</Name>
			<Description>Video IP Address IP 2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2175" trending="false">
			<Name>nomenclatureRaw</Name>
			<Description>Nomenclature Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2180" trending="false">
			<Name>serialNumberRaw</Name>
			<Description>Serial Number Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2190" trending="false">
			<Name>inputStatusRaw</Name>
			<Description>Input Status Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2200" trending="false">
			<Name>sessionControlRaw</Name>
			<Description>Session Control Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2205" trending="false">
			<Name>colorimetrySettingsRaw</Name>
			<Description>Colorimetry Settings Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2210" trending="false">
			<Name>eotfSettingsRaw</Name>
			<Description>EOTF Settings Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2215" trending="false">
			<Name>currentBitrateIp1Raw</Name>
			<Description>Current Bitrate IP1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2220" trending="false">
			<Name>currentBitrateIp2Raw</Name>
			<Description>Current Bitrate IP2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2225" trending="false">
			<Name>currentEthernetStatsIp1Raw</Name>
			<Description>Current Ethernet Stats IP1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2230" trending="false">
			<Name>currentEthernetStatsIp2Raw</Name>
			<Description>Current Ethernet Stats IP2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2235" trending="false">
			<Name>ipPITSummaryIp1Raw</Name>
			<Description>IP PIT Summary IP1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2240" trending="false">
			<Name>ipPITSummaryIp2Raw</Name>
			<Description>IP PIT Summary IP2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2275" trending="false">
			<Name>hostIdRaw</Name>
			<Description>Host ID Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2315" trending="false">
			<Name>cableTypeRaw</Name>
			<Description>Cable Type Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2330" trending="false">
			<Name>jitterHPFRaw</Name>
			<Description>Jitter HPF Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2395" trending="false">
			<Name>currentTimezoneRaw</Name>
			<Description>Current Timezone Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2400" trending="false">
			<Name>currentTimeRaw</Name>
			<Description>Current Time Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2450" trending="false">
			<Name>systemUptimeRaw</Name>
			<Description>System Uptime Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2455" trending="false">
			<Name>gpioReadRaw</Name>
			<Description>GPIO Read Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2460" trending="false">
			<Name>gpioAssertRaw</Name>
			<Description>GPIO Assert Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2470" trending="false">
			<Name>audioTestPlayRaw</Name>
			<Description>Audio Test Play Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2475" trending="false">
			<Name>audioTestFrequencyRaw</Name>
			<Description>Audio Test Frequency Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2480" trending="false">
			<Name>audioTestChanRaw</Name>
			<Description>Audio Test Chan Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2485" trending="false">
			<Name>audioTestVolumeRaw</Name>
			<Description>Audio Test Volume Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2495" trending="false">
			<Name>biosNomenclatureRaw</Name>
			<Description>BIOS Nomenclature Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2500" trending="false">
			<Name>biosVersionRaw</Name>
			<Description>BIOS Version Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2505" trending="false">
			<Name>biosTypeRaw</Name>
			<Description>BIOS Type Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2510" trending="false">
			<Name>sataModeRaw</Name>
			<Description>SATA Mode Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2515" trending="false">
			<Name>bootDiskDriverRaw</Name>
			<Description>Boot Disk Driver Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2520" trending="false">
			<Name>hostNameRaw</Name>
			<Description>Host Name Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2525" trending="false">
			<Name>riserVersionRaw</Name>
			<Description>Riser Version Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2595" trending="false">
			<Name>activeInputRaw</Name>
			<Description>Active Input Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2600" trending="false">
			<Name>inputConfigure0Raw</Name>
			<Description>Input Configure 0 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2650" trending="false">
			<Name>writeInputConfigure0Raw</Name>
			<Description>Write Input Configure 0 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2601" trending="false">
			<Name>inputConfigure1Raw</Name>
			<Description>Input Configure 1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2651" trending="false">
			<Name>writeInputConfigure1Raw</Name>
			<Description>Write Input Configure 1 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2602" trending="false">
			<Name>inputConfigure2Raw</Name>
			<Description>Input Configure 2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2652" trending="false">
			<Name>writeInputConfigure2Raw</Name>
			<Description>Write Input Configure 2 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2603" trending="false">
			<Name>inputConfigure3Raw</Name>
			<Description>Input Configure 3 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2610" trending="false">
			<Name>flowTableCondensedRaw</Name>
			<Description>Flow Table Condensed Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2614" trending="false">
			<Name>ptpProfileRaw</Name>
			<Description>PTP Profile Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2615" trending="false">
			<Name>ptpStatusRaw</Name>
			<Description>PTP Status Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2616" trending="false">
			<Name>ptpMessageRatesRaw</Name>
			<Description>PTP Message Rates Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2617" trending="false">
			<Name>ptpProfileDomainRaw</Name>
			<Description>PTP Profile Domain Raw</Description>
			<Type>read</Type>
			<Information>
				<Subtext>PTP profile domain raw message.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="2653" trending="false">
			<Name>writeInputConfigure3Raw</Name>
			<Description>Write Input Configure 3 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2604" trending="false">
			<Name>inputConfigure4Raw</Name>
			<Description>Input Configure 4 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2654" trending="false">
			<Name>writeInputConfigure4Raw</Name>
			<Description>Write Input Configure 4 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2605" trending="false">
			<Name>inputConfigure5Raw</Name>
			<Description>Input Configure 5 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2606">
			<Name>getPresetGroupsResponse</Name>
			<Description>Get Preset Groups Response</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2607">
			<Name>getPresetsResponse</Name>
			<Description>Get Presets Response</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2608">
			<Name>loadPresetResponse</Name>
			<Description>Load Preset Response</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2609">
			<Name>loadPresetData</Name>
			<Description>Load Preset Data</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2655" trending="false">
			<Name>writeInputConfigure5Raw</Name>
			<Description>Write Input Configure 5 Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2695" trending="false">
			<Name>writeActiveInputRaw</Name>
			<Description>Write Active Input Raw</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="2696">
			<Name>CreateFlowHttpRequest</Name>
			<Description>Create Flow HTTP Request</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2697">
			<Name>CreateFlowHttpCode</Name>
			<Description>Create Flow HTTP Code</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<Param id="2698">
			<Name>CreateFlowHttpResponse</Name>
			<Description>Create Flow HTTP Response</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
		</Param>
		<!-- Actual parameters -->
		<Param id="5000" trending="true">
			<Name>audioMixerVolume</Name>
			<Description>Audio Mixer Volume</Description>
			<Information>
				<Text>Audio Mixer Volume</Text>
				<Subtext>Audio Mixer Volume</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>100</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5015" trending="true">
			<Name>audioMixerMute</Name>
			<Description>Audio Mixer Mute</Description>
			<Information>
				<Text>Audio Mixer Mute</Text>
				<Subtext>Audio Mixer Mute</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5020" trending="false">
			<Name>ipV4AddressIP1</Name>
			<Description>IPv4 Address IP1</Description>
			<Information>
				<Text>IPv4 Address IP1</Text>
				<Subtext>IPv4 Address IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>false</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5021" trending="true">
			<Name>ipV4DHCPEnabledIP1</Name>
			<Description>IPv4 DHCP IP1</Description>
			<Information>
				<Text>IPv4 DHCP IP1</Text>
				<Subtext>IPv4 DHCP IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5022" trending="false">
			<Name>ipV4GatewayIP1</Name>
			<Description>IPv4 Gateway IP1</Description>
			<Information>
				<Text>IPv4 Gateway IP1</Text>
				<Subtext>IPv4 Gateway IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5023" trending="false">
			<Name>ipV4NetmaskIP1</Name>
			<Description>IPv4 Netmask IP1</Description>
			<Information>
				<Text>IPv4 Netmask IP1</Text>
				<Subtext>IPv4 Netmask IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5024" trending="true">
			<Name>ipV4PortIP1</Name>
			<Description>IPv4 Port IP1</Description>
			<Information>
				<Text>IPv4 Port IP1</Text>
				<Subtext>IPv4 Port IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5025" trending="false">
			<Name>ipV4AddressIP2</Name>
			<Description>IPv4 Address IP2</Description>
			<Information>
				<Text>IPv4 Address IP2</Text>
				<Subtext>IPv4 Address IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5026" trending="true">
			<Name>ipV4DHCPEnabledIP2</Name>
			<Description>IPv4 DHCP IP2</Description>
			<Information>
				<Text>IPv4 DHCP IP2</Text>
				<Subtext>IPv4 DHCP IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5027" trending="false">
			<Name>ipV4GatewayIP2</Name>
			<Description>IPv4 Gateway IP2</Description>
			<Information>
				<Text>IPv4 Gateway IP2</Text>
				<Subtext>IPv4 Gateway IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5028" trending="false">
			<Name>ipV4NetmaskIP2</Name>
			<Description>IPv4 Netmask IP2</Description>
			<Information>
				<Text>IPv4 Netmask IP2</Text>
				<Subtext>IPv4 Netmask IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5029" trending="true">
			<Name>ipV4PortIP2</Name>
			<Description>IPv4 Port IP2</Description>
			<Information>
				<Text>IPv4 Port IP2</Text>
				<Subtext>IPv4 Port IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5030" trending="false">
			<Name>inputHardwareBuildDate</Name>
			<Description>Input Hardware Build Date</Description>
			<Information>
				<Text>Input Hardware Build Date</Text>
				<Subtext>Input Hardware Build Date</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5031" trending="false">
			<Name>inputHardwarePartNumber</Name>
			<Description>Input Hardware Part Number</Description>
			<Information>
				<Text>Input Hardware Part Number</Text>
				<Subtext>Input Hardware Part Number</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5032" trending="true">
			<Name>inputHardwareSerialNumber</Name>
			<Description>Input Hardware Serial Number</Description>
			<Information>
				<Text>Input Hardware Serial Number</Text>
				<Subtext>Input Hardware Serial Number</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5035" trending="true">
			<Name>diagnosticURLPreset</Name>
			<Description>Diagnostic URL Preset</Description>
			<Information>
				<Text>Diagnostic URL Preset</Text>
				<Subtext>Diagnostic URL Preset</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Home</Display>
						<Value>COMPOSITOR_URL_HOME</Value>
					</Discreet>
					<Discreet>
						<Display>Touch Test</Display>
						<Value>COMPOSITOR_URL_TOUCH_TEST</Value>
					</Discreet>
					<Discreet>
						<Display>Red</Display>
						<Value>COMPOSITOR_URL_RED</Value>
					</Discreet>
					<Discreet>
						<Display>Green</Display>
						<Value>COMPOSITOR_URL_GREEN</Value>
					</Discreet>
					<Discreet>
						<Display>Blue</Display>
						<Value>COMPOSITOR_URL_BLUE</Value>
					</Discreet>
					<Discreet>
						<Display>Gray 20</Display>
						<Value>COMPOSITOR_URL_GRAY20</Value>
					</Discreet>
					<Discreet>
						<Display>Gray 45</Display>
						<Value>COMPOSITOR_URL_GRAY45</Value>
					</Discreet>
					<Discreet>
						<Display>Black</Display>
						<Value>COMPOSITOR_URL_BLACK</Value>
					</Discreet>
					<Discreet>
						<Display>White</Display>
						<Value>COMPOSITOR_URL_WHITE</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5050" trending="true">
			<Name>mpiLedBrightness</Name>
			<Description>MPI LED Brightness</Description>
			<Information>
				<Text>MPI LED Brightness</Text>
				<Subtext>MPI LED Brightness</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="0">
						<Display state="disabled">Default</Display>
						<Value>0</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>4</Low>
					<High>31</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5060" trending="true">
			<Name>inputHardware1VVoltage</Name>
			<Description>Input Voltage 1v Core</Description>
			<Information>
				<Text>Input Voltage 1v Core</Text>
				<Subtext>Input Voltage 1v Core</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>1</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Decimals>4</Decimals>
				<Units>V</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5061" trending="true">
			<Name>inputHardware25PEHAVoltage</Name>
			<Description>Input Voltage 2.5v PEHA</Description>
			<Information>
				<Text>Input Voltage 2.5v PEHA</Text>
				<Subtext>Input Voltage 2.5v PEHA</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>2.5</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Decimals>4</Decimals>
				<Units>V</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5062" trending="true">
			<Name>inputHardware33HostVoltage</Name>
			<Description>Input Voltage 3.3v Host</Description>
			<Information>
				<Text>Input Voltage 3.3v Host</Text>
				<Subtext>Input Voltage 3.3v Host</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>3.3</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Decimals>4</Decimals>
				<Units>V</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5063" trending="true">
			<Name>inputHardware33IOVoltage</Name>
			<Description>Input Voltage 3.3v IO</Description>
			<Information>
				<Text>Input Voltage 3.3v IO</Text>
				<Subtext>Input Voltage 3.3v IO</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>3.3</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Decimals>4</Decimals>
				<Units>V</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5064" trending="true">
			<Name>inputHardware48VINDCVoltage</Name>
			<Description>Input Voltage 48v VIN DC</Description>
			<Information>
				<Text>Input Voltage 48v VIN DC</Text>
				<Subtext>Input Voltage 48v VIN DC</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>48</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Decimals>4</Decimals>
				<Units>V</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5065" trending="true">
			<Name>eyeHardwareVoltagePlus18</Name>
			<Description>Eye Hardware Voltage +1.8v</Description>
			<Information>
				<Text>Eye Hardware Voltage +1.8v</Text>
				<Subtext>Eye Hardware Voltage +1.8v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>1.8</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5066" trending="true">
			<Name>eyeHardwareVoltagePlus20</Name>
			<Description>Eye Hardware Voltage +2.0v</Description>
			<Information>
				<Text>Eye Hardware Voltage +2.0v</Text>
				<Subtext>Eye Hardware Voltage +2.0v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>2</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5067" trending="true">
			<Name>eyeHardwareVoltagePlus25</Name>
			<Description>Eye Hardware Voltage +2.5v</Description>
			<Information>
				<Text>Eye Hardware Voltage +2.5v</Text>
				<Subtext>Eye Hardware Voltage +2.5v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>2.5</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5068" trending="true">
			<Name>eyeHardwareVoltagePlus33</Name>
			<Description>Eye Hardware Voltage +3.3v</Description>
			<Information>
				<Text>Eye Hardware Voltage +3.3v</Text>
				<Subtext>Eye Hardware Voltage +3.3v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>3.3</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5069" trending="true">
			<Name>eyeHardwareVoltagePlus50</Name>
			<Description>Eye Hardware Voltage +5.0v</Description>
			<Information>
				<Text>Eye Hardware Voltage +5.0v</Text>
				<Subtext>Eye Hardware Voltage +5.0v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>5</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5070" trending="true">
			<Name>eyeHardwareVoltagePlus60</Name>
			<Description>Eye Hardware Voltage +6.0v</Description>
			<Information>
				<Text>Eye Hardware Voltage +6.0v</Text>
				<Subtext>Eye Hardware Voltage +6.0v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>6</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5071" trending="true">
			<Name>eyeHardwareVoltageMinus50</Name>
			<Description>Eye Hardware Voltage -5.0v</Description>
			<Information>
				<Text>Eye Hardware Voltage -5.0v</Text>
				<Subtext>Eye Hardware Voltage -5.0v</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-999">
						<Display state="disabled">N/A</Display>
						<Value>-999</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>-5</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>4</Decimals>
				<Positions>
					<Position>
						<Page>Voltages</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5073">
			<Name>btnVoltages</Name>
			<Description />
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>7</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Voltages...</Display>
						<Value>Voltages</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5075" trending="true">
			<Name>eyeHardwareTemperature</Name>
			<Description>Eye Hardware Temperature</Description>
			<Information>
				<Text>Power supply voltages for the eye input board</Text>
				<Subtext>Power supply voltages for the eye input board</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>6</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5085">
			<Name>fanSpeedF1</Name>
			<Description>Fan Speed Fan 1</Description>
			<Information>
				<Text>Fan Speed Fan 1</Text>
				<Subtext>Fan Speed Fan 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>rpm</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5086">
			<Name>fanSpeedF2</Name>
			<Description>Fan Speed Fan 2</Description>
			<Information>
				<Text>Fan Speed Fan 2</Text>
				<Subtext>Fan Speed Fan 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>rpm</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5087">
			<Name>fanSpeedF3</Name>
			<Description>Fan Speed Fan 3</Description>
			<Information>
				<Text>Fan Speed Fan 3</Text>
				<Subtext>Fan Speed Fan 3</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">None</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>rpm</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5090" trending="true">
			<Name>inputHardwareFPGATemperatureDec</Name>
			<Description>Input Hardware DEC FPGA Temperature</Description>
			<Information>
				<Text>Input Hardware DEC FPGA Temperature</Text>
				<Subtext>Input Hardware DEC FPGA Temperature</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>60</Normal>
				<WaH>75</WaH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5091" trending="true">
			<Name>inputHardwareFPGATemperatureDin</Name>
			<Description>Input Hardware DIN FPGA Temperature</Description>
			<Information>
				<Text>Input Hardware DIN FPGA Temperature</Text>
				<Subtext>Input Hardware DIN FPGA Temperature</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>60</Normal>
				<WaH>75</WaH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5092" trending="true">
			<Name>inputHardwareFPGATemperatureSDI</Name>
			<Description>Input Hardware SDI FPGA Temperature</Description>
			<Information>
				<Text>Input Hardware SDI FPGA Temperature</Text>
				<Subtext>Input Hardware SDI FPGA Temperature</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>8</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>60</Normal>
				<WaH>75</WaH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5095" trending="true">
			<Name>fanDiagnostics</Name>
			<Description>Fan Diagnostics</Description>
			<Information>
				<Text>Fan Diagnostics</Text>
				<Subtext>Fan Diagnostics</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Never Executed</Display>
						<Value>diagNeverExecuted</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5100" trending="false">
			<Name>frontPanelTestMode</Name>
			<Description>Front Panel Test Mode</Description>
			<Information>
				<Text>Front Panel Test Mode</Text>
				<Subtext>Front Panel Test Mode</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>None</Display>
						<Value>FP_TEST_MODE_NONE</Value>
					</Discreet>
					<Discreet>
						<Display>Button</Display>
						<Value>FP_TEST_MODE_BUTTON</Value>
					</Discreet>
					<Discreet>
						<Display>LED</Display>
						<Value>FP_TEST_MODE_LED</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- The documentation doesn't say much about the expected response. When the test mode is none, the result says null -->
		<Param id="5105" trending="false">
			<Name>frontPanelTestData</Name>
			<Description>Front Panel Test Data</Description>
			<Information>
				<Text>Front Panel Test Data</Text>
				<Subtext>Front Panel Test Data</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5115" trending="false">
			<Name>averageLuminanceIndicator</Name>
			<Description>Average Luminance Indicator</Description>
			<Information>
				<Text>Average Luminance Indicator</Text>
				<Subtext>Average Luminance Indicator</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NOT_IMPLEMENTED">
						<Display state="disabled">Not Implemented</Display>
						<Value>NOT_IMPLEMENTED</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5120" trending="false">
			<Name>stopActiveArea</Name>
			<Description>Stop Active Area</Description>
			<Information>
				<Text>Stop Active Area</Text>
				<Subtext>Stop Active Area</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NOT_IMPLEMENTED">
						<Display state="disabled">Not Implemented</Display>
						<Value>NOT_IMPLEMENTED</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5125" trending="false">
			<Name>stopGammaReference</Name>
			<Description>Stop Gamma Reference</Description>
			<Information>
				<Text>Stop Gamma Reference</Text>
				<Subtext>Stop Gamma Reference</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NOT_IMPLEMENTED">
						<Display state="disabled">Not Implemented</Display>
						<Value>NOT_IMPLEMENTED</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5130" trending="false">
			<Name>softwareVersion</Name>
			<Description>Software Version</Description>
			<Information>
				<Text>Software Version</Text>
				<Subtext>Software Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5135" trending="false">
			<Name>softwareBuildId</Name>
			<Description>Software Build ID</Description>
			<Information>
				<Text>Software Build ID</Text>
				<Subtext>Software Build ID</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5140" trending="false">
			<Name>softwareBuildDate</Name>
			<Description>Software Build Date</Description>
			<Information>
				<Text>Software Build Date</Text>
				<Subtext>Software Build Date</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Decimals>8</Decimals>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="datetime">number</Type>
			</Measurement>
		</Param>
		<Param id="5155" trending="false">
			<Name>macAddressIp1</Name>
			<Description>MAC Address IP 1</Description>
			<Information>
				<Text>MAC Address IP 1</Text>
				<Subtext>MAC Address IP 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5160" trending="false">
			<Name>macAddressIp2</Name>
			<Description>MAC Address IP 2</Description>
			<Information>
				<Text>MAC Address IP 2</Text>
				<Subtext>MAC Address IP 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5165" trending="false">
			<Name>videoIpAddressIp1</Name>
			<Description>Video IP Address IP 1</Description>
			<Information>
				<Text>Video IP Address IP 1</Text>
				<Subtext>Video IP Address IP 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5170" trending="false">
			<Name>videoIpAddressIp2</Name>
			<Description>Video IP Address IP 2</Description>
			<Information>
				<Text>Video IP Address IP 2</Text>
				<Subtext>Video IP Address IP 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5175" trending="false">
			<Name>nomenclature</Name>
			<Description>Nomenclature</Description>
			<Information>
				<Text>Nomenclature</Text>
				<Subtext>Nomenclature</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>7</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5180" trending="false">
			<Name>serialNumber</Name>
			<Description>Serial Number</Description>
			<Information>
				<Text>Serial Number</Text>
				<Subtext>Serial Number</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5190" trending="false">
			<Name>inputStatus</Name>
			<Description>Input Status</Description>
			<Information>
				<Text>Input Status</Text>
				<Subtext>Input Status</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5200" trending="true">
			<Name>sessionControl</Name>
			<Description>Session Control</Description>
			<Information>
				<Text>Session Control</Text>
				<Subtext>Session Control</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Session</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>I/O Slave Run</Display>
						<Value>IOSLAVE_SESSION_CONTROL_RUN</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5205" trending="true">
			<Name>colorimetrySettings</Name>
			<Description>Colorimetry Settings</Description>
			<Information>
				<Text>Colorimetry Settings</Text>
				<Subtext>Colorimetry Settings</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="-2">
						<Display state="disabled">IO Slave mode</Display>
						<Value>-2</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Settings</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>I/O Slave Colorimetry 709</Display>
						<Value>IOSLAVE_SOURCE_CONFIG_COLORIMETRY_709</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5210" trending="true">
			<Name>eotfSettings</Name>
			<Description>EOTF Settings</Description>
			<Information>
				<Text>EOTF Settings</Text>
				<Subtext>EOTF Settings</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="-2">
						<Display state="disabled">IO Slave mode</Display>
						<Value>-2</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Settings</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>SDR Narrow</Display>
						<Value>IOSLAVE_SOURCE_CONFIG_EOTF_SDR_NARROW</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5215" trending="true">
			<Name>currentBitrateIp1</Name>
			<Description>Current Bitrate IP1</Description>
			<Information>
				<Text>Current Bitrate IP1</Text>
				<Subtext>Current Bitrate IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Sequence noset="true">div:1000000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Mbps</Units>
				<Decimals>6</Decimals>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5220" trending="true">
			<Name>currentBitrateIp2</Name>
			<Description>Current Bitrate IP2</Description>
			<Information>
				<Text>Current Bitrate IP2</Text>
				<Subtext>Current Bitrate IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Sequence noset="true">div:1000000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Mbps</Units>
				<Decimals>6</Decimals>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>7</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5235" trending="false">
			<Name>ipPITSummaryIp1Key</Name>
			<Description>IP PIT Summary IP1 Key</Description>
			<Information>
				<Text>IP PIT Summary IP1 Key</Text>
				<Subtext>IP PIT Summary IP1 Key</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>8</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5236" trending="true">
			<Name>ipPITSummaryIp1Ready</Name>
			<Description>IP PIT Summary IP1 State</Description>
			<Information>
				<Text>IP PIT Summary IP1 State</Text>
				<Subtext>IP PIT Summary IP1 State</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>9</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Ready</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Not Ready</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5240" trending="false">
			<Name>ipPITSummaryIp2Key</Name>
			<Description>IP PIT Summary IP2 Key</Description>
			<Information>
				<Text>IP PIT Summary IP2 Key</Text>
				<Subtext>IP PIT Summary IP2 Key</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>10</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5241" trending="true">
			<Name>ipPITSummaryIp2Ready</Name>
			<Description>IP PIT Summary IP2 State</Description>
			<Information>
				<Text>IP PIT Summary IP2 State</Text>
				<Subtext>IP PIT Summary IP2 State</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>11</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Ready</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Not Ready</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5245" trending="false">
			<Name>s20227Stats</Name>
			<Description>ST 2022-7 Stats</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5250" trending="false">
			<Name>jitterSweep</Name>
			<Description>Jitter Sweep</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5255" trending="false">
			<Name>jitterGain</Name>
			<Description>Jitter Gain</Description>
			<Information>
				<Text>Jitter Gain</Text>
				<Subtext>Jitter Gain</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5260" trending="false">
			<Name>measureAssignTile1</Name>
			<Description>Measure Assign Tile 1</Description>
			<Information>
				<Text>Measure Assign Tile 1</Text>
				<Subtext>Measure Assign Tile 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_ASSIGN_AUDIO</Value>
						<Display>Audio</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_PICTURE</Value>
						<Display>Picture</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_VIDEO_SESSION</Value>
						<Display>Video Session</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_WAVEFORM</Value>
						<Display>Waveform</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5261" trending="false">
			<Name>measureAssignTile2</Name>
			<Description>Measure Assign Tile 2</Description>
			<Information>
				<Text>Measure Assign Tile 2</Text>
				<Subtext>Measure Assign Tile 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_ASSIGN_AUDIO</Value>
						<Display>Audio</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_PICTURE</Value>
						<Display>Picture</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_VIDEO_SESSION</Value>
						<Display>Video Session</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_WAVEFORM</Value>
						<Display>Waveform</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5262" trending="false">
			<Name>measureAssignTile3</Name>
			<Description>Measure Assign Tile 3</Description>
			<Information>
				<Text>Measure Assign Tile 3</Text>
				<Subtext>Measure Assign Tile 3</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_ASSIGN_AUDIO</Value>
						<Display>Audio</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_PICTURE</Value>
						<Display>Picture</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_VIDEO_SESSION</Value>
						<Display>Video Session</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_WAVEFORM</Value>
						<Display>Waveform</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5263" trending="false">
			<Name>measureAssignTile4</Name>
			<Description>Measure Assign Tile 4</Description>
			<Information>
				<Text>Measure Assign Tile 4</Text>
				<Subtext>Measure Assign Tile 4</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_ASSIGN_AUDIO</Value>
						<Display>Audio</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_PICTURE</Value>
						<Display>Picture</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_VIDEO_SESSION</Value>
						<Display>Video Session</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_ASSIGN_WAVEFORM</Value>
						<Display>Waveform</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5265" trending="false">
			<Name>measureBarTargetTile1</Name>
			<Description>Measure Bar Target Tile 1</Description>
			<Information>
				<Text>Measure Bar Target Tile 1</Text>
				<Subtext>Measure Bar Target Tile 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_BAR_TARGET_100</Value>
						<Display>100</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5266" trending="false">
			<Name>measureBarTargetTile2</Name>
			<Description>Measure Bar Target Tile 2</Description>
			<Information>
				<Text>Measure Bar Target Tile 2</Text>
				<Subtext>Measure Bar Target Tile 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_BAR_TARGET_100</Value>
						<Display>100</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5267" trending="false">
			<Name>measureBarTargetTile3</Name>
			<Description>Measure Bar Target Tile 3</Description>
			<Information>
				<Text>Measure Bar Target Tile 3</Text>
				<Subtext>Measure Bar Target Tile 3</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_BAR_TARGET_100</Value>
						<Display>100</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5268" trending="false">
			<Name>measureBarTargetTile4</Name>
			<Description>Measure Bar Target Tile 4</Description>
			<Information>
				<Text>Measure Bar Target Tile 4</Text>
				<Subtext>Measure Bar Target Tile 4</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_BAR_TARGET_100</Value>
						<Display>100</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5270" trending="false">
			<Name>measureTalModeTile1</Name>
			<Description>Measure Tile Mode Tile 1</Description>
			<Information>
				<Text>Measure Tile Mode Tile 1</Text>
				<Subtext>Measure Tile Mode Tile 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Value>MEASURE_TILE_MODE_TWO_TILE_VERTICAL</Value>
						<Display>Two Tile Vertical</Display>
					</Discreet>
					<Discreet>
						<Value>MEASURE_TILE_MODE_QUARTER_TILE</Value>
						<Display>Quarter Tile</Display>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5275" trending="false">
			<Name>hostId</Name>
			<Description>Host ID</Description>
			<Information>
				<Text>Host ID</Text>
				<Subtext>Host ID</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5280" trending="false">
			<Name>eyeCalibration</Name>
			<Description>Eye Calibration</Description>
			<Information>
				<Text>Eye Calibration</Text>
				<Subtext>Eye Calibration</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Never Calibrated</Display>
						<Value>never</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5285" trending="false">
			<Name>eyeCalibrationSave</Name>
			<Description>Eye Calibration Save</Description>
			<Information>
				<Text>Eye Calibration Save</Text>
				<Subtext>Eye Calibration Save</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5295" trending="false">
			<Name>cableCalibration</Name>
			<Description>Cable Calibration</Description>
			<Information>
				<Text>Cable Calibration</Text>
				<Subtext>Cable Calibration</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Never Calibrated</Display>
						<Value>never</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5300" trending="false">
			<Name>cableCalibrationSave</Name>
			<Description>Cable Calibration Save</Description>
			<Information>
				<Text>Cable Calibration Save</Text>
				<Subtext>Cable Calibration Save</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5315" trending="true">
			<Name>cableType</Name>
			<Description>Cable Type</Description>
			<Information>
				<Text>Cable Type</Text>
				<Subtext>Cable Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Column>1</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Belden 1694</Display>
						<Value>Belden 1694</Value>
					</Discreet>
					<Discreet>
						<Display>Belden 1505</Display>
						<Value>Belden 1505</Value>
					</Discreet>
					<Discreet>
						<Display>Belden 1695A</Display>
						<Value>Belden 1695A</Value>
					</Discreet>
					<Discreet>
						<Display>Belden 1855A</Display>
						<Value>Belden 1855A</Value>
					</Discreet>
					<Discreet>
						<Display>Belden 8281</Display>
						<Value>Belden 8281</Value>
					</Discreet>
					<Discreet>
						<Display>Canare L-5CFB</Display>
						<Value>Canare L-5CFB</Value>
					</Discreet>
					<Discreet>
						<Display>Image 1000</Display>
						<Value>Image 1000</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5320" trending="false">
			<Name>knownCableTypes</Name>
			<Description>Known Cable Types</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5325" trending="false">
			<Name>cableMeasurementsCableLength</Name>
			<Description>Cable Length</Description>
			<Information>
				<Text>Cable Length</Text>
				<Subtext>Cable Length</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>m</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5326" trending="false">
			<Name>cableMeasurementsCableLoss</Name>
			<Description>Cable Loss</Description>
			<Information>
				<Text>Cable Loss</Text>
				<Subtext>Cable Loss</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>dB</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5330" trending="true">
			<Name>jitterHPF</Name>
			<Description>Jitter HPF</Description>
			<Information>
				<Text>Jitter HPF</Text>
				<Subtext>Jitter HPF</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5395" trending="false">
			<Name>currentTimezone</Name>
			<Description>Current Timezone</Description>
			<Information>
				<Text>Current Timezone</Text>
				<Subtext>Current Timezone</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5400" trending="false">
			<Name>currentTime</Name>
			<Description>Current Time</Description>
			<Information>
				<Text>Current Time</Text>
				<Subtext>Current Time</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Decimals>8</Decimals>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="datetime">number</Type>
			</Measurement>
		</Param>
		<Param id="5450" trending="false">
			<Name>systemUptime</Name>
			<Description>System Uptime</Description>
			<Information>
				<Text>System Uptime</Text>
				<Subtext>System Uptime</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-9999999999999</Low>
					<High>9999999999999</High>
				</Range>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="time">number</Type>
			</Measurement>
		</Param>
		<Param id="5455" trending="false">
			<Name>gpioRead</Name>
			<Description>GPIO Read</Description>
			<Information>
				<Text>GPIO Read</Text>
				<Subtext>GPIO Read</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Hardware Info</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5470" trending="true">
			<Name>audioTestPlay</Name>
			<Description>Audio Test Play</Description>
			<Information>
				<Text>Audio Test Play</Text>
				<Subtext>Audio Test Play</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Play</Display>
						<Value>AUDIO_TEST_PLAY_PLAY</Value>
					</Discreet>
					<Discreet>
						<Display>Stop</Display>
						<Value>AUDIO_TEST_PLAY_STOP</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5475" trending="true">
			<Name>audioTestFrequency</Name>
			<Description>Audio Test Frequency</Description>
			<Information>
				<Text>Audio Test Frequency</Text>
				<Subtext>Audio Test Frequency</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Hz</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5480" trending="true">
			<Name>audioTestChannel</Name>
			<Description>Audio Test Channel</Description>
			<Information>
				<Text>Audio Test Channel</Text>
				<Subtext>Audio Test Channel</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Both</Display>
						<Value>BOTH</Value>
					</Discreet>
					<Discreet>
						<Display>Left</Display>
						<Value>LEFT</Value>
					</Discreet>
					<Discreet>
						<Display>Right</Display>
						<Value>RIGHT</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5485" trending="true">
			<Name>audioTestVolume</Name>
			<Description>Audio Test Volume</Description>
			<Information>
				<Text>Audio Test Volume</Text>
				<Subtext>Audio Test Volume</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Audio</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5495" trending="false">
			<Name>biosNomenclature</Name>
			<Description>BIOS Nomenclature</Description>
			<Information>
				<Text>BIOS Nomenclature</Text>
				<Subtext>BIOS Nomenclature</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5500" trending="false">
			<Name>biosVersion</Name>
			<Description>BIOS Version</Description>
			<Information>
				<Text>BIOS Version</Text>
				<Subtext>BIOS Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5505" trending="true">
			<Name>biosType</Name>
			<Description>BIOS Type</Description>
			<Information>
				<Text>BIOS Type</Text>
				<Subtext>BIOS Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>EFI</Display>
						<Value>EFI</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5510" trending="true">
			<Name>sataMode</Name>
			<Description>SATA Mode</Description>
			<Information>
				<Text>SATA Mode</Text>
				<Subtext>SATA Mode</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>AHCI</Display>
						<Value>AHCI</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5515" trending="true">
			<Name>bootDiskDriver</Name>
			<Description>Boot Disk Driver</Description>
			<Information>
				<Text>Boot Disk Driver</Text>
				<Subtext>Boot Disk Driver</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>AHCI</Display>
						<Value>ahci</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5520" trending="false">
			<Name>hostName</Name>
			<Description>Host Name</Description>
			<Information>
				<Text>Host Name</Text>
				<Subtext>Host Name</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5525" trending="false">
			<Name>riserVersion</Name>
			<Description>Riser Board Version</Description>
			<Information>
				<Text>Riser Board Version</Text>
				<Subtext>Riser Board Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5526" trending="false">
			<Name>sdiYcrcErrorSecsErrorFields</Name>
			<Description>SDI YCRC Error Fields</Description>
			<Information>
				<Text>SDI YCRC Error Fields</Text>
				<Subtext>SDI YCRC Error Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5527" trending="false">
			<Name>sdiYcrcErrorSecsErrorSeconds</Name>
			<Description>SDI YCRC Error Seconds</Description>
			<Information>
				<Text>SDI YCRC Error Seconds</Text>
				<Subtext>SDI YCRC Error Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5528" trending="false">
			<Name>sdiYcrcErrorSecsFields</Name>
			<Description>SDI YCRC Fields</Description>
			<Information>
				<Text>SDI YCRC Fields</Text>
				<Subtext>SDI YCRC Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5529" trending="false">
			<Name>sdiYcrcErrorSecsInactiveFields</Name>
			<Description>SDI YCRC Inactive Fields</Description>
			<Information>
				<Text>SDI YCRC Inactive Fields</Text>
				<Subtext>SDI YCRC Inactive Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5530" trending="false">
			<Name>sdiYcrcErrorSecsInactiveSeconds</Name>
			<Description>SDI YCRC Inactive Seconds</Description>
			<Information>
				<Text>SDI YCRC Inactive Seconds</Text>
				<Subtext>SDI YCRC Inactive Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5531" trending="false">
			<Name>sdiYcrcErrorSecsSeconds</Name>
			<Description>SDI YCRC Seconds</Description>
			<Information>
				<Text>SDI YCRC Seconds</Text>
				<Subtext>SDI YCRC Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5532" trending="false">
			<Name>sdiYcrcErrorSecsTotalErrors</Name>
			<Description>SDI YCRC Total Errors</Description>
			<Information>
				<Text>SDI YCRC Total Errors</Text>
				<Subtext>SDI YCRC Total Errors</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5533" trending="false">
			<Name>sdiCcrcErrorSecsErrorFields</Name>
			<Description>SDI CCRC Error Fields</Description>
			<Information>
				<Text>SDI CCRC Error Fields</Text>
				<Subtext>SDI CCRC Error Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5534" trending="false">
			<Name>sdiCcrcErrorSecsErrorSeconds</Name>
			<Description>SDI CCRC Error Seconds</Description>
			<Information>
				<Text>SDI CCRC Error Seconds</Text>
				<Subtext>SDI CCRC Error Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5535" trending="false">
			<Name>sdiCcrcErrorSecsFields</Name>
			<Description>SDI CCRC Fields</Description>
			<Information>
				<Text>SDI CCRC Fields</Text>
				<Subtext>SDI CCRC Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5536" trending="false">
			<Name>sdiCcrcErrorSecsInactiveFields</Name>
			<Description>SDI CCRC Inactive Fields</Description>
			<Information>
				<Text>SDI CCRC Inactive Fields</Text>
				<Subtext>SDI CCRC Inactive Fields</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5537" trending="false">
			<Name>sdiCcrcErrorSecsInactiveSeconds</Name>
			<Description>SDI CCRC Inactive Seconds</Description>
			<Information>
				<Text>SDI CCRC Inactive Seconds</Text>
				<Subtext>SDI CCRC Inactive Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5538" trending="false">
			<Name>sdiCcrcErrorSecsSeconds</Name>
			<Description>SDI CCRC Seconds</Description>
			<Information>
				<Text>SDI CCRC Seconds</Text>
				<Subtext>SDI CCRC Seconds</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
				<Units>s</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5539" trending="false">
			<Name>sdiCcrcErrorSecsTotalErrors</Name>
			<Description>SDI CCRC Total Errors</Description>
			<Information>
				<Text>SDI CCRC Total Errors</Text>
				<Subtext>SDI CCRC Total Errors</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Alarm>
				<Monitored>false</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5540" trending="false">
			<Name>sfpModuleInfoIP1Installed</Name>
			<Description>SFP Module IP1 Installed</Description>
			<Information>
				<Text>SFP Module IP1 Installed</Text>
				<Subtext>SFP Module IP1 Installed</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5541" trending="false">
			<Name>sfpModuleInfoIP1LossOfSignal</Name>
			<Description>SFP Module IP1 Loss of Signal</Description>
			<Information>
				<Text>SFP Module IP1 Loss of Signal</Text>
				<Subtext>SFP Module IP1 Loss of Signal</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5542" trending="false">
			<Name>sfpModuleInfoIP1Pinout</Name>
			<Description>SFP Module IP1 Pinout</Description>
			<Information>
				<Text>SFP Module IP1 Pinout</Text>
				<Subtext>SFP Module IP1 Pinout</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>MSA</Display>
						<Value>MSA</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5543" trending="false">
			<Name>sfpModuleInfoIP1Powered</Name>
			<Description>SFP Module IP1 Powered</Description>
			<Information>
				<Text>SFP Module IP1 Powered</Text>
				<Subtext>SFP Module IP1 Powered</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Alarm>
				<Monitored>false</Monitored>
				<Normal>true</Normal>
				<CL>false</CL>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5544" trending="false">
			<Name>sfpModuleInfoIP1SignalStatus</Name>
			<Description>SFP Module IP1 Signal Status</Description>
			<Information>
				<Text>SFP Module IP1 Signal Status</Text>
				<Subtext>SFP Module IP1 Signal Status</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>OK</Display>
						<Value>OK</Value>
					</Discreet>
					<Discreet>
						<Display>Error</Display>
						<Value>error</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5545" trending="false">
			<Name>sfpModuleInfoIP2Installed</Name>
			<Description>SFP Module IP2 Installed</Description>
			<Information>
				<Text>SFP Module IP2 Installed</Text>
				<Subtext>SFP Module IP2 Installed</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5546" trending="false">
			<Name>sfpModuleInfoIP2LossOfSignal</Name>
			<Description>SFP Module IP2 Loss of Signal</Description>
			<Information>
				<Text>SFP Module IP2 Loss of Signal</Text>
				<Subtext>SFP Module IP2 Loss of Signal</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Alarm>
				<Monitored>false</Monitored>
				<Normal>false</Normal>
				<CL>true</CL>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5547" trending="false">
			<Name>sfpModuleInfoIP2Pinout</Name>
			<Description>SFP Module IP2 Pinout</Description>
			<Information>
				<Text>SFP Module IP2 Pinout</Text>
				<Subtext>SFP Module IP2 Pinout</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>MSA</Display>
						<Value>MSA</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5548" trending="false">
			<Name>sfpModuleInfoIP2Powered</Name>
			<Description>SFP Module IP2 Powered</Description>
			<Information>
				<Text>SFP Module IP2 Powered</Text>
				<Subtext>SFP Module IP2 Powered</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5549" trending="false">
			<Name>sfpModuleInfoIP2SignalStatus</Name>
			<Description>SFP Module IP2 Signal Status</Description>
			<Information>
				<Text>SFP Module IP2 Signal Status</Text>
				<Subtext>SFP Module IP2 Signal Status</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>OK</Display>
						<Value>OK</Value>
					</Discreet>
					<Discreet>
						<Display>Error</Display>
						<Value>error</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5595" trending="false">
			<Name>activeInput</Name>
			<Description>Active Input</Description>
			<Information>
				<Text>Active Input</Text>
				<Subtext>Active Input</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
					<Position>
						<Page>Input Status</Page>
						<Row>10</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5695">
			<Name>activeInput</Name>
			<Description>Active Input</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets dependencyId="5597" />
			</Measurement>
		</Param>
		<Param id="5596" trending="false">
			<Name>activeInputIndexList</Name>
			<Description>Active Input Index List</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay onAppLevel="true">true</RTDisplay>
			</Display>
			<Alarm>
				<Monitored>false</Monitored>
			</Alarm>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="5597" trending="false">
			<Name>activeInputNameList</Name>
			<Description>Active Input Name List</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay onAppLevel="true">true</RTDisplay>
			</Display>
			<Alarm>
				<Monitored>false</Monitored>
			</Alarm>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<!-- This will only be used to store the XML config-->
		<Param id="5600" trending="false">
			<Name>inputConfigureInput0</Name>
			<Description>Input Configure Input 0</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5601" trending="false">
			<Name>inputConfigureInput1</Name>
			<Description>Input Configure Input 1</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5602" trending="false">
			<Name>inputConfigureInput2</Name>
			<Description>Input Configure Input 2</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5603" trending="false">
			<Name>inputConfigureInput3</Name>
			<Description>Input Configure Input 3</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5604" trending="false">
			<Name>inputConfigureInput4</Name>
			<Description>Input Configure Input 4</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="5605" trending="false">
			<Name>inputConfigureInput5</Name>
			<Description>Input Configure Input 5</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<!-- Ethernet Stats-->
		<!-- IP1 -->
		<Param id="5700" trending="true">
			<Name>ethStatsHighBERIP1</Name>
			<Description>High BER IP1</Description>
			<Information>
				<Text>High BER IP1</Text>
				<Subtext>High BER IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5701" trending="true">
			<Name>ethStatsRxFaultIP1</Name>
			<Description>Rx Fault IP1</Description>
			<Information>
				<Text>Rx Fault IP1</Text>
				<Subtext>Rx Fault IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5702" trending="true">
			<Name>ethStatsTxFaultIP1</Name>
			<Description>Tx Fault IP1</Description>
			<Information>
				<Text>Tx Fault IP1</Text>
				<Subtext>Tx Fault IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5703" trending="true">
			<Name>ethStatsMaxPacketsIP1</Name>
			<Description>Max Packets IP1</Description>
			<Information>
				<Text>Max Packets IP1</Text>
				<Subtext>Max Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5704" trending="true">
			<Name>ethStatsMinPacketsIP1</Name>
			<Description>Min Packets IP1</Description>
			<Information>
				<Text>Min Packets IP1</Text>
				<Subtext>Min Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Units>Packets</Units>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5705" trending="true">
			<Name>ethStatsOctetsIP1</Name>
			<Description>Octets IP1</Description>
			<Information>
				<Text>Min Packets IP1</Text>
				<Subtext>Min Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5706" trending="true">
			<Name>ethStatsPacketsIP1</Name>
			<Description>Packets IP1</Description>
			<Information>
				<Text>Packets IP1</Text>
				<Subtext>Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5707" trending="true">
			<Name>ethStatsRxPausesIP1</Name>
			<Description>Rx Pauses IP1</Description>
			<Information>
				<Text>Rx Pauses IP1</Text>
				<Subtext>Rx Pauses IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>8</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>1</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5708" trending="true">
			<Name>ethStatsTxPausesIP1</Name>
			<Description>Tx Pauses IP1</Description>
			<Information>
				<Text>Tx Pauses IP1</Text>
				<Subtext>Tx Pauses IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>9</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>1</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!-- IP1 RX -->
		<Param id="5710" trending="true">
			<Name>ethStatsRxBroadcastPacketsIP1</Name>
			<Description>Rx Broadcast Packets IP1</Description>
			<Information>
				<Text>Rx Broadcast Packets IP1</Text>
				<Subtext>Rx Broadcast Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>10</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5711" trending="true">
			<Name>ethStatsRxCollisionsIP1</Name>
			<Description>Rx Collisions IP1</Description>
			<Information>
				<Text>Rx Collisions IP1</Text>
				<Subtext>Rx Collisions IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>11</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5712" trending="true">
			<Name>ethStatsRxCRCAllignErrorsIP1</Name>
			<Description>Rx CRC Align Errors IP1</Description>
			<Information>
				<Text>Rx CRC Align Errors IP1</Text>
				<Subtext>Rx CRC Align Errors IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>12</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5713" trending="true">
			<Name>ethStatsRxDropEventsIP1</Name>
			<Description>Rx Drop Events IP1</Description>
			<Information>
				<Text>Rx Drop Events IP1</Text>
				<Subtext>Rx Drop Events IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>13</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5714" trending="true">
			<Name>ethStatsRxFragmetsIP1</Name>
			<Description>Rx Fragments IP1</Description>
			<Information>
				<Text>Rx Fragments IP1</Text>
				<Subtext>Rx Fragments IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Fragments</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>14</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5715" trending="true">
			<Name>ethStatsRxTulticastpacketsIP1</Name>
			<Description>Rx Multicast Packets IP1</Description>
			<Information>
				<Text>Rx Multicast Packets IP1</Text>
				<Subtext>Rx Multicast Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>15</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5716" trending="true">
			<Name>ethStatsRxOverflowsIP1</Name>
			<Description>Rx Overflows IP1</Description>
			<Information>
				<Text>Rx Overflows IP1</Text>
				<Subtext>Rx Overflows IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>16</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5717" trending="true">
			<Name>ethStatsSignalStatusIP1</Name>
			<Description>Signal Status IP1</Description>
			<Information>
				<Text>Signal Status IP1</Text>
				<Subtext>Signal Status IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>NoSignal</CL>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>No Signal</Display>
						<Value>NoSignal</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- IP1 TX -->
		<Param id="5720" trending="true">
			<Name>ethStatsTxBroadcastPacketsIP1</Name>
			<Description>Tx Broadcast Packets IP1</Description>
			<Information>
				<Text>Tx Broadcast Packets IP1</Text>
				<Subtext>Tx Broadcast Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>17</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5721" trending="true">
			<Name>ethStatsTxCollisionsIP1</Name>
			<Description>Tx Collisions IP1</Description>
			<Information>
				<Text>Tx Collisions IP1</Text>
				<Subtext>Tx Collisions IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>18</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5722" trending="true">
			<Name>ethStatsTxCRCAllignErrorsIP1</Name>
			<Description>Tx CRC Align Errors IP1</Description>
			<Information>
				<Text>Tx CRC Align Errors IP1</Text>
				<Subtext>Tx CRC Align Errors IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>19</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5723" trending="true">
			<Name>ethStatsTxDropEventsIP1</Name>
			<Description>Tx Drop Events IP1</Description>
			<Information>
				<Text>Tx Drop Events IP1</Text>
				<Subtext>Tx Drop Events IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>20</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5724" trending="true">
			<Name>ethStatsTxFragmetsIP1</Name>
			<Description>Tx Fragments IP1</Description>
			<Information>
				<Text>Tx Fragments IP1</Text>
				<Subtext>Tx Fragments IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Fragments</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>21</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5725" trending="true">
			<Name>ethStatsTxTulticastpacketsIP1</Name>
			<Description>Tx Multicast Packets IP1</Description>
			<Information>
				<Text>Tx Multicast Packets IP1</Text>
				<Subtext>Tx Multicast Packets IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>22</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5726" trending="true">
			<Name>ethStatsTxOverflowsIP1</Name>
			<Description>Tx Overflows IP1</Description>
			<Information>
				<Text>Tx Overflows IP1</Text>
				<Subtext>Tx Overflows IP1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>23</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!-- IP2 -->
		<Param id="5800" trending="true">
			<Name>ethStatsHighBERIP2</Name>
			<Description>High BER IP2</Description>
			<Information>
				<Text>High BER IP2</Text>
				<Subtext>High BER IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5801" trending="true">
			<Name>ethStatsRxFaultIP2</Name>
			<Description>Rx Fault IP2</Description>
			<Information>
				<Text>Rx Fault IP2</Text>
				<Subtext>Rx Fault IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5802" trending="true">
			<Name>ethStatsTxFaultIP2</Name>
			<Description>Tx Fault IP2</Description>
			<Information>
				<Text>Tx Fault IP2</Text>
				<Subtext>Tx Fault IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="5803" trending="true">
			<Name>ethStatsMaxPacketsIP2</Name>
			<Description>Max Packets IP2</Description>
			<Information>
				<Text>Max Packets IP2</Text>
				<Subtext>Max Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5804" trending="true">
			<Name>ethStatsMinPacketsIP2</Name>
			<Description>Min Packets IP2</Description>
			<Information>
				<Text>Min Packets IP2</Text>
				<Subtext>Min Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5805" trending="true">
			<Name>ethStatsOctetsIP2</Name>
			<Description>Octets IP2</Description>
			<Information>
				<Text>Octets IP2</Text>
				<Subtext>Octets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Octets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5806" trending="true">
			<Name>ethStatsPacketsIP2</Name>
			<Description>Packets IP2</Description>
			<Information>
				<Text>Packets IP2</Text>
				<Subtext>Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>7</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>0</CL>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5807" trending="true">
			<Name>ethStatsRxPausesIP2</Name>
			<Description>Rx Pauses IP2</Description>
			<Information>
				<Text>Rx Pauses IP2</Text>
				<Subtext>Rx Pauses IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>8</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>1</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5808" trending="true">
			<Name>ethStatsTxPausesIP2</Name>
			<Description>Tx Pauses IP2</Description>
			<Information>
				<Text>Tx Pauses IP2</Text>
				<Subtext>Tx Pauses IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>9</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>1</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!-- IP2 RX -->
		<Param id="5810" trending="true">
			<Name>ethStatsRxBroadcastPacketsIP2</Name>
			<Description>Rx Broadcast Packets IP2</Description>
			<Information>
				<Text>Rx Broadcast Packets IP2</Text>
				<Subtext>Rx Broadcast Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>10</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5811" trending="true">
			<Name>ethStatsRxCollisionsIP2</Name>
			<Description>Rx Collisions IP2</Description>
			<Information>
				<Text>Rx Collisions IP2</Text>
				<Subtext>Rx Collisions IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>11</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5812" trending="true">
			<Name>ethStatsRxCRCAllignErrorsIP2</Name>
			<Description>Rx CRC Align Errors IP2</Description>
			<Information>
				<Text>Rx CRC Align Errors IP2</Text>
				<Subtext>Rx CRC Align Errors IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>12</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5813" trending="true">
			<Name>ethStatsRxDropEventsIP2</Name>
			<Description>Rx Drop Events IP2</Description>
			<Information>
				<Text>Rx Drop Events IP2</Text>
				<Subtext>Rx Drop Events IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>13</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5814" trending="true">
			<Name>ethStatsRxFragmetsIP2</Name>
			<Description>Rx Fragments IP2</Description>
			<Information>
				<Text>Rx Fragments IP2</Text>
				<Subtext>Rx Fragments IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Fragments</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>14</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5815" trending="true">
			<Name>ethStatsRxTulticastpacketsIP2</Name>
			<Description>Rx Multicast Packets IP2</Description>
			<Information>
				<Text>Rx Multicast Packets IP2</Text>
				<Subtext>Rx Multicast Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>15</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5816" trending="true">
			<Name>ethStatsRxOverflowsIP2</Name>
			<Description>Rx Overflows IP2</Description>
			<Information>
				<Text>Rx Overflows IP2</Text>
				<Subtext>Rx Overflows IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>16</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5817" trending="true">
			<Name>ethStatsSignalStatusIP2</Name>
			<Description>Signal Status IP2</Description>
			<Information>
				<Text>Signal Status IP2</Text>
				<Subtext>Signal Status IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CL>NoSignal</CL>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>No Signal</Display>
						<Value>NoSignal</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- IP2 TX -->
		<Param id="5820" trending="true">
			<Name>ethStatsTxBroadcastPacketsIP2</Name>
			<Description>Tx Broadcast Packets IP2</Description>
			<Information>
				<Text>Tx Broadcast Packets IP2</Text>
				<Subtext>Tx Broadcast Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>17</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5821" trending="true">
			<Name>ethStatsTxCollisionsIP2</Name>
			<Description>Tx Collisions IP2</Description>
			<Information>
				<Text>Tx Collisions IP2</Text>
				<Subtext>Tx Collisions IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>18</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5822" trending="true">
			<Name>ethStatsTxCRCAllignErrorsIP2</Name>
			<Description>Tx CRC Align Errors IP2</Description>
			<Information>
				<Text>Tx CRC Align Errors IP2</Text>
				<Subtext>Tx CRC Align Errors IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>19</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5823" trending="true">
			<Name>ethStatsTxDropEventsIP2</Name>
			<Description>Tx Drop Events IP2</Description>
			<Information>
				<Text>Tx Drop Events IP2</Text>
				<Subtext>Tx Drop Events IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>20</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5824" trending="true">
			<Name>ethStatsTxFragmetsIP2</Name>
			<Description>Tx Fragments IP2</Description>
			<Information>
				<Text>Tx Fragments IP2</Text>
				<Subtext>Tx Fragments IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Fragments</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>21</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5825" trending="true">
			<Name>ethStatsTxTulticastpacketsIP2</Name>
			<Description>Tx Multicast Packets IP2</Description>
			<Information>
				<Text>Tx Multicast Packets IP2</Text>
				<Subtext>Tx Multicast Packets IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>22</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5826" trending="true">
			<Name>ethStatsTxOverflowsIP2</Name>
			<Description>Tx Overflows IP2</Description>
			<Information>
				<Text>Tx Overflows IP2</Text>
				<Subtext>Tx Overflows IP2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Ethernet Stats</Page>
						<Row>23</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<CH>5</CH>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="5890">
			<Name>btnEhernetStats</Name>
			<Description />
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Network</Page>
						<Row>8</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Ethernet Stats...</Display>
						<Value>Ethernet Stats</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- Input Status-->
		<Param id="6000" trending="false">
			<Name>inputStatusDetectedFormatColorimetry</Name>
			<Description>Detected Format Colorimetry</Description>
			<Information>
				<Text>Detected Format Colorimetry</Text>
				<Subtext>Detected Format Colorimetry</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="">
						<Display state="disabled">N/A</Display>
						<Value />
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6003" trending="false">
			<Name>inputStatusDetectedFormatOETFEncoding</Name>
			<Description>Detected Format OETF Encoding</Description>
			<Information>
				<Text>Detected Format OETF Encoding</Text>
				<Subtext>Detected Format OETF Encoding</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6005" trending="false">
			<Name>inputStatusDetectedFormatOETFMatrix</Name>
			<Description>Detected Format OETF Matrix</Description>
			<Information>
				<Text>Detected Format OETF Matrix</Text>
				<Subtext>Detected Format OETF Matrix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6010" trending="true">
			<Name>inputStatusDetectedFormatErrors</Name>
			<Description>Detected Format Errors</Description>
			<Information>
				<Text>Detected Format Errors</Text>
				<Subtext>Detected Format Errors</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
				<Range>
					<Low>-65535</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6015" trending="false">
			<Name>inputStatusDetectedFormatFormat</Name>
			<Description>Detected Format</Description>
			<Information>
				<Text>Detected Format</Text>
				<Subtext>Detected Format</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6020" trending="false">
			<Name>inputStatusDetectedFormatMetasource</Name>
			<Description>Detected Format Metasource</Description>
			<Information>
				<Text>Detected Format Metasource</Text>
				<Subtext>Detected Format Metasource</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6025" trending="true">
			<Name>inputStatusDetectedFormatIss2022_7</Name>
			<Description>Detected Format S2022-7</Description>
			<Information>
				<Text>Detected Format S2022-7</Text>
				<Subtext>Detected Format S2022-7</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6030" trending="false">
			<Name>inputStatusDetectedFormatStructure</Name>
			<Description>Detected Format Structure</Description>
			<Information>
				<Text>Detected Format Structure</Text>
				<Subtext>Detected Format Structure</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6035" trending="false">
			<Name>inputStatusDetectedFormatTransport</Name>
			<Description>Detected Format Transport</Description>
			<Information>
				<Text>Detected Format Transport</Text>
				<Subtext>Detected Format Transport</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>8</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6040" trending="false">
			<Name>inputStatusDetectedFormatType</Name>
			<Description>Detected Format Type</Description>
			<Information>
				<Text>Detected Format Type</Text>
				<Subtext>Detected Format Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>9</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6100" trending="false">
			<Name>inputStatusFormatColorimetry</Name>
			<Description>Format Colorimetry</Description>
			<Information>
				<Text>Format Colorimetry</Text>
				<Subtext>Format Colorimetry</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="">
						<Display state="disabled">N/A</Display>
						<Value />
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6103" trending="false">
			<Name>inputStatusFormatOETFEncoding</Name>
			<Description>Format OETF Encoding</Description>
			<Information>
				<Text>Format OETF Encoding</Text>
				<Subtext>Format OETF Encoding</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6105" trending="false">
			<Name>inputStatusFormatOETFMatrix</Name>
			<Description>Format OETF Matrix</Description>
			<Information>
				<Text>Format OETF Matrix</Text>
				<Subtext>Format OETF Matrix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6110" trending="true">
			<Name>inputStatusFormatErrors</Name>
			<Description>Format Errors</Description>
			<Information>
				<Text>Format Errors</Text>
				<Subtext>Format Errors</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6115" trending="false">
			<Name>inputStatusFormatFormat</Name>
			<Description>Input Format</Description>
			<Information>
				<Text>Input Format</Text>
				<Subtext>Input Format</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6120" trending="false">
			<Name>inputStatusFormatMetasource</Name>
			<Description>Format Metasource</Description>
			<Information>
				<Text>Format Metasource</Text>
				<Subtext>Format Metasource</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6125" trending="true">
			<Name>inputStatusFormatIss2022_7</Name>
			<Description>Format S2022-7</Description>
			<Information>
				<Text>Format S2022-7</Text>
				<Subtext>Format S2022-7</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6130" trending="false">
			<Name>inputStatusFormatStructure</Name>
			<Description>Format Structure</Description>
			<Information>
				<Text>Format Structure</Text>
				<Subtext>Format Structure</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>7</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6135" trending="false">
			<Name>inputStatusFormatTransport</Name>
			<Description>Format Transport</Description>
			<Information>
				<Text>Format Transport</Text>
				<Subtext>Format Transport</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>8</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6140" trending="false">
			<Name>inputStatusFormatType</Name>
			<Description>Format Type</Description>
			<Information>
				<Text>Format Type</Text>
				<Subtext>Format Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>9</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6145" trending="false">
			<Name>inputStatusFormatEOTFEncoding</Name>
			<Description>Format EOTF Encoding</Description>
			<Information>
				<Text>Format EOTF Encoding</Text>
				<Subtext>Format EOTF Encoding</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>10</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6150" trending="false">
			<Name>inputStatusFormatEOTFMatrix</Name>
			<Description>Format EOTF Matrix</Description>
			<Information>
				<Text>Format EOTF Matrix</Text>
				<Subtext>Format EOTF Matrix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>11</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6155" trending="false">
			<Name>inputStatusVideoScopeMedia</Name>
			<Description>Video Scope Media</Description>
			<Information>
				<Text>Video Scope Media</Text>
				<Subtext>Video Scope Media</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="null">
						<Display state="disabled">N/A</Display>
						<Value>null</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>12</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6160" trending="true">
			<Name>inputStatusVideoScopePort</Name>
			<Description>Video Scope Port</Description>
			<Information>
				<Text>Video Scope Port</Text>
				<Subtext>Video Scope Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>13</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6165" trending="true">
			<Name>inputStatusVideoScopeSlot</Name>
			<Description>Video Scope Slot</Description>
			<Information>
				<Text>Video Scope Slot</Text>
				<Subtext>Video Scope Slot</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Row>14</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6195">
			<Name>btnInputStatus</Name>
			<Description />
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Input Status...</Display>
						<Value>Input Status</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- PTP Related stuff -->
		<Param id="6200" trending="true">
			<Name>ptpLockStatus</Name>
			<Description>PTP Lock Status</Description>
			<Information>
				<Text>PTP Lock Status</Text>
				<Subtext>PTP Lock Status</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>2</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>No Master Present</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>No Master Present</Display>
						<Value>No Master Present</Value>
					</Discreet>
					<Discreet>
						<Display>Locked</Display>
						<Value>Locked</Value>
					</Discreet>
					<Discreet>
						<Display>Unlocked</Display>
						<Value>Unlocked</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6201" trending="true">
			<Name>ptpPortState</Name>
			<Description>PTP Port State</Description>
			<Information>
				<Text>PTP Port State</Text>
				<Subtext>PTP Port State</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>3</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>LISTENING</Normal>
			</Alarm>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Listening</Display>
						<Value>LISTENING</Value>
					</Discreet>
					<Discreet>
						<Display>Slave</Display>
						<Value>SLAVE</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6202" trending="false">
			<Name>ptpGpsTime</Name>
			<Description>GPS Time</Description>
			<Information>
				<Text>PTP GPS Time</Text>
				<Subtext>PTP GPS Time</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Decimals>8</Decimals>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>1</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="datetime">number</Type>
			</Measurement>
		</Param>
		<Param id="6203" trending="false">
			<Name>ptpGrandMasterClockAccuracy</Name>
			<Description>Grand Master Clock Accuracy</Description>
			<Information>
				<Text>Grand Master Clock Accuracy</Text>
				<Subtext>Grand Master Clock Accuracy</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>2</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6204" trending="true">
			<Name>ptpGrandMasterClockClass</Name>
			<Description>Grand Master Clock Class</Description>
			<Information>
				<Text>Grand Master Clock Class</Text>
				<Subtext>Grand Master Clock Class</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>3</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6205" trending="true">
			<Name>ptpGrandMasterClockSource</Name>
			<Description>Grand Master Clock Source</Description>
			<Information>
				<Text>PTP Grand Master Clock Source</Text>
				<Subtext>PTP Grand Master Clock Source</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>1</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>GPS</Display>
						<Value>GPS</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6206" trending="true">
			<Name>ptpGrandMasterClockVariance</Name>
			<Description>Grand Master Clock Variance</Description>
			<Information>
				<Text>Grand Master Clock Variance</Text>
				<Subtext>Grand Master Clock Variance</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>1000</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>0</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6207" trending="false">
			<Name>ptpGrandMasterId</Name>
			<Description>Grand Master Clock ID</Description>
			<Information>
				<Text>Grand Master Clock ID</Text>
				<Subtext>Grand Master Clock ID</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>4</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6208" trending="false">
			<Name>ptpGrandMasterIpAddress</Name>
			<Description>Grand Master IP Address</Description>
			<Information>
				<Text>Grand Master Clock IP Address</Text>
				<Subtext>Grand Master Clock IP Address</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>5</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6209" trending="false">
			<Name>ptpGrandMasterPriority1</Name>
			<Description>Grand Master Priority 1</Description>
			<Information>
				<Text>Grand Master Priority 1</Text>
				<Subtext>Grand Master Priority 1</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>6</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6210" trending="false">
			<Name>ptpGrandMasterPriority2</Name>
			<Description>Grand Master Priority 2</Description>
			<Information>
				<Text>Grand Master Priority 2</Text>
				<Subtext>Grand Master Priority 2</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>7</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6211" trending="true">
			<Name>ptpLockFom</Name>
			<Description>Lock FOM</Description>
			<Information>
				<Text>Lock FOM</Text>
				<Subtext>Lock FOM</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>ns</Units>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>4</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6212" trending="false">
			<Name>ptpTimeString</Name>
			<Description>PTP Time</Description>
			<Information>
				<Text>PTP Time</Text>
				<Subtext>PTP Time</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Decimals>8</Decimals>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>0</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="datetime">number</Type>
			</Measurement>
		</Param>
		<Param id="6213" trending="true">
			<Name>ptpStepsRemoved</Name>
			<Description>PTP Steps Removed</Description>
			<Information>
				<Text>PTP Steps Removed</Text>
				<Subtext>PTP Steps Removed</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>8</Row>
						<Column>1</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6214" trending="false">
			<Name>ptpProfile</Name>
			<Description>PTP Profile</Description>
			<Information>
				<Text>Currently active PTP profile.</Text>
				<Subtext>Currently active PTP profile.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>10</Row>
						<Column>0</Column>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6217" trending="true">
			<Name>ptpProfileDomain</Name>
			<Description>PTP Profile Domain</Description>
			<Information>
				<Text>Currently active PTP profile domain.</Text>
				<Subtext>Currently active PTP profile domain.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>11</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>127</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!-- PTP Rates -->
		<Param id="6230" trending="true">
			<Name>ptpAnnounceRate</Name>
			<Description>PTP Announce Rate</Description>
			<Information>
				<Text>PTP Announce Rate</Text>
				<Subtext>PTP Announce Rate</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Pps</Units>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>5</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>10000000000</High>
				</Range>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6231" trending="true">
			<Name>ptpDelayReqRate</Name>
			<Description>PTP Delay Req Rate</Description>
			<Information>
				<Text>PTP Delay Req Rate</Text>
				<Subtext>PTP Delay Req Rate</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Pps</Units>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>8</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>10000000000</High>
				</Range>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6232" trending="true">
			<Name>ptpDelayRespRate</Name>
			<Description>PTP Delay Resp Rate</Description>
			<Information>
				<Text>PTP Delay Resp Rate</Text>
				<Subtext>PTP Delay Resp Rate</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Pps</Units>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>7</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>10000000000</High>
				</Range>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6233" trending="true">
			<Name>ptpSyncRate</Name>
			<Description>PTP Sync Rate</Description>
			<Information>
				<Text>PTP Sync Rate</Text>
				<Subtext>PTP Sync Rate</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Pps</Units>
				<Positions>
					<Position>
						<Page>PTP Information</Page>
						<Row>6</Row>
						<Column>0</Column>
					</Position>
				</Positions>
				<Range>
					<Low>0</Low>
					<High>10000000000</High>
				</Range>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!-- Inputs Configuration-->
		<Param id="6300" trending="false">
			<Name>audioFlowInputConfigTable</Name>
			<Description>Audio Flow Configuration</Description>
			<Type>array</Type>
			<ArrayOptions index="0" options=";volatile">
				<ColumnOption idx="0" pid="6301" type="retrieved" options="" />
				<ColumnOption idx="1" pid="6302" type="retrieved" options="" />
				<ColumnOption idx="2" pid="6303" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="3" pid="6304" type="retrieved" options="" />
				<ColumnOption idx="4" pid="6305" type="retrieved" options="" />
				<ColumnOption idx="5" pid="6306" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="6" pid="6307" type="retrieved" options="" />
				<ColumnOption idx="7" pid="6308" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="8" pid="6309" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="9" pid="6310" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="10" pid="6311" type="retrieved" options="" />
				<ColumnOption idx="11" pid="6312" type="retrieved" options="" />
				<ColumnOption idx="12" pid="6313" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="13" pid="6314" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="14" pid="6315" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="15" pid="6316" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="16" pid="6317" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="17" pid="6318" type="retrieved" options="" />
				<ColumnOption idx="18" pid="6319" type="retrieved" options="" />
				<ColumnOption idx="19" pid="6320" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>The configuration of the audio flow for every available input</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:6301|0-6318|17-6319|18-6302|1-6304|3-6305|4-6311|10-6312|11-6303|2-6306|5-6307|6-6308|7-6309|8-6310|9-6313|12-6314|13-6315|14-6316|15-6317|16-6320|19,width:266-251-242-211-251-230-249-228-207-239-251-261-241-237-238-238-266-254-292-212,sort:STRING-STRING-STRING-STRING-STRING-INT-STRING-INT-INT-INT-STRING-STRING-STRING-INT-INT-INT-INT-INT-INT-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="6301" trending="false">
			<Name>audioFlowConfigTableInputId</Name>
			<Description>Index [IDX] (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Index</Text>
				<Subtext>Audio Flow  Input Config Table Index</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6302" trending="true">
			<Name>audioFlowConfigTableInputType</Name>
			<Description>Type (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Type</Text>
				<Subtext>Audio Flow Input Config Table Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>SDI</Display>
						<Value>SDI</Value>
					</Discreet>
					<Discreet>
						<Display>IP S2110</Display>
						<Value>S2110</Value>
					</Discreet>
					<Discreet>
						<Display>IP S2022-6</Display>
						<Value>S2022.6</Value>
					</Discreet>
					<Discreet>
						<Display>IP ASPEN</Display>
						<Value>ASPEN</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6303" trending="true">
			<Name>audioFlowConfigTableInputPid</Name>
			<Description>PID (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table PID</Text>
				<Subtext>Audio Flow Input Config Table PID</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6304" trending="false">
			<Name>audioFlowConfigTableInputDstAddress</Name>
			<Description>Dst Address (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Dst Address</Text>
				<Subtext>Audio Flow Input Config Table Dst Address</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6354" trending="false">
			<Name>audioFlowConfigTableInputDstAddress</Name>
			<Description>Dst Address (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6305" trending="false">
			<Name>audioFlowConfigTableInputDstPort</Name>
			<Description>Dst Port (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Dst Port</Text>
				<Subtext>Audio Flow Input Config Table Dst Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
					<Exception id="3" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6355" trending="false">
			<Name>audioFlowConfigTableInputDstPort</Name>
			<Description>Dst Port (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6306" trending="true">
			<Name>audioFlowConfigTableInputDstPrefix</Name>
			<Description>Dst Prefix (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Dst Prefix</Text>
				<Subtext>Audio Flow Input Config Table Dst Prefix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6356" trending="false">
			<Name>audioFlowConfigTableInputDstPrefix</Name>
			<Description>Dst Prefix (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6307" trending="true">
			<Name>audioFlowConfigTableInputIGMPMode</Name>
			<Description>IGMP Mode (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table IGMP Mode</Text>
				<Subtext>Audio Flow Input Config Table IGMP Mode</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>When Selected</Display>
						<Value>WhenSelected</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6308" trending="true">
			<Name>audioFlowConfigTableInputIGMPVersion</Name>
			<Description>IGMP Version (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table IGMP Version</Text>
				<Subtext>Audio Flow Input Config Table IGMP Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6309" trending="true">
			<Name>audioFlowConfigTableInputIPVersion</Name>
			<Description>IP Version (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table IP Version</Text>
				<Subtext>Audio Flow Input Config Table IP Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6310" trending="true">
			<Name>audioFlowConfigTableInputRTPType</Name>
			<Description>RTP Type (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table RTP Type</Text>
				<Subtext>Audio Flow Input Config Table RTP Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6360" trending="false">
			<Name>audioFlowConfigTableInputRTPType</Name>
			<Description>RTP Type (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6311" trending="false">
			<Name>audioFlowConfigTableInputSrcAddress</Name>
			<Description>Src Address (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Src Address</Text>
				<Subtext>Audio Flow Input Config Table Src Address</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6361" trending="false">
			<Name>audioFlowConfigTableInputSrcAddress</Name>
			<Description>Src Address (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6312" trending="false">
			<Name>audioFlowConfigTableInputSrcPort</Name>
			<Description>Src Port (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Src Port</Text>
				<Subtext>Audio Flow Input Config Table Src Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
					<Exception id="3" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6362" trending="false">
			<Name>audioFlowConfigTableInputSrcPort</Name>
			<Description>Src Port (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6313" trending="true">
			<Name>audioFlowConfigTableInputSrcPrefix</Name>
			<Description>Src Prefix (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Src Prefix</Text>
				<Subtext>Audio Flow Input Config Table Src Prefix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6363" trending="false">
			<Name>audioFlowConfigTableInputSrcPrefix</Name>
			<Description>Src Prefix (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6314" trending="true">
			<Name>audioFlowConfigTableInputBitDepth</Name>
			<Description>Bit Depth (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Bit Depth</Text>
				<Subtext>Audio Flow Input Config Table Bit Depth</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6315" trending="true">
			<Name>audioFlowConfigTableInputNumChannels</Name>
			<Description>Num Channels (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Num Channels</Text>
				<Subtext>Audio Flow Input Config Table Num Channels</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6316" trending="true">
			<Name>audioFlowConfigTableInputMediaIndex</Name>
			<Description>Media Index (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Media Index</Text>
				<Subtext>Audio Flow Input Config Table Media Index</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6317" trending="true">
			<Name>audioFlowConfigTableInputMediaRedundancy</Name>
			<Description>Media Redundancy (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Media Redundancy</Text>
				<Subtext>Audio Flow Input Config Table Media Redundancy</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6318" trending="false">
			<Name>audioFlowConfigTableInputInputName</Name>
			<Description>Input Name (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Input Name</Text>
				<Subtext>Audio Flow Input Config Table Input Name</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6368" trending="false">
			<Name>audioFlowConfigTableInputInputName</Name>
			<Description>Input Name (Audio Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6319" trending="true">
			<Name>audioFlowConfigTableInputIss2022_7</Name>
			<Description>Is S2022_7 (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Flow Input Config Table Is S2022_7</Text>
				<Subtext>Audio Flow Input Config Table Is S2022_7</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6320" trending="false">
			<Name>audioFlowConfigTableInputBtnDisableFlow</Name>
			<Description>Disable Flow (Audio Flow Config)</Description>
			<Information>
				<Text>Audio Disable Flow</Text>
				<Subtext>Audio Disable Flow</Subtext>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Disable</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6400" trending="false">
			<Name>videoFlowInputConfigTable</Name>
			<Description>Video Flow Configuration</Description>
			<Type>array</Type>
			<ArrayOptions index="0" options=";volatile">
				<ColumnOption idx="0" pid="6401" type="retrieved" options="" />
				<ColumnOption idx="1" pid="6402" type="retrieved" options="" />
				<ColumnOption idx="2" pid="6404" type="retrieved" options="" />
				<ColumnOption idx="3" pid="6405" type="retrieved" options="" />
				<ColumnOption idx="4" pid="6406" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="5" pid="6407" type="retrieved" options="" />
				<ColumnOption idx="6" pid="6408" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="7" pid="6409" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="8" pid="6410" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="9" pid="6411" type="retrieved" options="" />
				<ColumnOption idx="10" pid="6412" type="retrieved" options="" />
				<ColumnOption idx="11" pid="6413" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="12" pid="6416" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="13" pid="6417" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="14" pid="6418" type="retrieved" options="" />
				<ColumnOption idx="15" pid="6419" type="retrieved" options="" />
				<ColumnOption idx="16" pid="6420" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="17" pid="6421" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>The configuration of the Video Flow for every available input</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:6401|0-6418|14-6419|15-6402|1-6404|2-6405|3-6411|9-6412|10-6406|4-6407|5-6408|6-6409|7-6410|8-6413|11-6416|12-6417|13-6420|16-6421|17,width:266-251-242-211-251-230-249-228-239-251-261-241-237-238-254-292-207-210,sort:STRING-STRING-STRING-STRING-STRING-INT-STRING-INT-INT-STRING-STRING-STRING-INT-INT-INT-INT-INT-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="6401" trending="false">
			<Name>videoFlowConfigTableInputId</Name>
			<Description>Index [IDX] (Video Flow Config) (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow  Input Config Table Index</Text>
				<Subtext>Video Flow  Input Config Table Index</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6402" trending="true">
			<Name>videoFlowConfigTableInputType</Name>
			<Description>Type (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Type</Text>
				<Subtext>Video Flow Input Config Table Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>SDI</Display>
						<Value>SDI</Value>
					</Discreet>
					<Discreet>
						<Display>IP S2110</Display>
						<Value>S2110</Value>
					</Discreet>
					<Discreet>
						<Display>IP S2022-6</Display>
						<Value>S2022.6</Value>
					</Discreet>
					<Discreet>
						<Display>IP ASPEN</Display>
						<Value>ASPEN</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6404" trending="false">
			<Name>videoFlowConfigTableInputDstAddress</Name>
			<Description>Dst Address (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Dst Address</Text>
				<Subtext>Video Flow Input Config Table Dst Address</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6454" trending="false">
			<Name>videoFlowConfigTableInputDstAddress</Name>
			<Description>Dst Address (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6405" trending="false">
			<Name>videoFlowConfigTableInputDstPort</Name>
			<Description>Dst Port (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Dst Port</Text>
				<Subtext>Video Flow Input Config Table Dst Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
					<Exception id="3" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6455" trending="false">
			<Name>videoFlowConfigTableInputDstPort</Name>
			<Description>Dst Port (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6406" trending="true">
			<Name>videoFlowConfigTableInputDstPrefix</Name>
			<Description>Dst Prefix (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Dst Prefix</Text>
				<Subtext>Video Flow Input Config Table Dst Prefix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6456" trending="false">
			<Name>videoFlowConfigTableInputDstPrefix</Name>
			<Description>Dst Prefix (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6407" trending="true">
			<Name>videoFlowConfigTableInputIGMPMode</Name>
			<Description>IGMP Mode (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table IGMP Mode</Text>
				<Subtext>Video Flow Input Config Table IGMP Mode</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>When Selected</Display>
						<Value>WhenSelected</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6408" trending="true">
			<Name>videoFlowConfigTableInputIGMPVersion</Name>
			<Description>IGMP Version (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table IGMP Version</Text>
				<Subtext>Video Flow Input Config Table IGMP Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6409" trending="true">
			<Name>videoFlowConfigTableInputIPVersion</Name>
			<Description>IP Version (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table IP Version</Text>
				<Subtext>Video Flow Input Config Table IP Version</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6410" trending="true">
			<Name>videoFlowConfigTableInputRTPType</Name>
			<Description>RTP Type (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table RTP Type</Text>
				<Subtext>Video Flow Input Config Table RTP Type</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6460" trending="false">
			<Name>videoFlowConfigTableInputRTPType</Name>
			<Description>RTP Type (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>1024</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6411" trending="false">
			<Name>videoFlowConfigTableInputSrcAddress</Name>
			<Description>Src Address (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Src Address</Text>
				<Subtext>Video Flow Input Config Table Src Address</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="NA">
						<Display state="disabled">N/A</Display>
						<Value>NA</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6461" trending="false">
			<Name>videoFlowConfigTableInputSrcAddress</Name>
			<Description>Src Address (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6412" trending="false">
			<Name>videoFlowConfigTableInputSrcPort</Name>
			<Description>Src Port (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Src Port</Text>
				<Subtext>Video Flow Input Config Table Src Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
					<Exception id="2" value="any">
						<Display state="disabled">Masked</Display>
						<Value>any</Value>
					</Exception>
					<Exception id="3" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6462" trending="false">
			<Name>videoFlowConfigTableInputSrcPort</Name>
			<Description>Src Port (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Masked</Display>
						<Value>any</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6413" trending="true">
			<Name>videoFlowConfigTableInputSrcPrefix</Name>
			<Description>Src Prefix (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Src Prefix</Text>
				<Subtext>Video Flow Input Config Table Src Prefix</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6463" trending="false">
			<Name>videoFlowConfigTableInputSrcPrefix</Name>
			<Description>Src Prefix (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6416" trending="true">
			<Name>videoFlowConfigTableInputMediaIndex</Name>
			<Description>Media Index (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Media Index</Text>
				<Subtext>Video Flow Input Config Table Media Index</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6417" trending="true">
			<Name>videoFlowConfigTableInputMediaRedundancy</Name>
			<Description>Media Redundancy (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Media Redundancy</Text>
				<Subtext>Video Flow Input Config Table Media Redundancy</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6418" trending="false">
			<Name>videoFlowConfigTableInputInputName</Name>
			<Description>Input Name (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Input Name</Text>
				<Subtext>Video Flow Input Config Table Input Name</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6468" trending="false">
			<Name>videoFlowConfigTableInputInputName</Name>
			<Description>Input Name (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="6419" trending="true">
			<Name>videoFlowConfigTableInputIss2022_7</Name>
			<Description>Is S2022_7 (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Is S2022_7</Text>
				<Subtext>Video Flow Input Config Table Is S2022_7</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>true</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>false</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="6420" trending="true">
			<Name>videoFlowConfigTableInputPort</Name>
			<Description>Port (Video Flow Config)</Description>
			<Information>
				<Text>Video Flow Input Config Table Port</Text>
				<Subtext>Video Flow Input Config Table Port</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>5</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6470">
			<Name>videoFlowConfigTableInputPort</Name>
			<Description>Port (Video Flow Config)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>5</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="6421">
			<Name>videoFlowConfigTableInputBtnDisableFlow</Name>
			<Description>Video Disable Flow (Video Flow Config)</Description>
			<Information>
				<Text>Video Disable Flow</Text>
				<Subtext>Video Disable Flow</Subtext>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Disable</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<!-- Dummy inputs table used to provide DCF support -->
		<Param id="8000">
			<Name>inputsTable</Name>
			<Description>Inputs</Description>
			<Type>array</Type>
			<ArrayOptions index="0" options=";naming=/8002">
				<ColumnOption idx="0" pid="8001" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8002" type="retrieved" options="" />
				<ColumnOption idx="2" pid="8003" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>Dummy inputs table used to provide DCF support</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Inputs</Page>
						<Column>0</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8001|0-8002|1-8003|2,width:121-108-0,sort:STRING-STRING-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8001" trending="false">
			<Name>inputsTableIndex</Name>
			<Description>Index (Inputs)</Description>
			<Information>
				<Subtext>Input index.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8002" trending="false">
			<Name>inputsTableName</Name>
			<Description>Name [IDX] (Inputs)</Description>
			<Information>
				<Subtext>Input name</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8003" trending="false">
			<Name>inputsTableLastConfigurationResponse</Name>
			<Description>Last Configuration (Inputs)</Description>
			<Information>
				<Subtext>Input Configuration</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8400">
			<Name>flowsCondensedTableSelected</Name>
			<Description>Selected Flows</Description>
			<Type>array</Type>
			<ArrayOptions index="0" options=";naming=/8402">
				<ColumnOption idx="0" pid="8401" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8402" type="retrieved" options="" />
				<ColumnOption idx="2" pid="8403" type="retrieved" options="" />
				<ColumnOption idx="3" pid="8404" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="4" pid="8405" type="retrieved" options="" />
				<ColumnOption idx="5" pid="8406" type="retrieved" options="" />
				<ColumnOption idx="6" pid="8407" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="7" pid="8410" type="retrieved" options="" />
				<ColumnOption idx="8" pid="8411" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="9" pid="8412" type="retrieved" options="" />
				<ColumnOption idx="10" pid="8420" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="11" pid="8421" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="12" pid="8423" type="retrieved" options="" />
				<ColumnOption idx="13" pid="8424" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="14" pid="8425" type="retrieved" options="" />
				<ColumnOption idx="15" pid="8426" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="16" pid="8427" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="17" pid="8428" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="18" pid="8429" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>This table contains the selected condensed list of flows being analyzed by the device</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Input Status</Page>
						<Column>0</Column>
						<Row>11</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8401|0-8402|1-8403|2-8404|3-8405|4-8406|5-8407|6-8410|7-8411|8-8412|9-8420|10-8421|11-8423|12-8424|13-8425|14-8426|15-8427|16-8428|17-8429|18,width:100-100-100-100-100-100-111-100-100-100-100-100-100-100-0-111-146-134-122,sort:STRING-STRING-STRING-INT-STRING-STRING-INT-STRING-INT-STRING-INT-INT-STRING-INT-STRING-INT-INT-INT-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8401" trending="false">
			<Name>flowsCondensedTableSelectedIndex</Name>
			<Description>Index (Selected Flows)</Description>
			<Information>
				<Subtext>The index of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8402" trending="false">
			<Name>flowsCondensedTableSelectedName</Name>
			<Description>Name [IDX] (Selected Flows)</Description>
			<Information>
				<Subtext>The name of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8403" trending="false">
			<Name>flowsCondensedTableSelectedProtocol</Name>
			<Description>Protocol (Selected Flows)</Description>
			<Information>
				<Subtext>The protocol of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8404" trending="true">
			<Name>flowsCondensedTableSelectedBitrate</Name>
			<Description>Bitrate (Selected Flows)</Description>
			<Information>
				<Subtext>The bitrate of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-0.001">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>kbps</Units>
				<Decimals>5</Decimals>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8405" trending="true">
			<Name>flowsCondensedTableSelectedIsExpired</Name>
			<Description>Expired (Selected Flows)</Description>
			<Information>
				<Subtext>Has current flow expired?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8406" trending="false">
			<Name>flowsCondensedTableSelectedDestinationIp</Name>
			<Description>Destination IP (Selected Flows)</Description>
			<Information>
				<Subtext>The dst IP address of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8407" trending="true">
			<Name>flowsCondensedTableSelectedDestinationPort</Name>
			<Description>Destination Port (Selected Flows)</Description>
			<Information>
				<Subtext>The dst port of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8410" trending="false">
			<Name>flowsCondensedTableSelectedSourceIp</Name>
			<Description>Source IP (Selected Flows)</Description>
			<Information>
				<Subtext>The src IP address of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8411" trending="true">
			<Name>flowsCondensedTableSelectedSourcePort</Name>
			<Description>Source Port (Selected Flows)</Description>
			<Information>
				<Subtext>The src port of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<!-- SuppressValidator 2.9.7 No units for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<!-- /SuppressValidator 2.11.1 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8412" trending="false">
			<Name>flowsCondensedTableSelectedVlan</Name>
			<Description>VLAN (Selected Flows)</Description>
			<Information>
				<Subtext>The VLAN used by the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8420">
			<Name>flowsCondensedTableSelectedLinkDelay</Name>
			<Description>Link Delay (Selected Flows)</Description>
			<Information>
				<Subtext>The link delay.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>ns</Units>
				<Decimals>2</Decimals>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8421" trending="true">
			<Name>flowsCondensedTableSelectedPackets</Name>
			<Description>Packets (Selected Flows)</Description>
			<Information>
				<Subtext>Number of packets processed by this flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8423" trending="true">
			<Name>flowsCondensedTableSelectedIsPending</Name>
			<Description>Pending (Selected Flows)</Description>
			<Information>
				<Subtext>Is the current flow pending?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8424">
			<Name>flowsCondensedTableSelectedPit</Name>
			<Description>PIT (Selected Flows)</Description>
			<Information>
				<Subtext>The flow PIT.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>s</Units>
				<Decimals>4</Decimals>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8425" trending="true">
			<Name>flowsCondensedTableSelectedIsSelected</Name>
			<Description>Selected (Selected Flows)</Description>
			<Information>
				<Subtext>Is the current flow selected?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No Threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8426">
			<Name>flowsCondensedTableSelectedTotalBufferSize</Name>
			<Description>Total Buffer Size (Selected Flows)</Description>
			<Information>
				<Subtext>The flow total buffer size.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8427">
			<Name>flowsCondensedTableSelectedRtpMarkerFreq</Name>
			<Description>RTP Marker Frequency (Selected Flows)</Description>
			<Information>
				<Subtext>The RTP Marker Frequency.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Hz</Units>
				<Decimals>4</Decimals>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8428">
			<Name>flowsCondensedTableSelectedRtpSeqErrorCnt</Name>
			<Description>RTP Sequence Errors (Selected Flows)</Description>
			<Information>
				<Subtext>The RTP Sequence Errors.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8429" trending="false">
			<Name>flowsCondensedTableSelectedRtpMarkerStatus</Name>
			<Description>RTP Marker Status (Selected Flows)</Description>
			<Information>
				<Subtext>The RTP Marker Status.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No Threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8498" trending="true" save="true">
			<Name>condensendFlowsIndexToggleButton</Name>
			<Description>Flows Condensed Index</Description>
			<Type>read</Type>
			<Information>
				<Subtext>Selects the table index between 2 options: FlowID(Index) or FlowID(Port.Index)</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<DefaultValue>1</DefaultValue>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flows</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>FlowID(Index)</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>FlowID(Port).FlowID(Index)</Display>
						<Value>2</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8499" setter="true">
			<Name>condensendFlowsIndexToggleButton</Name>
			<Description>Flows Condensed Index</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flows</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>FlowID(Index)</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>FlowID(Port).FlowID(Index)</Display>
						<Value>2</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8500">
			<Name>flowsCondensedTable</Name>
			<Description>Flows Condensed</Description>
			<Type>array</Type>
			<ArrayOptions index="0" options=";naming=/8502">
				<ColumnOption idx="0" pid="8501" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8502" type="retrieved" options="" />
				<ColumnOption idx="2" pid="8503" type="retrieved" options="" />
				<ColumnOption idx="3" pid="8504" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="4" pid="8505" type="retrieved" options="" />
				<ColumnOption idx="5" pid="8506" type="retrieved" options="" />
				<ColumnOption idx="6" pid="8507" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="7" pid="8510" type="retrieved" options="" />
				<ColumnOption idx="8" pid="8511" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="9" pid="8512" type="retrieved" options="" />
				<ColumnOption idx="10" pid="8520" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="11" pid="8521" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="12" pid="8523" type="retrieved" options="" />
				<ColumnOption idx="13" pid="8524" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="14" pid="8525" type="retrieved" options="" />
				<ColumnOption idx="15" pid="8526" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="16" pid="8527" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="17" pid="8528" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="18" pid="8529" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>This table contains a condensed list of flows being analyzed by the device</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flows</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8501|0-8502|1-8503|2-8504|3-8505|4-8506|5-8507|6-8510|7-8511|8-8520|10-8521|11-8523|12-8524|13-8525|14-8526|15-8512|9-8527|16-8528|17-8529|18,width:100-104-100-100-100-117-130-100-104-100-100-100-100-100-131-112-146-134-122,sort:STRING-STRING-INT-INT-STRING-STRING-STRING-STRING-STRING-INT-INT-STRING-INT-STRING-INT-STRING-INT-INT-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8501" trending="false">
			<Name>flowsCondensedTableIndex</Name>
			<Description>Index (Flow Condensed)</Description>
			<Information>
				<Subtext>The index of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8502" trending="false">
			<Name>flowsCondensedTableName</Name>
			<Description>Name [IDX] (Flow Condensed)</Description>
			<Information>
				<Subtext>The name of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8503" trending="false">
			<Name>flowsCondensedTableProtocol</Name>
			<Description>Protocol (Flow Condensed)</Description>
			<Information>
				<Subtext>The protocol of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8504" trending="true">
			<Name>flowsCondensedTableBitrate</Name>
			<Description>Bitrate (Flow Condensed)</Description>
			<Information>
				<Subtext>The bitrate of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-0.001">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>kbps</Units>
				<Decimals>5</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8505" trending="true">
			<Name>flowsCondensedTableIsExpired</Name>
			<Description>Expired (Flow Condensed)</Description>
			<Information>
				<Subtext>Has current flow expired?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8506" trending="false">
			<Name>flowsCondensedTableDestinationIp</Name>
			<Description>Destination IP (Flow Condensed)</Description>
			<Information>
				<Subtext>The dst IP address of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8507" trending="true">
			<Name>flowsCondensedTableDestinationPort</Name>
			<Description>Destination Port (Flow Condensed)</Description>
			<Information>
				<Subtext>The dst port of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8510" trending="false">
			<Name>flowsCondensedTableSourceIp</Name>
			<Description>Source IP (Flow Condensed)</Description>
			<Information>
				<Subtext>The src IP address of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8511" trending="true">
			<Name>flowsCondensedTableSourcePort</Name>
			<Description>Source Port (Flow Condensed)</Description>
			<Information>
				<Subtext>The src port of the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8512" trending="false">
			<Name>flowsCondensedTableVlan</Name>
			<Description>VLAN (Flow Condensed)</Description>
			<Information>
				<Subtext>The VLAN used by the current flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="none">
						<Display state="disabled">None</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8520">
			<Name>flowsCondensedTableLinkDelay</Name>
			<Description>Link Delay (Flow Condensed)</Description>
			<Information>
				<Subtext>The link delay.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>ns</Units>
				<Decimals>2</Decimals>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8521" trending="true">
			<Name>flowsCondensedTablePackets</Name>
			<Description>Packets (Flow Condensed)</Description>
			<Information>
				<Subtext>Number of packets processed by this flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8523" trending="true">
			<Name>flowsCondensedTableIsPending</Name>
			<Description>Pending (Flow Condensed)</Description>
			<Information>
				<Subtext>Is the current flow pending?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8524">
			<Name>flowsCondensedTablePit</Name>
			<Description>PIT (Flow Condensed)</Description>
			<Information>
				<Subtext>The flow PIT.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>s</Units>
				<Decimals>4</Decimals>
			</Display>
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8525" trending="true">
			<Name>flowsCondensedTableIsSelected</Name>
			<Description>Selected (Flow Condensed)</Description>
			<Information>
				<Subtext>Is the current flow selected?</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No Threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>True</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>False</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8526">
			<Name>flowsCondensedTableTotalBufferSize</Name>
			<Description>Total Buffer Size (Flow Condensed)</Description>
			<Information>
				<Subtext>The flow total buffer size.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Packets</Units>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8527">
			<Name>flowsCondensedTableRtpMarkerFreq</Name>
			<Description>RTP Marker Frequency (Flow Condensed)</Description>
			<Information>
				<Subtext>The RTP Marker Frequency.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Hz</Units>
				<Decimals>4</Decimals>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8528">
			<Name>flowsCondensedTableRtpSeqErrorCnt</Name>
			<Description>RTP Sequence Errors (Flow Condensed)</Description>
			<Information>
				<Subtext>The RTP Sequence Errors.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.11.1 No Range for this parameter. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>Errors</Units>
			</Display>
			<!-- /SuppressValidator 2.11.1 -->
			<Alarm>
				<Monitored>true</Monitored>
				<Normal>0</Normal>
			</Alarm>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8529" trending="false">
			<Name>flowsCondensedTableRtpMarkerStatus</Name>
			<Description>RTP Marker Status (Flow Condensed)</Description>
			<Information>
				<Subtext>The RTP Marker Status.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
				<Exceptions>
					<Exception id="1" value="N/A">
						<Display state="disabled">N/A</Display>
						<Value>N/A</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.5.1 No Threshold for this parameter. -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8600">
			<Name>CreateFlowPageButton</Name>
			<Description />
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flows</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">pagebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Create Flow...</Display>
						<Value>Flow Creation</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8601" trending="false" save="true">
			<Name>CreateFlowInputId</Name>
			<Description>Input ID</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select which of the inputs should be used for the new flow.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>5</High>
				</Range>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9601" setter="true">
			<Name>CreateFlowInputId</Name>
			<Description>Input ID</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>5</High>
				</Range>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8602" trending="false" save="true">
			<Name>CreateFlowInputType</Name>
			<Description>Input Type</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select which flow type should be used for the new flow.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>SDI</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>S2022-6</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>S2022-7</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>ASPEN</Display>
						<Value>3</Value>
					</Discreet>
					<Discreet>
						<Display>S2110</Display>
						<Value>4</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9602" setter="true">
			<Name>CreateFlowInputType</Name>
			<Description>Input Type</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>SDI</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>S2022-6</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>S2022-7</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>ASPEN</Display>
						<Value>3</Value>
					</Discreet>
					<Discreet>
						<Display>S2110</Display>
						<Value>4</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8603" trending="false" save="true">
			<Name>CreateFlowName</Name>
			<Description>Flow Name</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select the name for the new flow.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="9603" setter="true">
			<Name>CreateFlowName</Name>
			<Description>Flow Name</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8604" trending="false" save="true">
			<Name>CreateFlowPort</Name>
			<Description>Flow Port</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select which port to use for the new flow.]]>
				</Subtext>
				<Includes>
					<Include>units</Include>
					<Include>time</Include>
					<Include>steps</Include>
					<Include>range</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9604" setter="true">
			<Name>CreateFlowPort</Name>
			<Description>Flow Port</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8605">
			<Name>Title_Begin_BasicFlowInformation</Name>
			<Description>Basic Flow Information</Description>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="begin;connect">title</Type>
			</Measurement>
		</Param>
		<Param id="8606">
			<Name>Title_End_BasicFlowInformation</Name>
			<Description />
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>7</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="end;connect">title</Type>
			</Measurement>
		</Param>
		<Param id="8607">
			<Name>CreateNewFlow</Name>
			<Description />
			<Information>
				<Subtext>
					<![CDATA[Clicking this button sends a message to the device with the currently configured parameters, to create the flow on the device.]]>
				</Subtext>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Message>This will send the configuration to the device, to create a new flow. Are you sure you want to continue?</Message>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>11</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="120">button</Type>
				<Discreets>
					<Discreet>
						<Display>Create Flow On Device</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8608">
			<Name>ContextMenuAvailableFlowConfigurationTable</Name>
			<Description>Context Menu Available For Flow Configuration Table</Description>
			<Type>fixed</Type>
			<Information>
				<Subtext>This parameter contains information regarding a context menu for the Flow Configuration Table.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>fixed</LengthType>
				<!--<Length>1</Length>-->
				<Value>The Flow Configuration Table has a customized right click / context menu available, which allows: adding, duplicating, and deleting flows.</Value>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8609" trending="false" save="true">
			<Name>CreateFlowRemoteMode</Name>
			<Description>Remote Mode</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select the type of remote mode available for the new flows.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<DefaultValue>0</DefaultValue>
				<Exceptions>
					<Exception id="1" value="0">
						<Display state="disabled">N/A</Display>
						<Value>0</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>5</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>IO Slave Source Remote Mode Off</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9609" setter="true">
			<Name>CreateFlowRemoteMode</Name>
			<Description>Remote Mode</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>5</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>IO Slave Source Remote Mode Off</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8610" trending="false" save="true">
			<Name>CreateFlowTransmitMode</Name>
			<Description>Transmit Mode</Description>
			<Information>
				<Subtext>
					<![CDATA[Allows the user to select the type of transmission mode available for the new flows.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<DefaultValue>0</DefaultValue>
				<Exceptions>
					<Exception id="1" value="0">
						<Display state="disabled">N/A</Display>
						<Value>0</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>6</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>NL</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9610" setter="true">
			<Name>CreateFlowTransmitMode</Name>
			<Description>Transmit Mode</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>6</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>NL</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8700">
			<Name>FlowConfigurationTable</Name>
			<Description>Flow Configuration</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="8701" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8702" type="retrieved" options=";save" />
				<ColumnOption idx="2" pid="8703" type="retrieved" options=";save" />
				<ColumnOption idx="3" pid="8704" type="retrieved" options=";save" />
				<ColumnOption idx="4" pid="8705" type="retrieved" options=";save" />
				<ColumnOption idx="5" pid="8706" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="6" pid="8707" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="7" pid="8708" type="retrieved" options=";save" />
				<ColumnOption idx="8" pid="8709" type="retrieved" options=";save" />
				<ColumnOption idx="9" pid="8710" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="10" pid="8711" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="11" pid="8712" type="retrieved" options=";save" />
				<ColumnOption idx="12" pid="8713" type="retrieved" options=";save" />
				<ColumnOption idx="13" pid="8714" type="retrieved" options=";save" />
			</ArrayOptions>
			<Information>
				<Subtext>
					<![CDATA[Contains the base configuration of a flow. More than one flow line can be added for a new flow.]]>
				</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>9</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8701|0-8702|1-8703|2-8704|3-8705|4-8706|5-8707|6-8708|7-8709|8-8710|9-8711|10-8712|11-8713|12-8714|13,width:113-100-100-100-100-100-100-100-100-100-100-115-100-100,sort:STRING-STRING-STRING-STRING-STRING-STRING-STRING-STRING-STRING-STRING-INT-STRING-STRING-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8701" trending="false">
			<Name>FlowConfigurationTableInstance</Name>
			<Description>Instance [IDX] (Flow Configuration)</Description>
			<Information>
				<Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8702" trending="false">
			<Name>FlowConfigurationTableMediaName</Name>
			<Description>Media Name (Flow Configuration)</Description>
			<Information>
				<Subtext>The name of the media contained in the flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="9702" setter="true">
			<Name>FlowConfigurationTableMediaName</Name>
			<Description>Media Name (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8703" trending="true">
			<Name>FlowConfigurationTableIgmpMode</Name>
			<Description>IGMP Mode (Flow Configuration)</Description>
			<Information>
				<Subtext>The way IGMP will behave, if used.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>When Selected</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9703" setter="true">
			<Name>FlowConfigurationTableIgmpMode</Name>
			<Description>IGMP Mode (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>When Selected</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8704" trending="true">
			<Name>FlowConfigurationTableIgmpVersion</Name>
			<Description>IGMP Version (Flow Configuration)</Description>
			<Information>
				<Subtext>The version of the IGMP used.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Version 1</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Version 2</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>Version 3</Display>
						<Value>3</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9704" setter="true">
			<Name>FlowConfigurationTableIgmpVersion</Name>
			<Description>IGMP Version (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Version 1</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Version 2</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>Version 3</Display>
						<Value>3</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8705" trending="true">
			<Name>FlowConfigurationTableIpVersion</Name>
			<Description>IP Version (Flow Configuration)</Description>
			<Information>
				<Subtext>The version of IP address used. It can be either IPv4 or IPv6.</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>IPv4</Display>
						<Value>4</Value>
					</Discreet>
					<Discreet>
						<Display>IPv6</Display>
						<Value>6</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9705" setter="true">
			<Name>FlowConfigurationTableIpVersion</Name>
			<Description>IP Version (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>IPv4</Display>
						<Value>4</Value>
					</Discreet>
					<Discreet>
						<Display>IPv6</Display>
						<Value>6</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8706" trending="true">
			<Name>FlowConfigurationTableVlanId</Name>
			<Description>VLAN ID (Flow Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The unique identifier for the VLAN.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
					<Include>time</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>4095</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9706" setter="true">
			<Name>FlowConfigurationTableVlanId</Name>
			<Description>VLAN ID (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>4095</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>-1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8707" trending="true">
			<Name>FlowConfigurationTablePid</Name>
			<Description>PID (Flow Configuration)</Description>
			<Information>
				<Subtext>The PID associated with the flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9707" setter="true">
			<Name>FlowConfigurationTablePid</Name>
			<Description>PID (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>9999</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>-1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8708" trending="true">
			<Name>FlowConfigurationTableStatus</Name>
			<Description>Status (Flow Configuration)</Description>
			<Information>
				<Subtext>Displays whether this flow is current active or not.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9708" setter="true">
			<Name>FlowConfigurationTableStatus</Name>
			<Description>Status (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8709" trending="false">
			<Name>FlowConfigurationTableFlowKey</Name>
			<Description>Flow Key (Flow Configuration)</Description>
			<Information>
				<Subtext>The key used in the flow.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="none">
						<Display state="disabled">N/A</Display>
						<Value>none</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="9709" setter="true">
			<Name>FlowConfigurationTableFlowKey</Name>
			<Description>Flow Key (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>none</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8710" trending="true">
			<Name>FlowConfigurationTableRtpType</Name>
			<Description>RTP Type (Flow Configuration)</Description>
			<Information>
				<Subtext>The type of RTP Payload, if RTP is being used.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>9999</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9710" setter="true">
			<Name>FlowConfigurationTableRtpType</Name>
			<Description>RTP Type (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>9999</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>-1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8711" trending="true">
			<Name>FlowConfigurationTableMediaIndex</Name>
			<Description>Media Index (Flow Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The unique identifier for the media on this flow.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9711" setter="true">
			<Name>FlowConfigurationTableMediaIndex</Name>
			<Description>Media Index (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8712" trending="true">
			<Name>FlowConfigurationTableMediaRedundancy</Name>
			<Description>Media Redundancy (Flow Configuration)</Description>
			<Information>
				<Subtext>Displays whether this flow is redundant or not.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9712" setter="true">
			<Name>FlowConfigurationTableMediaRedundancy</Name>
			<Description>Media Redundancy (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8713" trending="true">
			<Name>FlowConfigurationTableMediaType</Name>
			<Description>Media Type (Flow Configuration)</Description>
			<Information>
				<Subtext>Displays which type of media this flow contains.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Video</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Audio</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>Metadata</Display>
						<Value>3</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9713" setter="true">
			<Name>FlowConfigurationTableMediaType</Name>
			<Description>Media Type (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Video</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>Audio</Display>
						<Value>2</Value>
					</Discreet>
					<Discreet>
						<Display>Metadata</Display>
						<Value>3</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8714" trending="true">
			<Name>FlowConfigurationTableBitDepth</Name>
			<Description>Bit Depth (Flow Configuration)</Description>
			<Information>
				<Subtext>Displays the number of bits used for color.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>1 bit</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>8 bits</Display>
						<Value>8</Value>
					</Discreet>
					<Discreet>
						<Display>15 bits</Display>
						<Value>15</Value>
					</Discreet>
					<Discreet>
						<Display>16 bits</Display>
						<Value>16</Value>
					</Discreet>
					<Discreet>
						<Display>24 bits</Display>
						<Value>24</Value>
					</Discreet>
					<Discreet>
						<Display>30 bits</Display>
						<Value>30</Value>
					</Discreet>
					<Discreet>
						<Display>36 bits</Display>
						<Value>36</Value>
					</Discreet>
					<Discreet>
						<Display>48 bits</Display>
						<Value>48</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9714" setter="true">
			<Name>FlowConfigurationTableBitDepth</Name>
			<Description>Bit Depth (Flow Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>N/A</Display>
						<Value>-1</Value>
					</Discreet>
					<Discreet>
						<Display>1 bit</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>8 bits</Display>
						<Value>8</Value>
					</Discreet>
					<Discreet>
						<Display>15 bits</Display>
						<Value>15</Value>
					</Discreet>
					<Discreet>
						<Display>16 bits</Display>
						<Value>16</Value>
					</Discreet>
					<Discreet>
						<Display>24 bits</Display>
						<Value>24</Value>
					</Discreet>
					<Discreet>
						<Display>30 bits</Display>
						<Value>30</Value>
					</Discreet>
					<Discreet>
						<Display>36 bits</Display>
						<Value>36</Value>
					</Discreet>
					<Discreet>
						<Display>48 bits</Display>
						<Value>48</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8750">
			<Name>FlowIpConfigurationTable</Name>
			<Description>Flow IP Configuration</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="8751" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8752" type="retrieved" options=";save" />
				<ColumnOption idx="2" pid="8753" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="3" pid="8754" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="4" pid="8755" type="retrieved" options=";save" />
				<ColumnOption idx="5" pid="8756" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="6" pid="8757" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="7" pid="8758" type="retrieved" options=";save" />
				<ColumnOption idx="8" pid="8759" type="retrieved" options=";save;disableHeaderSum;disableHistogram;disableHeatmap" />
				<ColumnOption idx="9" pid="8760" type="retrieved" options=";save" />
				<ColumnOption idx="10" pid="8761" type="retrieved" options=";save" />
			</ArrayOptions>
			<Information>
				<Subtext>Contains the configuration of source and destination IP&#39;s for each flow.</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Flow Creation</Page>
						<Column>0</Column>
						<Row>10</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8751|0-8752|1-8753|2-8754|3-8755|4-8756|5-8757|6-8758|7-8759|8-8760|9-8761|10,width:218-100-100-109-100-100-100-100-100-100-100,sort:STRING-STRING-STRING-INT-STRING-STRING-INT-STRING-INT-STRING-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8751" trending="false">
			<Name>FlowIpConfigurationTableInstance</Name>
			<Description>Instance [IDX] (IP Configuration)</Description>
			<Information>
				<Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8752" trending="false">
			<Name>FlowIpConfigurationTableDestinationIp</Name>
			<Description>Destination IP (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The IP address where the flow will be sent to.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="9752" setter="true">
			<Name>FlowIpConfigurationTableDestinationIp</Name>
			<Description>Destination IP (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8753" trending="true">
			<Name>FlowIpConfigurationTableDestinationPort</Name>
			<Description>Destination Port (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The port that will be receiving the flow.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9753" setter="true">
			<Name>FlowIpConfigurationTableDestinationPort</Name>
			<Description>Destination Port (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8754" trending="true">
			<Name>FlowIpConfigurationTableDestinationPrefix</Name>
			<Description>Destination Prefix (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The network prefix that will be used with the IP.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9754" setter="true">
			<Name>FlowIpConfigurationTableDestinationPrefix</Name>
			<Description>Destination Prefix (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8755" trending="false">
			<Name>FlowIpConfigurationTableSourceIp</Name>
			<Description>Source IP (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The IP Address where the flow will originate from. It doesn't need to be specified, "any" source IP can be selected.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9755" setter="true">
			<Name>FlowIpConfigurationTableSourceIp</Name>
			<Description>Source IP (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8756" trending="true">
			<Name>FlowIpConfigurationTableSourcePort</Name>
			<Description>Source Port (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The port where the flow will originate from. It doesn't need to be specified, "any" source can be selected.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9756" setter="true">
			<Name>FlowIpConfigurationTableSourcePort</Name>
			<Description>Source Port (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>1</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
				<Discreets>
					<Discreet>
						<Display>Any</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8757" trending="true">
			<Name>FlowIpConfigurationTableSourcePrefix</Name>
			<Description>Source Prefix (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The network prefix that will be used with the IP.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9757" setter="true">
			<Name>FlowIpConfigurationTableSourcePrefix</Name>
			<Description>Source Prefix (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8758" trending="true">
			<Name>FlowIpConfigurationTablePhysicalPort</Name>
			<Description>Physical Port (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[Whether a specific physical port will be used or not.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9758" setter="true">
			<Name>FlowIpConfigurationTablePhysicalPort</Name>
			<Description>Physical Port (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8759" trending="true">
			<Name>FlowIpConfigurationTablePhysicalPortId</Name>
			<Description>Physical Port ID (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The physical port ID to be used.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="9759" setter="true">
			<Name>FlowIpConfigurationTablePhysicalPortId</Name>
			<Description>Physical Port ID (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.9.7 Not applicable. -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>65535</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="8760" trending="true">
			<Name>FlowIpConfigurationTableSubType</Name>
			<Description>Port Sub Type (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The subtype of physical port used.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>IP SFP+</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9760" setter="true">
			<Name>FlowIpConfigurationTableSubType</Name>
			<Description>Port Sub Type (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>IP SFP+</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8761" trending="true">
			<Name>FlowIpConfigurationTableType</Name>
			<Description>Port Type (Flow IP Configuration)</Description>
			<Information>
				<Subtext>
					<![CDATA[The type of port used.]]>
				</Subtext>
				<Includes>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>time</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Logical</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="9761" setter="true">
			<Name>FlowIpConfigurationTableType</Name>
			<Description>Port Type (Flow IP Configuration)</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Logical</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8799">
			<Name>FlowConfigurationTable_ContextMenu</Name>
			<Description>Flowconfigurationtable Contextmenu</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet dependencyValues="8702;8703;8704;8705;8706;8707;8708;8709;8710;8711;8712;8713;8752;8753;8754;8755;8756;8757">
						<Display>Add new flow...</Display>
						<Value>add</Value>
					</Discreet>
					<Discreet options="table:selection">
						<Display>Duplicate selected flow(s)...</Display>
						<Value>duplicate</Value>
					</Discreet>
					<Discreet options="separator">
						<Display />
						<Value />
					</Discreet>
					<Discreet options="table:selection">
						<Display>Delete selected flow(s)...</Display>
						<Value>delete</Value>
					</Discreet>
					<Discreet>
						<Display>Clear table...</Display>
						<Value>clear</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8800">
			<Name>PresetGroupsTable</Name>
			<Description>Preset Groups</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="8801" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8802" type="retrieved" options="" />
				<ColumnOption idx="2" pid="8803" type="retrieved" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>tableInformation</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>6</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8801|0-8802|1-8803|2,width:113-100-100,sort:STRING-STRING-STRING,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8801" trending="false">
			<Name>PresetGroupsInstance</Name>
			<Description>Instance [IDX] (Preset Groups)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8802" trending="false">
			<Name>PresetGroupsGroupLetter</Name>
			<Description>Group Letter (Preset Groups)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The letter of the group.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8803" trending="false">
			<Name>PresetGroupsGroupName</Name>
			<Description>Group Name (Preset Groups)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The name of the group.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8850">
			<Name>PresetsTable</Name>
			<Description>Presets</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="8851" type="retrieved" options="" />
				<ColumnOption idx="1" pid="8852" type="retrieved" options="" />
				<ColumnOption idx="2" pid="8853" type="retrieved" options=";foreignKey=8800" />
				<ColumnOption idx="3" pid="8854" type="retrieved" options="" />
				<ColumnOption idx="4" pid="8855" type="retrieved" options=";disableHeaderSum;disableHistogram;disableHeatmap" />
			</ArrayOptions>
			<Information>
				<Subtext>tableInformation</Subtext>
			</Information>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Presets</Page>
						<Column>0</Column>
						<Row>10</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:8851|0-8852|1-8853|2-8854|3-8855|4,width:113-100-100-100-0,sort:STRING-STRING-STRING-STRING-INT,lines:25,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="8851" trending="false">
			<Name>PresetsInstance</Name>
			<Description>Instance [IDX] (Presets)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>This is the key used internally by DataMiner to identify the table entries.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8852" trending="false">
			<Name>PresetsName</Name>
			<Description>Name (Presets)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The name of the preset.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8853" trending="false">
			<Name>PresetsGroup</Name>
			<Description>Group (Presets)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The group of the preset.</Subtext>
			</Information>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
				<Exceptions>
					<Exception id="1" value="-1">
						<Display state="disabled">N/A</Display>
						<Value>-1</Value>
					</Exception>
				</Exceptions>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="8854" trending="false">
			<Name>PresetsLoadPreset</Name>
			<Description>Load (Presets)</Description>
			<Information>
				<Subtext>Load preset into device.</Subtext>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<LengthType>next param</LengthType>
				<Type>double</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet options=";disabled=8855,0,\empty">
						<Display>Load Preset</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="8855" trending="true">
			<Name>PresetsInitialized</Name>
			<Description>Initialized (Presets)</Description>
			<Type>read</Type>
			<Information>
				<Subtext>The state of the preset.</Subtext>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<!-- SuppressValidator 2.5.1 Unable to define default thresholds -->
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<!-- /SuppressValidator 2.5.1 -->
			<!-- SuppressValidator 2.9.7 Unable to define units -->
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>1</High>
				</Range>
			</Display>
			<!-- /SuppressValidator 2.9.7 -->
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<!--Dummies and placeholders-->
		<!--Used to fill the HTTP headers-->
		<Param id="10000">
			<Name>PollingIPDummy</Name>
			<Description>PollingIP</Description>
			<Type>pollingip</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10005" trending="false">
			<Name>httpStatusCodeDummy</Name>
			<Description>HTTP Status Code</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<!-- Input configure set queues per input -->
		<Param id="10150" trending="false">
			<Name>inputConfigureSetQueue0</Name>
			<Description>The queue of the set requests for input 0</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10151" trending="false">
			<Name>inputConfigureSetQueue1</Name>
			<Description>The queue of the set requests for input 1</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10152" trending="false">
			<Name>inputConfigureSetQueue2</Name>
			<Description>The queue of the set requests for input 2</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10153" trending="false">
			<Name>inputConfigureSetQueue3</Name>
			<Description>The queue of the set requests for input 3</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10154" trending="false">
			<Name>inputConfigureSetQueue4</Name>
			<Description>The queue of the set requests for input 4</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="10155" trending="false">
			<Name>inputConfigureSetQueue5</Name>
			<Description>The queue of the set requests for input 5</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<!-- Input configure queue processing dummies -->
		<Param id="12650" trending="false">
			<Name>writeInputConfigure0QueueProcess</Name>
			<Description>Write Input Configure 0 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12651" trending="false">
			<Name>writeInputConfigure1QueueProcess</Name>
			<Description>Write Input Configure 1 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12652" trending="false">
			<Name>writeInputConfigure2QueueProcess</Name>
			<Description>Write Input Configure 2 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12653" trending="false">
			<Name>writeInputConfigure3QueueProcess</Name>
			<Description>Write Input Configure 3 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12654" trending="false">
			<Name>writeInputConfigure4QueueProcess</Name>
			<Description>Write Input Configure 4 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12655" trending="false">
			<Name>writeInputConfigure5QueueProcess</Name>
			<Description>Write Input Configure 5 Queue Process</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<Param id="12656" trending="false">
			<Name>updateActiveInputList</Name>
			<Description>Update Active Input List</Description>
			<Type>dummy</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
		</Param>
		<!--DCFHelper Mapping Parameters-->
		<Param id="63993" trending="false">
			<Name>MAP_StartupElements</Name>
			<Description>MAP_StartupElements</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
		</Param>
		<Param id="63999" trending="false" save="true">
			<Name>MAP_InterfaceProperties</Name>
			<Description>MAP_InterfaceProperties</Description>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
		</Param>
	</Params>
	<QActions>
		<QAction id="63000" encoding="csharp" name="** Auto-generated Class Library **" options="precompile" dllImport="System.Runtime.Serialization.dll;System.Xml.dll">
			<![CDATA[// --- auto-generated code --- do not modify ---

/*
{{StartPackageInfo}}
<PackageInfo xmlns="http://www.skyline.be/ClassLibrary">
	<BasePackage>
		<Identity>
			<Name>Class Library</Name>
			<Version>1.1.2.16</Version>
		</Identity>
	</BasePackage>
	<CustomPackages>
		<Package>
			<Identity>
				<Name>Utility Library</Name>
				<Version>1.0.0.9</Version>
			</Identity>
		</Package>
	</CustomPackages>
</PackageInfo>
{{EndPackageInfo}}
*/

namespace Skyline.DataMiner.Library
{
    namespace Common.Attributes
    {
        /// <summary>
        /// This attribute indicates a DLL is required.
        /// </summary>
        [System.AttributeUsage(System.AttributeTargets.All, AllowMultiple = true)]
        public sealed class DllImportAttribute : System.Attribute
        {
            /// <summary>
            /// Initializes a new instance of the <see cref = "DllImportAttribute"/> class.
            /// </summary>
            /// <param name = "dllImport">The name of the DLL to be imported.</param>
            public DllImportAttribute(string dllImport)
            {
                DllImport = dllImport;
            }

            /// <summary>
            /// Gets the name of the DLL to be imported.
            /// </summary>
            public string DllImport
            {
                get;
                private set;
            }
        }
    }

    namespace Protocol
    {
        /// <summary>
        /// Class with <see cref = "SLProtocol"/> extension methods.
        /// </summary>
        [Skyline.DataMiner.Library.Common.Attributes.DllImport("QActionHelperBaseClasses.dll")]
        public static class SLProtocolExtensionMethods
        {
            /// <summary>
            /// Gets two columns from a table and returns an array with the given selector.
            /// </summary>
            /// <typeparam name = "T1">Type of the first Column.</typeparam>
            /// <typeparam name = "T2">Type of the second Column.</typeparam>
            /// <typeparam name = "TReturn">Type of the return value.</typeparam>
            /// <param name = "protocol"><see cref = "SLProtocol"/> instance used to communicate with DataMiner.</param>
            /// <param name = "tableId">Id of the Table.</param>
            /// <param name = "columnsIdx">Array with the Columns Indexes.</param>
            /// <param name = "returnSelector">A function to map each column element to a return element.</param>
            /// <returns>An <see cref = "IEnumerable{T}"/> of <typeparamref name = "TReturn"/> with the desired columns.</returns>
            /// <exception cref = "ArgumentOutOfRangeException">
            /// Number of columns doesn't match the number of returned members.
            /// </exception>
            public static System.Collections.Generic.IEnumerable<TReturn> GetColumns<T1, T2, TReturn>(this Skyline.DataMiner.Scripting.SLProtocol protocol, int tableId, uint[] columnsIdx, System.Func<T1, T2, TReturn> returnSelector)
                where T1 : System.IConvertible where T2 : System.IConvertible
            {
                if (protocol == null)
                {
                    throw new System.ArgumentNullException("protocol");
                }

                if (columnsIdx == null)
                {
                    throw new System.ArgumentNullException("columnsIdx");
                }

                if (returnSelector == null)
                {
                    throw new System.ArgumentNullException("returnSelector");
                }

                if (columnsIdx.Length != 2)
                {
                    throw new System.ArgumentOutOfRangeException("columnsIdx", "Number of columns has to be 2");
                }

                var columns = (object[])protocol.NotifyProtocol(321, tableId, columnsIdx);
                for (var i = 0; i < ((object[])columns[0]).Length; i++)
                {
                    yield return returnSelector(Skyline.DataMiner.Library.MiscExtensions.ChangeType<T1>(((object[])columns[0])[i]), Skyline.DataMiner.Library.MiscExtensions.ChangeType<T2>(((object[])columns[1])[i]));
                }
            }
        }
    }

    /// <summary>
    /// Class is Miscellaneous Extension methods.
    /// </summary>
    [Skyline.DataMiner.Library.Common.Attributes.DllImport("System.Runtime.Serialization.dll")]
    [Skyline.DataMiner.Library.Common.Attributes.DllImport("System.Xml.dll")]
    public static class MiscExtensions
    {
        private static readonly System.Type DateTimeType = typeof(System.DateTime);
        /// <summary>
        /// Converts an object to the desired type.
        /// </summary>
        /// <typeparam name = "T">Type of the result.</typeparam>
        /// <param name = "obj">Object to convert.</param>
        /// <returns>The converted object.</returns>
        /// <exception cref = "InvalidCastException">This conversion is not supported. Or <paramref name = "obj"/> does not implement the <see cref = "IConvertible"/> interface.</exception>
        /// <exception cref = "FormatException"><paramref name = "obj"/> is not in a format rmecognized by conversionType.</exception>
        /// <exception cref = "OverflowException"><paramref name = "obj"/> represents a number that is out of the range of conversionType.</exception>
        public static T ChangeType<T>(this object obj)
            where T : System.IConvertible
        {
            if (obj == null)
            {
                return default(T);
            }

            var type = typeof(T);
            if (type.IsEnum)
            {
                return (T)System.Enum.ToObject(type, Skyline.DataMiner.Library.MiscExtensions.ChangeType<int>(obj));
            }
            else if (type == DateTimeType)
            {
                var oadate = System.Convert.ToDouble(obj);
                if (!Skyline.DataMiner.Library.MiscExtensions.InRange(oadate, -657435.0, 2958465.99999999))
                {
                    throw new System.OverflowException(string.Format("{0} is not a valid OA Date, supported range -657435.0 to 2958465.99999999", obj));
                }

                object date = System.DateTime.FromOADate(oadate);
                return (T)date;
            }
            else
            {
                return (T)System.Convert.ChangeType(obj, type);
            }
        }

        /// <summary>
        /// Checks if a values is inside an interval.
        /// </summary>
        /// <typeparam name = "T">Type of the value.</typeparam>
        /// <param name = "value">Value to check.</param>
        /// <param name = "fromInclusive">Lower Range, inclusive value.</param>
        /// <param name = "toInclusive">High Range, inclusive value.</param>
        /// <returns>True if the value is between the given interval; otherwise false.</returns>
        /// <exception cref = "ArgumentNullException">If <paramref name = "value"/> is null.</exception>
        public static bool InRange<T>(this T value, T fromInclusive, T toInclusive)
            where T : System.IComparable
        {
            if (value == null)
            {
                throw new System.ArgumentNullException("value");
            }

            return value.CompareTo(fromInclusive) >= 0 && value.CompareTo(toInclusive) <= 0;
        }
    }
}]]>
		</QAction>
		<QAction id="64000" name="DCFHelper" encoding="csharp" options="precompile" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[// <auto-generated />
// #define debug

namespace ProtocolDCF
{
	using System;
	using System.Collections.Generic;
	using System.Diagnostics.CodeAnalysis;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Text;
	using Interop.SLDms;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Scripting;

	/*
* 13/02/2015	1.0.0.1		JST, Skyline	Initial Version
* 04/03/2015	1.0.0.2		JST, Skyline	DCFHelper Fix: EndOfPolling wasn't cleaning up connections unless it also detected different Interfaces.
* 02/08/2015	1.0.0.3		JST, Skyline	New Features: New GetInterfaces  new SaveConnections, Saving Fixed Connections,  General Fixes and Efficiency improvements
* 23/02/2016	1.0.0.4		JST, Skyline	Fixed issues with String.Format in exceptionLogging
* 23/09/2016   1.0.0.5     JST, Skyline    *External Elements and DVE's that are detected as 'not active' will no longer cause the DCFHelper to stop. They are instead added to an unloadedElements list.
*											*Adding a Property to an external connection adds that property to both connections
* 04/10/2016	1.0.0.6		JST, Skyline	Added Support for Connection Filters (Client-Side Filtering using Filter column)
* 21/10/2016	1.0.0.7		JST, Skyline	New Features: Find Interface based on a Property it has.
* 02/12/2016	1.0.0.8		JST, Skyline	DCFHelper Fix: Requesting Stand-Alone interfaces failed with GetInterfaces
* 13/02/2018	1.0.0.9		JST, Skyline	Refactor to match new Code Conventions
* 12/10/2018	1.0.0.10	JST, Skyline	Fix: Adding Properties to external connections tried to always add on the return connection regardless of provided option.
* 
* Important Note: StyleCop rules SA1307 and SA1401 concerning the usage of public fields cannot be fixed. This is due to reverse compatibility issue. 
*/
	#region Enumerations

	/// <summary>
	/// SaveConnectionType indicates how to find previous connections and figure out if a new connection needs to update an old one or simply get added.
	/// </summary>
	public enum SaveConnectionType
	{
		/// <summary>
		/// Indicates that the Source Interface can only have a single Connection.
		/// </summary>
		Unique_Source,

		/// <summary>
		/// Indicates that the Destination Interface can only have a single Connection.
		/// </summary>
		Unique_Destination,

		/// <summary>
		/// Indicates that the name of a connection is Unique.
		/// </summary>
		Unique_Name,

		/// <summary>
		/// Indicates that there can only be a single connection between a single source and destination interface.
		/// </summary>
		Unique_SourceAndDestination,

		///// <summary>
		///// Indicates that there can only be a single connection that has a specific property assigned to it.
		///// </summary>
		/////Unique_Property
	}

	/// <summary>
	/// HelperType option is by default Custom.
	/// </summary>
	public enum SyncOption
	{
		/// <summary>
		/// This will update the currentMapping every time a remove or add is performed.
		/// </summary>
		Custom,

		/// <summary>
		/// Can be used when you received part of the whole DCF structure from a device and wish to keep track of it until the end of a buffer.
		/// </summary>
		PollingSync,

		/// <summary>
		///  Can be used when you have received and parsed all the data from a device and wish to automatically remove data you didn't  receiving during the refresh.
		/// </summary>
		EndOfPolling
	}

	#endregion Enumerations

	#region Structs

	public struct DCFSaveConnectionProperty
	{
		private bool async;
		private bool fixedProperty;
		private bool full;
		private string name;

		private bool addToExternalConnection;

		private string type;

		private string value;

		public DCFSaveConnectionProperty(string name, string type, string value, bool full = false, bool fixedProperty = false, bool addToExternalConnection = true, bool async = true)
		{
			this.name = name;
			this.type = type;
			this.value = value;
			this.full = full;
			this.fixedProperty = fixedProperty;
			this.addToExternalConnection = addToExternalConnection;
			this.async = async;
		}

		public DCFSaveConnectionProperty(ConnectivityConnectionProperty property, bool full = false, bool fixedProperty = false, bool addToExternalConnection = true, bool async = true)
			: this(property.ConnectionPropertyName, property.ConnectionPropertyType, property.ConnectionPropertyValue, full, fixedProperty, addToExternalConnection, async)
		{
		}

		public bool Async
		{
			get { return async; }
		}

		public bool FixedProperty
		{
			get { return fixedProperty; }
		}

		public bool Full
		{
			get { return full; }
		}

		public string Name
		{
			get { return name; }
		}

		public bool OnBothConnections
		{
			get { return addToExternalConnection; }
		}

		public string Type
		{
			get { return type; }
		}

		public string Value
		{
			get { return this.value; }
		}
	}

	#endregion Structs

	#region Classes

	/// <summary>
	/// Objects of this class represent a unique Interface, specified by it's ParameterGroupID. In case of a table, the Key of the table must also be specified. In case of external element, the elementKey (DmaID/EleID) must also be specified.
	/// </summary>
	public class DCFDynamicLink
	{
		private bool custom;
		private string elementKey;
		private bool getAll = false;
		private string interfaceName;
		private int parameterGroupID;
		private PropertyFilter propertyFilter = null;
		private string tableKey;

		// gets all the interfaces
		public DCFDynamicLink(string elementKey, PropertyFilter propertyFilter = null)
		{
			this.elementKey = elementKey;
			this.getAll = true;
			this.PropertyFilter = propertyFilter;
		}

		// PropertyFilter
		public DCFDynamicLink(PropertyFilter propertyFilter = null) : this("local", propertyFilter)
		{
		}

		// Gets interfaces based on the name
		public DCFDynamicLink(string interfaceName, string elementKey, bool customName = false, PropertyFilter propertyFilter = null)
		{
			this.interfaceName = interfaceName;
			this.elementKey = elementKey;
			this.custom = customName;
			this.PropertyFilter = propertyFilter;
		}

		public DCFDynamicLink(string interfaceName, bool customName = false, PropertyFilter propertyFilter = null) : this(interfaceName, "local", customName, propertyFilter)
		{
		}

		public DCFDynamicLink(string interfaceName, int dmaID, int eleID, bool customName = false, PropertyFilter propertyFilter = null) : this(interfaceName, dmaID + "/" + eleID, customName, propertyFilter)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFDynamicLink"/> class. Creates a DCFDynamicLink object that links to a single Interface on the DataMiner System.
		/// </summary>
		/// <param name="parameterGroupID">ParameterGroup that creates the Interface.</param>
		/// <param name="propertyFilter">Allows an additional filter.</param>
		public DCFDynamicLink(int parameterGroupID, PropertyFilter propertyFilter = null) : this(parameterGroupID, null, "local", propertyFilter)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFDynamicLink"/> class. It links to a single Interface on the DataMiner System (for tables, see the constructor with tableKey).
		/// </summary>
		/// <param name="parameterGroupID">ParameterGroup that creates the Interface.</param>
		/// <param name="dmaID">DMAId of the Element Containing the Interface.</param>
		/// <param name="eleID">EleId of the Element Containing the Interface.</param>
		/// <param name="propertyFilter">Allows an additional filter.</param>
		public DCFDynamicLink(int parameterGroupID, int dmaID, int eleID, PropertyFilter propertyFilter = null) : this(parameterGroupID, null, dmaID + "/" + eleID, propertyFilter)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFDynamicLink"/> class. Itt links to a single Interface on the DataMiner System.
		/// </summary>
		/// <param name="parameterGroupID">ParameterGroup that creates the Interface.</param>
		/// <param name="tableKey">Key of the row that creates an Interface, enter * to retrieve the whole table.</param>
		/// <param name="propertyFilter">Allows an additional filter.</param>
		public DCFDynamicLink(int parameterGroupID, string tableKey, PropertyFilter propertyFilter = null) : this(parameterGroupID, tableKey, "local", propertyFilter)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFDynamicLink"/> class. It links to a single Interface on the DataMiner System.
		/// </summary>
		/// <param name="parameterGroupID">ParameterGroup that creates the Interface.</param>
		/// <param name="tableKey">Key of the row that creates an Interface, enter * to retrieve the whole table.</param>
		/// <param name="elementKey">DmaID/EleID of the element where the Interface is found.</param>
		/// <param name="propertyFilter">Allows an additional filter.</param>
		public DCFDynamicLink(int parameterGroupID, string tableKey, string elementKey, PropertyFilter propertyFilter = null)
		{
			this.parameterGroupID = parameterGroupID;
			this.tableKey = tableKey;
			this.elementKey = elementKey;
			this.PropertyFilter = propertyFilter;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFDynamicLink"/> class. It links to a single Interface on the DataMiner System.
		/// </summary>
		/// <param name="parameterGroupID">ParameterGroup that creates the Interface.</param>
		/// <param name="tableKey">Key of the row that creates an Interface, enter * to retrieve the whole table.</param>
		/// <param name="dmaID">DMAId of the Element Containing the Interface.</param>
		/// <param name="eleID">EleId of the Element Containing the Interface.</param>
		/// <param name="propertyFilter">Allows an additional filter.</param>
		public DCFDynamicLink(int parameterGroupID, string tableKey, int dmaID, int eleID, PropertyFilter propertyFilter = null) : this(parameterGroupID, tableKey, dmaID + "/" + eleID, propertyFilter)
		{
		}

		public bool Custom
		{
			get { return custom; }
		}

		public string ElementKey
		{
			get { return elementKey; }
		}

		public bool GetAll
		{
			get { return getAll; }
		}

		public string InterfaceName
		{
			get { return interfaceName; }
		}

		public int ParameterGroupID
		{
			get { return parameterGroupID; }
		}

		public PropertyFilter PropertyFilter
		{
			get { return propertyFilter; }
			set { propertyFilter = value; }
		}

		public string TableKey
		{
			get { return tableKey; }
		}
	}

	/// <summary>
	/// Contains The Result from a GetInterfaces Query. If a specific DCFDynamicLink was not found then this object will be null.
	/// </summary>
	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DCFDynamicLinkResult
	{
		public ConnectivityInterface[] allInterfaces;
		public ConnectivityInterface firstInterface;
		public DCFDynamicLink link;

		public DCFDynamicLinkResult(DCFDynamicLink link, ConnectivityInterface[] allInterfaces)
		{
			this.link = link;
			if (allInterfaces != null && allInterfaces.Length > 0)
			{
				this.allInterfaces = allInterfaces;
				this.firstInterface = allInterfaces[0];
			}
			else
			{
				this.allInterfaces = new ConnectivityInterface[0];
				this.firstInterface = null;
			}
		}
	}

	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DCFHelper : IDisposable
	{
		#region Fields

		// Key = connectivityConnection.ConnectionId + "-" + connectivityConnection.SourceDataMinerId + "/" + connectivityConnection.SourceElementId;
		public Dictionary<string, Dictionary<string, ConnectivityConnectionProperty>> connectionProperties = new Dictionary<string, Dictionary<string, ConnectivityConnectionProperty>>();

		// Key = input.InterfaceId + "-" + input.DataMinerId + "/" + input.ElementId;
		public Dictionary<string, Dictionary<string, ConnectivityConnection>> connections = new Dictionary<string, Dictionary<string, ConnectivityConnection>>();

		// Key = connectivityInterface.InterfaceId + "-" + connectivityInterface.ElementKey
		public Dictionary<string, Dictionary<string, ConnectivityInterfaceProperty>> interfaceProperties = new Dictionary<string, Dictionary<string, ConnectivityInterfaceProperty>>();

		public Dictionary<string, FastCollection<ConnectivityInterface>> interfaces = new Dictionary<string, FastCollection<ConnectivityInterface>>();

		// These methods all use a custom column to be defined in all Interface Generating Tables. This Custom Column should contain a unique value across the whole driver that can then be used to quickly get the Interface Object or create connections without needing to use the Name Description or Key
		// Internal Mapping for SearchValue
		public Dictionary<string, ConnectivityInterface> interfacesSV = new Dictionary<string, ConnectivityInterface>();

		private HashSet<string> cachedTables = new HashSet<string>();
		private int cConnectionPropPID = -1;
		private int cConnectionsPID = -1;
		private int cInterfacePropPID = -1;
		private Dictionary<string, HashSet<int>> currentConnectionProperties = new Dictionary<string, HashSet<int>>();
		private Dictionary<string, HashSet<int>> currentConnections = new Dictionary<string, HashSet<int>>();
		private Dictionary<string, HashSet<int>> currentInterfaceProperties = new Dictionary<string, HashSet<int>>();
		private SyncOption helperType;
		private Dictionary<string, FastCollection<ConnectivityInterfaceProperty>> interfacePropertiesPerElement = new Dictionary<string, FastCollection<ConnectivityInterfaceProperty>>();
		private int localDMAID;
		private int localEleID;
		private string localElementKey;

		// Key: dmaid/eleid  Value: FastCollection of ConnectivityConnections
		private Dictionary<string, FastCollection<ConnectivityConnection>> map_AllConnections = new Dictionary<string, FastCollection<ConnectivityConnection>>();

		private int newConnectionPropPID = -1;
		private int newConnectionsPID = -1;
		private Dictionary<string, HashSet<int>> newConnectionProperties = new Dictionary<string, HashSet<int>>();
		private Dictionary<string, HashSet<int>> newConnections = new Dictionary<string, HashSet<int>>();
		private Dictionary<string, HashSet<int>> newInterfaceProperties = new Dictionary<string, HashSet<int>>();
		private int newInterfacePropID = -1;
		private SLProtocol protocol;
		private HashSet<string> unloadedElements = new HashSet<string>();

		#endregion Fields

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheckPID">Indicates a Parameter (saved="false") ID that will hold a mapping to indicate if a StartupCheck was already performed for a specific element (main/DVE or External).</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="dves">An array of DVEColumn objects identifying all 'element' columns of DVE Tables that also export Interfaces that will be used by the DCFHelper.</param>
		/// <param name="externalElements">An array of External Elements that will be used by the DCFHelper and need a Startup check.</param>
		public DCFHelper(SLProtocol protocol, int startupCheckPID, DCFMappingOptions options, DVEColumn[] dves, ExternalElement[] externalElements)
		{
			this.protocol = protocol;
			helperType = options.HelperType;
			localDMAID = protocol.DataMinerID;
			localEleID = protocol.ElementID;
			localElementKey = localDMAID + "/" + localEleID;

			if (startupCheckPID == -1)
			{
				// StartupCheck == TRUE
				// wait on SLElement to finish starting up.
#if debug
				protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: Main Element", LogType.Allways, LogLevel.NoLogging);
#endif
				if (!IsElementStarted(protocol, localDMAID, localEleID, 360))
				{
					protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) Value {1} at DCFHelper with ERROR:{2}", protocol.QActionID, "Main Element", "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
					throw new Exception("DCFHelper Failed to Initialize: Main Element Not Started");
				}

				if (externalElements != null)
				{
					// Wait on all external Elements to startup
					foreach (var externalElement in externalElements)
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: External Element " + externalElement.elementKey, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!IsElementStarted(protocol, externalElement.dmaID, externalElement.eleID, externalElement.timeoutTime))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) Value {1} at DCFHelper for External Element:{2} with ERROR:{3}", protocol.QActionID, "External Element", externalElement.elementKey, "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
							unloadedElements.Add(externalElement.elementKey);
						}
					}
				}

				if (dves != null)
				{
					// Wait on all dves to startup
					foreach (var dveColumn in dves)
					{
						object[] columns = (Object[])protocol.NotifyProtocol(321 /*NT_GT_TABLE_COLUMNS*/, dveColumn.tablePID, new UInt32[] { Convert.ToUInt32(dveColumn.columnIDX) });
						object[] elementKeys = (object[])columns[0];
						for (int i = 0; i < elementKeys.Length; i++)
						{
							string eleK = Convert.ToString(elementKeys[i]);
							if (!string.IsNullOrEmpty(eleK))
							{
								ExternalElement ele = new ExternalElement(eleK);
#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: DVE Element " + eleK, LogType.Allways, LogLevel.NoLogging);
#endif
								if (!IsElementStarted(protocol, ele.dmaID, ele.eleID, dveColumn.timeoutTime))
								{
									protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) Value {1} at DCFHelper for DVE:{2} with ERROR:{3}", protocol.QActionID, "test", eleK, "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
									unloadedElements.Add(ele.elementKey);
								}
							}
						}
					}
				}
			}
			else if (startupCheckPID == -2)
			{
				// StartupCheck == FALSE
			}
			else
			{
				string currentStartupMap = Convert.ToString(protocol.GetParameter(startupCheckPID));

				HashSet<string> currentStartupMapA = new HashSet<string>(currentStartupMap.Split(';'));

				if (!currentStartupMapA.Contains(localDMAID + "/" + localEleID))
				{
#if debug
					protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: Main Element", LogType.Allways, LogLevel.NoLogging);
#endif
					if (!IsElementStarted(protocol, localDMAID, localEleID, 360))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) Value {1} at DCFHelper with ERROR:{2}", protocol.QActionID, "Main Element", "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
						throw new Exception("DCFHelper Failed to Initialize: Main Element Not Started");
					}
					else
					{
						currentStartupMapA.Add(localDMAID + "/" + localEleID);
					}
				}

				if (externalElements != null)
				{
					// Wait on all external Elements to startup
					foreach (var externalElement in externalElements)
					{
						if (!currentStartupMapA.Contains(externalElement.elementKey))
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: External Element " + externalElement.elementKey, LogType.Allways, LogLevel.NoLogging);
#endif
							if (!IsElementStarted(protocol, externalElement.dmaID, externalElement.eleID, externalElement.timeoutTime))
							{
								protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) Value {1} at DCFHelper for External Element:{2} with ERROR:{3}", protocol.QActionID, "test", externalElement.elementKey, "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
								unloadedElements.Add(externalElement.elementKey);
							}
							else
							{
								currentStartupMapA.Add(externalElement.elementKey);
							}
						}
					}
				}

				if (dves != null)
				{
					// Wait on all dves to startup
					foreach (var dveColumn in dves)
					{
						object[] columns = (Object[])protocol.NotifyProtocol(321 /*NT_GT_TABLE_COLUMNS*/, dveColumn.tablePID, new UInt32[] { Convert.ToUInt32(dveColumn.columnIDX) });
						object[] elementKeys = (object[])columns[0];
						for (int i = 0; i < elementKeys.Length; i++)
						{
							string eleK = Convert.ToString(elementKeys[i]);
							if (!String.IsNullOrEmpty(eleK))
							{
								if (!currentStartupMapA.Contains(eleK))
								{
									ExternalElement externalElement = new ExternalElement(eleK);
#if debug
									protocol.Log("QA" + protocol.QActionID + "|DCF STARTUP|Checking Startup: DVE Element " + eleK, LogType.Allways, LogLevel.NoLogging);
#endif
									if (!IsElementStarted(protocol, externalElement.dmaID, externalElement.eleID, dveColumn.timeoutTime))
									{
										protocol.Log(string.Format("QA{0}: |ERR: DCF Startup|(ElementStartupCheck) at DCFHelper for DVE:{1} with ERROR:{2}", protocol.QActionID, eleK, "Element Start Check returned False"), LogType.Error, LogLevel.NoLogging);
										unloadedElements.Add(externalElement.elementKey);
									}
									else
									{
										currentStartupMapA.Add(eleK);
									}
								}
							}
						}
					}
				}

				string newMap = String.Join(";", currentStartupMapA.ToArray());
				protocol.SetParameter(startupCheckPID, newMap);
			}

			if (options.PIDcurrentInterfaceProperties != -1)
			{
				cInterfacePropPID = options.PIDcurrentInterfaceProperties;
				PropertiesBufferToDictionary(options.PIDcurrentInterfaceProperties, currentInterfaceProperties);
			}

			if (options.PIDcurrentConnectionProperties != -1)
			{
				cConnectionPropPID = options.PIDcurrentConnectionProperties;
				PropertiesBufferToDictionary(options.PIDcurrentConnectionProperties, currentConnectionProperties);
			}

			if (options.PIDcurrentConnections != -1)
			{
				cConnectionsPID = options.PIDcurrentConnections;
				PropertiesBufferToDictionary(options.PIDcurrentConnections, currentConnections);
			}

			if (options.PIDnewInterfaceProperties != -1)
			{
				newInterfacePropID = options.PIDnewInterfaceProperties;
				PropertiesBufferToDictionary(options.PIDnewInterfaceProperties, newInterfaceProperties);
			}

			if (options.PIDnewConnectionProperties != -1)
			{
				newConnectionPropPID = options.PIDnewConnectionProperties;
				PropertiesBufferToDictionary(options.PIDnewConnectionProperties, newConnectionProperties);
			}

			if (options.PIDnewConnections != -1)
			{
				newConnectionsPID = options.PIDnewConnections;
				PropertiesBufferToDictionary(options.PIDnewConnections, newConnections);
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol object.</param>
		/// <param name="startupCheckPID">Indicates a Parameter (saved="false") ID that will hold a mapping to indicate if a StartupCheck was already performed for a specific element (main/DVE or External).</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		public DCFHelper(SLProtocol protocol, int startupCheckPID, DCFMappingOptions options)
			: this(protocol, startupCheckPID, options, default(DVEColumn[]), default(ExternalElement[]))
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheckPID">Indicates a Parameter (saved="false") ID that will hold a mapping to indicate if a StartupCheck was already performed for a specific element (main/DVE or External).</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="dves">One or more DVEColumn objects identifying all 'element' columns of DVE Tables that also export Interfaces that will be used by the DCFHelper.</param>
		public DCFHelper(SLProtocol protocol, int startupCheckPID, DCFMappingOptions options, params DVEColumn[] dves)
			: this(protocol, startupCheckPID, options, dves, default(ExternalElement[]))
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheckPID">Indicates a Parameter (saved="false") ID that will hold a mapping to indicate if a StartupCheck was already performed for a specific element (main/DVE or External).</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="externalElements">One or more External Elements that will be used by the DCFHelper and need a startup check.</param>
		public DCFHelper(SLProtocol protocol, int startupCheckPID, DCFMappingOptions options, params ExternalElement[] externalElements)
			: this(protocol, startupCheckPID, options, default(DVEColumn[]), externalElements)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheck">Indicates if Element startup checks need to be forcibly performed.</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		public DCFHelper(SLProtocol protocol, bool startupCheck, DCFMappingOptions options)
			: this(protocol, startupCheck ? -1 : -2, options, default(DVEColumn[]), default(ExternalElement[]))
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheck">Indicates if Element startup checks need to be forcibly performed.</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="dves">One or more DVEColumn objects identifying all 'element' columns of DVE Tables that also export Interfaces.</param>
		public DCFHelper(SLProtocol protocol, bool startupCheck, DCFMappingOptions options, params DVEColumn[] dves)
			: this(protocol, startupCheck ? -1 : -2, options, dves, default(ExternalElement[]))
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheck">Indicates if Element startup checks need to be forcibly performed.</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="externalElements">One or more External Elements that will be used by DCFHelper and need a startup check.</param>
		public DCFHelper(SLProtocol protocol, bool startupCheck, DCFMappingOptions options, params ExternalElement[] externalElements)
			: this(protocol, startupCheck ? -1 : -2, options, default(DVEColumn[]), externalElements)
		{
		}

		/// <summary>
		///  Initializes a new instance of the <see cref="DCFHelper"/> class. It allows Manipulation of DCF Connections and Properties. Please use this inside of a 'using'-statement.
		/// </summary>
		/// <param name="protocol">The SLProtocol Object.</param>
		/// <param name="startupCheck">Indicates if Element startup checks need to be forcibly performed.</param>
		/// <param name="options">DCFMappingOptions: Indicates what PIDs are to be used for mapping. A lighter Object with limited functionality can be created by only providing certain PIDs. Example: Only providing the CurrentConnectionsPID will allow Adding and Removing of connections but not Properties.</param>
		/// <param name="dves">An array of DVEColumn objects identifying all 'element' columns of DVE Tables that also export Interfaces that will be used by the DCFHelper.</param>
		/// <param name="externalElements">An array of External Elements that will be used by the DCFHelper and need a Startup check.</param>
		public DCFHelper(SLProtocol protocol, bool startupCheck, DCFMappingOptions options, DVEColumn[] dves, ExternalElement[] externalElements)
			: this(protocol, startupCheck ? -1 : -2, options, dves, externalElements)
		{
		}

		#endregion Constructors

		#region Methods

		public HashSet<string> UnloadedElements
		{
			get { return unloadedElements; }
			private set { unloadedElements = value; }
		}

		public bool DeleteAllManagedDCF()
		{
			bool succes = true;

			try
			{
				try
				{
					foreach (var v in currentConnectionProperties)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring Connection Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting Connection Property:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityConnectionProperty(poskey, thisDMAID, thisEleID);
						}
					}

					currentConnectionProperties.Clear();
					newConnectionProperties.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: CurrentConnectionProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}

				currentConnectionProperties.Clear();

				try
				{
					foreach (var v in currentInterfaceProperties)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring Interface Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting Interface Property:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityInterfaceProperty(poskey, thisDMAID, thisEleID);
						}
					}

					currentInterfaceProperties.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: CurrentInterfaceProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}

				try
				{
					foreach (var v in newConnectionProperties)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring (n) Connection Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting New Connection Property:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityConnectionProperty(poskey, thisDMAID, thisEleID);
						}
					}

					newConnectionProperties.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: NewConnectionProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}

				try
				{
					foreach (var v in newInterfaceProperties)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring (n) Interface Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting New Interface Property:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityInterfaceProperty(poskey, thisDMAID, thisEleID);
						}
					}

					newInterfaceProperties.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:ERR: |DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: NewInterfaceProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}

				try
				{
					foreach (var v in newConnections)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring (n) Connection Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting New Connection:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityConnection(poskey, thisDMAID, thisEleID, true);
						}
					}

					newConnections.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: NewConnection", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}

				try
				{
					foreach (var v in currentConnections)
					{
						if (unloadedElements.Contains(v.Key))
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF DeleteAllManagedDCF|Ignoring Connection Cleanup: Unloaded Element:{1} ", protocol.QActionID, v.Key), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						int thisDMAID;
						int thisEleID;
						SplitEleKey(v.Key, out thisDMAID, out thisEleID);
						foreach (int key in v.Value)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Full Delete|Triggered DCF Clear- Deleting Connection:" + key, LogType.Allways, LogLevel.NoLogging);
#endif
							int poskey = Math.Abs(key);
							protocol.DeleteConnectivityConnection(poskey, thisDMAID, thisEleID, true);
						}
					}

					currentConnections.Clear();
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDC: CurrentConnections", e.ToString()), LogType.Error, LogLevel.NoLogging);
				}
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Full Delete|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "ClearManagedDCF", e.ToString()), LogType.Error, LogLevel.NoLogging);
				succes = false;
			}

			return succes;
		}

		public void Dispose()
		{
			interfacesSV = null;
			connectionProperties = null;
			interfaceProperties = null;
			connections = null;
			map_AllConnections = null;
			SyncMapping();
		}

		/// <summary>
		/// Get the state of an element (based on SLDMS, so basically this comes pretty much to the same as a IsElementLoadedInSLDMS).
		/// </summary>
		/// <param name="iDmaId">ID of the DMA on which the element from which the state needs to be retrieved is located.</param>
		/// <param name="iElementId">ID of the element from which the state needs to be retrieved.</param>
		/// <returns>The element state. In case of failure, null is returned.</returns>
		public string GetElementState(UInt32 iDmaId, UInt32 iElementId)
		{
			try
			{
				DMSClass dms = new DMSClass();
				object oState = null;
				dms.Notify(91/*DMS_GET_ELEMENT_STATE*/, 0, iDmaId, iElementId, out oState);
				string sElementState = oState as string;

				return sElementState;
			}
			catch (Exception ex)
			{
				protocol.Log("QA" + protocol.QActionID + "|GetElementState|Exception thrown : " + Environment.NewLine + ex.ToString(), LogType.Error, LogLevel.NoLogging);
				return null;
			}
		}

		/// <summary>
		/// Gets DCF Interfaces using DCFDynamicLink objects to identify a unique interface. This method caches the previously retrieved Interfaces in the background and will not retrieve the interfaces again unless the refresh bool is set to true.
		/// </summary>
		/// <param name="refresh">Set To True if you want to force this method to perform a protocol.GetAllInterfaces and refresh it's internal Cache.</param>
		/// <param name="linksToInterfaces">One or more DCFDynamicLink objects that identify a unique interface (can be both internal, external or a mix of both).</param>
		/// <returns>An array with DCFDynamicLinkResult Objects in the same order as the requested UIDS, if an Interface (or interfaces) was not found then this interface will be null! Be sure to check for 'null' values before using a result!.</returns>
		public DCFDynamicLinkResult[] GetInterfaces(bool refresh, params DCFDynamicLink[] linksToInterfaces)
		{
			DCFDynamicLinkResult[] result = new DCFDynamicLinkResult[linksToInterfaces.Length];
			HashSet<string> refreshed = new HashSet<string>();
			HashSet<string> refreshedProperties = new HashSet<string>();
			for (int i = 0; i < linksToInterfaces.Length; i++)
			{
				var linkToInterface = linksToInterfaces[i];
				result[i] = new DCFDynamicLinkResult(linkToInterface, null);
				if (unloadedElements.Contains(linkToInterface.ElementKey))
				{
					protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Ignoring GetInterfaceRequest: Unloaded Element:{1} ", protocol.QActionID, linkToInterface.ElementKey), LogType.Error, LogLevel.NoLogging);
					continue;
				}

				if (linkToInterface == null) continue;
				try
				{
					FastCollection<ConnectivityInterface> allInterfaces;
					if ((!interfaces.TryGetValue(linkToInterface.ElementKey, out allInterfaces) || refresh) && !refreshed.Contains(linkToInterface.ElementKey))
					{
						Dictionary<int, ConnectivityInterface> allInterfacesTmp;
						if (linkToInterface.ElementKey == "local")
						{
							allInterfacesTmp = protocol.GetConnectivityInterfaces(localDMAID, localEleID);
						}
						else
						{
							string[] elementKeyA = linkToInterface.ElementKey.Split('/');
							allInterfacesTmp = protocol.GetConnectivityInterfaces(Convert.ToInt32(elementKeyA[0]), Convert.ToInt32(elementKeyA[1]));
						}

						if (allInterfacesTmp == null) continue;
						allInterfaces = new FastCollection<ConnectivityInterface>(allInterfacesTmp.Values.ToArray());
						interfaces[linkToInterface.ElementKey] = allInterfaces;
						refreshed.Add(linkToInterface.ElementKey);
					}

					if (linkToInterface.GetAll)
					{
						DCFDynamicLinkResult newResult = new DCFDynamicLinkResult(linkToInterface, allInterfaces.ToArray());
						result[i] = newResult;
					}
					else
					{
						string uniqueKey;
						Expression<Func<ConnectivityInterface, object>> indexer;
						if (String.IsNullOrEmpty(linkToInterface.InterfaceName))
						{
							if (linkToInterface.TableKey == null)
							{
								indexer = p => Convert.ToString(p.InterfaceId);
								uniqueKey = Convert.ToString(linkToInterface.ParameterGroupID);
							}
							else if (linkToInterface.TableKey == "*")
							{
								indexer = p => Convert.ToString(p.DynamicLink);
								uniqueKey = Convert.ToString(linkToInterface.ParameterGroupID);
							}
							else
							{
								indexer = p => p.DynamicLink + "/" + p.DynamicPK;
								uniqueKey = linkToInterface.ParameterGroupID + "/" + linkToInterface.TableKey;
							}
						}
						else
						{
							if (linkToInterface.Custom)
							{
								indexer = p => p.InterfaceCustomName;
								uniqueKey = linkToInterface.InterfaceName;
							}
							else
							{
								indexer = p => p.InterfaceName;
								uniqueKey = linkToInterface.InterfaceName;
							}
						}

						allInterfaces.AddIndex(indexer);
						var allFound = allInterfaces.FindValue(indexer, uniqueKey);

						DCFDynamicLinkResult newResult = new DCFDynamicLinkResult(linkToInterface, allFound.ToArray());
						result[i] = newResult;
					}

					if (linkToInterface.PropertyFilter != null)
					{
						try
						{
							// Get All the properties
							FastCollection<ConnectivityInterfaceProperty> allProperties;
							if ((!interfacePropertiesPerElement.TryGetValue(linkToInterface.ElementKey, out allProperties) || refresh) && !refreshedProperties.Contains(linkToInterface.ElementKey))
							{
								Dictionary<int, ConnectivityInterfaceProperty> allPropsTmp = new Dictionary<int, ConnectivityInterfaceProperty>();
								foreach (var intf in allInterfaces)
								{
									intf.InterfaceProperties.ToList().ForEach(x => allPropsTmp.Add(x.Key, x.Value));
								}

								allProperties = new FastCollection<ConnectivityInterfaceProperty>(allPropsTmp.Values.ToArray());

								interfacePropertiesPerElement[linkToInterface.ElementKey] = allProperties;
								refreshedProperties.Add(linkToInterface.ElementKey);
							}

							string uniquePropertyKey = String.Empty;
							Expression<Func<ConnectivityInterfaceProperty, object>> propertyIndexer = null;
							Func<ConnectivityInterfaceProperty, object> indexerSearch = null;

							PropertyFilter propFilter = linkToInterface.PropertyFilter;
							if (propFilter.ID != -1)
							{
								indexerSearch = p => p.InterfacePropertyId;
								uniquePropertyKey = Convert.ToString(propFilter.ID);
							}
							else
							{
								if (!String.IsNullOrEmpty(propFilter.Name))
								{
									indexerSearch = p => p.InterfacePropertyName;
									uniquePropertyKey = propFilter.Name;
								}

								if (!String.IsNullOrEmpty(propFilter.Type))
								{
									if (indexerSearch == null)
									{
										indexerSearch = p => p.InterfacePropertyType;
										uniquePropertyKey = propFilter.Type;
									}
									else
									{
										var temp = indexerSearch;
										indexerSearch = p => temp(p) + "/" + p.InterfacePropertyType;
										uniquePropertyKey = uniquePropertyKey + "/" + propFilter.Type;
									}
								}

								if (!String.IsNullOrEmpty(propFilter.Value))
								{
									if (indexerSearch == null)
									{
										indexerSearch = p => p.InterfacePropertyValue;
										uniquePropertyKey = propFilter.Value;
									}

									var temp = indexerSearch;
									indexerSearch = p => temp(p) + "/" + p.InterfacePropertyValue;
									uniquePropertyKey = uniquePropertyKey + "/" + propFilter.Value;
								}
							}

							if (indexerSearch != null)
							{
								propertyIndexer = p => indexerSearch(p);

								allProperties.AddIndex(propertyIndexer);
								var foundProperties = allProperties.FindValue(propertyIndexer, uniquePropertyKey);

								// make a list
								HashSet<string> foundInterfaces = new HashSet<string>(foundProperties.Select(p => p.Interface.ElementKey + "/" + p.Interface.InterfaceId));

								// Filter Current Results with the found Property Interfaces
								result[i] = new DCFDynamicLinkResult(result[i].link, result[i].allInterfaces.Where(p => foundInterfaces.Contains(p.ElementKey + "/" + p.InterfaceId)).ToArray());
							}
						}
						catch (Exception e)
						{
							protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) Value {1} at GetInterfaces - By Property with Exception:{2}", protocol.QActionID, linkToInterface, e.ToString()), LogType.Error, LogLevel.NoLogging);
						}
					}
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) Value {1} at GetInterfaces with Exception:{2}", protocol.QActionID, linkToInterface, e.ToString()), LogType.Error, LogLevel.NoLogging);
				}
			}

			return result;
		}

		/// <summary>
		/// Gets DCF Interfaces using DCFDynamicLink structs to identify a unique interface. This method caches the previously retrieved Interfaces in the background and will not retrieve the interfaces again unless the refresh bool is set to true.
		/// </summary>
		/// <param name="linksToInterfaces">One or more DCFDynamicLink structs that identify a unique interface (can be both internal, external or a mix of both).</param>
		/// <returns>An array with DCFDynamicLinkResult Objects in the same order as the requested UIDS, if an Interface (or interfaces) was not found then this interface will be null!.</returns>
		public DCFDynamicLinkResult[] GetInterfaces(params DCFDynamicLink[] linksToInterfaces)
		{
			return GetInterfaces(false, linksToInterfaces);
		}

		/// <summary>
		/// Gets a Single Internal Interface Object based on a table in the driver and a unique string value defined in the IPColumnIdx.
		/// </summary>
		/// <param name="tableID">Table containing Interfaces (this should correspond to a Parameter Group Dynamic ID).</param>
		/// <param name="descrColumnIdx">IDX of the column Containing the Description of the row. If Naming is used, this IDX should contain the complete description created by Naming.</param>
		/// <param name="searchValueColumnIdx">IDX of the column containing a string value to be used as Key to lookup ConnectivityInterface Objects. This should be unique.</param>
		/// <param name="uniqueLink">String Value containing the Unique Key located in IPColumnIDX.</param>
		/// <param name="parameterGroupNames">All possible ParameterGroupNames that can occur for this Table.</param>
		/// <returns>ConnectivityInterface Object.</returns>
		public ConnectivityInterface GetInternalInterface(int tableID, UInt32 descrColumnIdx, UInt32 searchValueColumnIdx, string uniqueLink, params string[] parameterGroupNames)
		{
			try
			{
				var result = GetInternalInterfaces(tableID, descrColumnIdx, searchValueColumnIdx, parameterGroupNames, uniqueLink);
				ConnectivityInterface conIn;
				if (result.TryGetValue(uniqueLink, out conIn))
				{
					return conIn;
				}
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) Value {1} at GetInternalInterface with Exception:{2}", protocol.QActionID, uniqueLink, e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return null;
		}

		/// <summary>
		/// Retrieves a filtered dictionary containing requested Interfaces using a unique value from a SearchValueColumn.
		/// </summary>
		/// <param name="tableID">Table containing Interfaces (this should correspond to a Parameter Group Dynamic ID).</param>
		/// <param name="descrColumnsIdx">IDX of the column Containing the Description of the row. If Naming is used, this IDX should contain the complete description created by Naming.</param>
		/// <param name="searchValueColumnIdx">IDX of the column containing a string value to be used as Key to lookup ConnectivityInterface Objects. This should be unique.</param>
		/// <param name="parameterGroupNames">All possible ParameterGroupNames that can occur for this Table.</param>
		/// <param name="searchValues">All Unique Values you want to retrieve Interfaces for.</param>
		/// <returns>Dictionary with the Unique Value as key and Interface object as Value.</returns>
		public Dictionary<string, ConnectivityInterface> GetInternalInterfaces(int tableID, UInt32 descrColumnsIdx, UInt32 searchValueColumnIdx, string[] parameterGroupNames, params string[] searchValues)
		{
			string uniqueCacheKey = tableID + String.Join(";", parameterGroupNames.OrderByDescending(p => p));
			Dictionary<string, ConnectivityInterface> result = new Dictionary<string, ConnectivityInterface>();
			try
			{
				if (!cachedTables.Contains(uniqueCacheKey))
				{
					UpdateInterfaces(tableID, descrColumnsIdx, searchValueColumnIdx, parameterGroupNames);
					cachedTables.Add(uniqueCacheKey);
				}

				foreach (string uniqueLink in searchValues)
				{
					ConnectivityInterface conIn;
					if (interfacesSV.TryGetValue(uniqueLink, out conIn))
					{
						result.Add(uniqueLink, conIn);
					}
				}
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) Value {1} at GetInternalInterfaces with Exception:{2}", protocol.QActionID, tableID, e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return result;
		}

		/// <summary>
		/// Warning: [Obsolete: Please use GetInterfaces()] Gets one or more Internal Interfaces based on the Keys of the Tables used in the driver to create Interfaces with. (See dynamicId= in ParameterGroup).
		/// </summary>
		/// /// <param name="linksToInterfaces">DCFDynamicLink objects that link to a specific interface.</param>
		/// <returns>Returns an Array of ConnectivityInterfaces in the same Order as the Requested Keys. If no Interface was found, the value at position X will be Null.</returns>
		public ConnectivityInterface[] GetInternalInterfaces(params DCFDynamicLink[] linksToInterfaces)
		{
			var itfs = GetInterfaces(true, linksToInterfaces);
			ConnectivityInterface[] result = new ConnectivityInterface[itfs.Length];
			for (int i = 0; i < itfs.Length; i++)
			{
				result[i] = itfs[i].firstInterface;
			}

			return result;
		}

		/// <summary>
		/// Warning: [Obsolete: Please Use GetInterfaces]Gets All Internal Interfaces based on the parameterGroup IDs (See dynamicId= in ParameterGroup).
		/// </summary>
		/// <param name="paramGroupID">ParameterGroupID used to Link the table with DCF Interfaces.</param>
		/// <returns>Returns an Array of ConnectivityInterfaces.</returns>
		public ConnectivityInterface[] GetInternalInterfaces(params int[] paramGroupID)
		{
			DCFDynamicLink[] dynamicIDs = new DCFDynamicLink[paramGroupID.Length];
			for (int i = 0; i < dynamicIDs.Length; i++)
			{
				dynamicIDs[i] = new DCFDynamicLink(paramGroupID[i]);
			}

			var itfs = GetInterfaces(true, dynamicIDs);
			List<ConnectivityInterface> result = new List<ConnectivityInterface>();
			for (int j = 0; j < itfs.Length; j++)
			{
				if (itfs[j] != null)
				{
					try
					{
						if (itfs[j].allInterfaces != null)
						{
							for (int u = 0; u < itfs[j].allInterfaces.Length; u++)
							{
								ConnectivityInterface conInt = itfs[j].allInterfaces[u];
								if (conInt != null)
									result.Add(conInt);
							}
						}
					}
					catch (Exception e)
					{
						protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) Value {1} at GetInternalInterface (with tableKey) with Exception:{2}", protocol.QActionID, paramGroupID[j], e.ToString()), LogType.Error, LogLevel.NoLogging);
					}
				}
			}

			return result.ToArray();
		}

		/// <summary>
		/// Removes all Connection Properties with the given IDs for a specific Connection.
		/// </summary>
		/// <param name="connection">The ConnectivityConnection Object holding the properties.</param>
		/// <param name="force">Indicates if it should force delete all given IDs without checking if they are Managed by this element.</param>
		/// <param name="propertyIDs">One or more Property IDs for the Properties to Delete.</param>
		/// <returns>A boolean indicating if all deletes were successful.</returns>
		public bool RemoveConnectionProperties(ConnectivityConnection connection, bool force, params int[] propertyIDs)
		{
			try
			{
				bool nullInputDetected = false;
				if (connection == null)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property| Remove Connection Properties ConnectivityConnection connection was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				if (cConnectionPropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection Property|DCFHelper Error: Using RemoveConnectionProperties requires the CurrentConnectionPropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool success = true;

				string eleKey = CreateElementKey(connection.SourceDataMinerId, connection.SourceElementId);
				HashSet<int> managedNewByThisProtocol;
				if (!newConnectionProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentConnectionProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				foreach (int propertyID in propertyIDs)
				{
					if (force || managedNewByThisProtocol.Contains(propertyID) || managedNewByThisProtocol.Contains(-1 * propertyID) || managedCurrentByThisProtocol.Contains(propertyID) || managedCurrentByThisProtocol.Contains(-1 * propertyID))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + propertyID + ")|Deleting Connection Property:" + propertyID, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!connection.DeleteProperty(propertyID))
						{
							success = false;
							protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property (" + propertyID + ")| Removing Connection Property:{1} Returned False! Property may not have been Removed!", protocol.QActionID, propertyID), LogType.Error, LogLevel.NoLogging);
						}
						else
						{
							managedCurrentByThisProtocol.Remove(propertyID);
							managedNewByThisProtocol.Remove(propertyID);
							managedCurrentByThisProtocol.Remove(-1 * propertyID);
							managedNewByThisProtocol.Remove(-1 * propertyID);
						}
					}
				}

				newConnectionProperties[eleKey] = managedNewByThisProtocol;
				currentConnectionProperties[eleKey] = managedCurrentByThisProtocol;
				return success;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveConnectionProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Remove all ConnectionProperties for a set of IDs.
		/// </summary>
		/// <param name="dataMinerID">DataMiner ID containing the Properties.</param>
		/// <param name="elementID">Element ID Containing the Properties.</param>
		/// <param name="force">Indicate if you want to force delete the Property, without using the Mapping Parameters.</param>
		/// <param name="propertyIDs">One or more Property IDs to remove.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveConnectionProperties(int dataMinerID, int elementID, bool force, params int[] propertyIDs)
		{
			try
			{
				if (cConnectionPropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection Property|DCFHelper Error: Using RemoveConnectionProperties requires the CurrentConnectionPropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool success = true;

				string eleKey = CreateElementKey(dataMinerID, elementID);
				HashSet<int> managedNewByThisProtocol;
				if (!newConnectionProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentConnectionProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				foreach (int propertyID in propertyIDs)
				{
					if (force || managedNewByThisProtocol.Contains(propertyID) || managedNewByThisProtocol.Contains(-1 * propertyID) || managedCurrentByThisProtocol.Contains(propertyID) || managedCurrentByThisProtocol.Contains(-1 * propertyID))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + propertyID + ")|Deleting Connection Property:" + propertyID, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!protocol.DeleteConnectivityConnectionProperty(propertyID, dataMinerID, elementID))
						{
							success = false;
							protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property (" + propertyID + ")| Removing Connection Property:{1} Returned False! Property may not have been Removed!", protocol.QActionID, propertyID), LogType.Error, LogLevel.NoLogging);
						}
						else
						{
							managedCurrentByThisProtocol.Remove(propertyID);
							managedNewByThisProtocol.Remove(propertyID);
						}
					}
				}

				newConnectionProperties[eleKey] = managedNewByThisProtocol;
				currentConnectionProperties[eleKey] = managedCurrentByThisProtocol;
				return success;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveConnectionProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Removes all Connections with the given Name from the Interface linked to a unique String Value. This string value should be available in the IPColumnIdx used in the UpdateInterfaces methods.
		/// </summary>
		/// <param name="inputSearchValue">String value from the searchValueColumnIdx used in the UpdateInterfaces methods to retrieve the Interface.</param>
		/// <param name="bothConnections">A boolean when true, attempts to remove both connections if this was an external connection.</param>
		/// <param name="force">A boolean when true, forces the removal. If false, it won't remove anything not created by this code.</param>
		/// <param name="connectionNames">Connection Names for Connections that need to be deleted.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveConnections(string inputSearchValue, bool bothConnections, bool force, params string[] connectionNames)
		{
			ConnectivityInterface inp = null;
			interfacesSV.TryGetValue(inputSearchValue, out inp);
			if (inp != null)
			{
				return RemoveConnections(inp, bothConnections, force, connectionNames);
			}
			else
			{
				return false;
			}
		}

		/// <summary>
		/// Removes all Connections with the given Name.
		/// </summary>
		/// <param name="input">ConnectivityInterface object containing the connection.</param>
		/// <param name="bothConnections">A boolean when true, attempts to remove both connections if this was an external connection.</param>
		/// <param name="force">A boolean when true, forces the removal. If false, it won't remove anything not created by this code.</param>
		/// <param name="connectionNames">Connection Names for Connections that need to be deleted.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveConnections(ConnectivityInterface input, bool bothConnections, bool force, params string[] connectionNames)
		{
			try
			{
				bool nullInputDetected = false;
				if (input == null)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Connection| Removing(A) DCF Connections ConnectivityInterface input was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				List<int> connectionsToDelete = new List<int>();
				for (int u = 0; u < connectionNames.Length; u++)
				{
					ConnectivityConnection con = input.GetConnectionByName(connectionNames[u]);
					if (con == null) continue;
					int id = con.ConnectionId;
					connectionsToDelete.Add(id);
				}

				return RemoveConnections(input, bothConnections, force, connectionsToDelete.ToArray());
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|(Exception) at RemoveConnections with Exception:{1}", protocol.QActionID, e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Removes all Connections with the given Name.
		/// </summary>
		/// <param name="input">ConnectivityInterface object containing the connection.</param>
		/// <param name="bothConnections">A boolean when true, attempts to remove both connections if this was an external connection.</param>
		/// <param name="force">A boolean when true, forces the removal. If false, it won't remove anything not created by this code.</param>
		/// <param name="connectionIDs">All Connection IDs for Connections that need to be deleted.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveConnections(ConnectivityInterface input, bool bothConnections, bool force, params int[] connectionIDs)
		{
			try
			{
				bool nullInputDetected = false;
				if (input == null)
				{
					protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Removing DCF(B) Connections ConnectivityInterface input was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				if (cConnectionsPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection|DCFHelper Error: Using RemoveConnections requires the CurrentConnectionsPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool finalResult = true;
				string eleKey = CreateElementKey(input.DataMinerId, input.ElementId);
				HashSet<int> managedNewByThisProtocol;
				if (!newConnections.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentConnections.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				for (int u = 0; u < connectionIDs.Length; u++)
				{
					var con = input.GetConnectionById(connectionIDs[u]);
					if (force || managedCurrentByThisProtocol.Contains(connectionIDs[u]) || managedCurrentByThisProtocol.Contains(-1 * connectionIDs[u]) || managedNewByThisProtocol.Contains(connectionIDs[u]) || managedNewByThisProtocol.Contains(-1 * connectionIDs[u]))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + con.ConnectionId + ")|Deleting Connection:" + con.ConnectionName, LogType.Allways, LogLevel.NoLogging);
#endif

						if (input.DeleteConnection(connectionIDs[u], bothConnections))
						{
							managedNewByThisProtocol.Remove(connectionIDs[u]);
							managedCurrentByThisProtocol.Remove(connectionIDs[u]);
							managedNewByThisProtocol.Remove(-1 * connectionIDs[u]);
							managedCurrentByThisProtocol.Remove(-1 * connectionIDs[u]);
						}
						else
						{
							protocol.Log(string.Format("QA{0}:|ERR: DCF Connection (" + connectionIDs[u] + ")| Removing DCF Connection:{1} Returned False. Connection may not have been Removed", protocol.QActionID, connectionIDs[u]), LogType.Error, LogLevel.NoLogging);
							finalResult = false;
						}
					}
				}

				newConnections[eleKey] = managedNewByThisProtocol;
				currentConnections[eleKey] = managedCurrentByThisProtocol;

				return finalResult;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Connection| (Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveConnections", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Remove all Connections with the provided ID.
		/// </summary>
		/// <param name="dataMinerID">DataMiner ID containing the connections.</param>
		/// <param name="elementID">Element ID Containing the connections.</param>
		/// <param name="bothConnections">For external connections, indicate if the connections on both elements must be deleted.</param>
		/// <param name="force">Indicate if you want to force delete the connection, without using the Mapping Parameters.</param>
		/// <param name="connectionIDs">One or more connection IDs to remove.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveConnections(int dataMinerID, int elementID, bool bothConnections, bool force, params int[] connectionIDs)
		{
			try
			{
				if (cConnectionsPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection|DCFHelper Error: Using RemoveConnections requires the CurrentConnectionsPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool finalResult = true;
				string eleKey = CreateElementKey(dataMinerID, elementID);
				if (unloadedElements.Contains(eleKey))
				{
					protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Ignoring RemoveConnections: Unloaded Element:{1} ", protocol.QActionID, eleKey), LogType.Error, LogLevel.NoLogging);
					return false;
				}

				HashSet<int> managedNewByThisProtocol;
				if (!newConnections.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentConnections.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				for (int u = 0; u < connectionIDs.Length; u++)
				{
					if (force || managedCurrentByThisProtocol.Contains(connectionIDs[u]) || managedCurrentByThisProtocol.Contains(-1 * connectionIDs[u]) || managedNewByThisProtocol.Contains(connectionIDs[u]) || managedNewByThisProtocol.Contains(-1 * connectionIDs[u]))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + connectionIDs[u] + ")|Deleting Connection:" + connectionIDs[u], LogType.Allways, LogLevel.NoLogging);
#endif
						if (protocol.DeleteConnectivityConnection(connectionIDs[u], dataMinerID, elementID, bothConnections))
						{
							managedNewByThisProtocol.Remove(connectionIDs[u]);
							managedCurrentByThisProtocol.Remove(connectionIDs[u]);
						}
						else
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF Connection (" + connectionIDs[u] + ")| Removing DCF Connection:{1} Returned False. Connection may not have been Removed", protocol.QActionID, connectionIDs[u]), LogType.Error, LogLevel.NoLogging);
							finalResult = false;
						}
					}
				}

				newConnections[eleKey] = managedNewByThisProtocol;
				currentConnections[eleKey] = managedCurrentByThisProtocol;

				return finalResult;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Connection| (Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveConnections", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Removes all Interface Properties with the given IDs for a specific Connection.
		/// </summary>
		/// <param name="itf">The ConnectivityInterface Object holding the properties.</param>
		/// <param name="force">Indicates if it should force delete all given IDs without checking if they are Managed by this element.</param>
		/// <param name="propertyIDs">One or more Property IDs for the Properties to Delete.</param>
		/// <returns>A boolean indicating if all deletes were successful.</returns>
		public bool RemoveInterfaceProperties(ConnectivityInterface itf, bool force, params int[] propertyIDs)
		{
			try
			{
				bool nullInputDetected = false;
				if (itf == null)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property|Remove Interface Properties ConnectivityInterface itf was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				if (cInterfacePropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Interface Property|DCFHelper Error: Using RemoveInterfaceProperties requires the CurrentInterfacePropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool success = true;
				string eleKey = CreateElementKey(itf.DataMinerId, itf.ElementId);
				HashSet<int> managedNewByThisProtocol;
				if (!newInterfaceProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentInterfaceProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				foreach (int propertyID in propertyIDs)
				{
					if (force || managedNewByThisProtocol.Contains(propertyID) || managedNewByThisProtocol.Contains(-1 * propertyID) || managedCurrentByThisProtocol.Contains(propertyID) || managedCurrentByThisProtocol.Contains(-1 * propertyID))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + propertyID + ")|Deleting Interface Property:" + propertyID, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!itf.DeleteProperty(propertyID))
						{
							success = false;
							protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property (" + propertyID + ")| Removing Interface Property:{1} Returned False! Property may not have been Removed!", protocol.QActionID, propertyID), LogType.Error, LogLevel.NoLogging);
						}
						else
						{
							managedCurrentByThisProtocol.Remove(propertyID);
							managedNewByThisProtocol.Remove(propertyID);
							managedCurrentByThisProtocol.Remove(-1 * propertyID);
							managedNewByThisProtocol.Remove(-1 * propertyID);
						}
					}
				}

				newInterfaceProperties[eleKey] = managedNewByThisProtocol;
				currentInterfaceProperties[eleKey] = managedCurrentByThisProtocol;
				return success;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveInterfaceProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Remove all InterfaceProperties for a set of IDs.
		/// </summary>
		/// <param name="dataMinerID">DataMiner ID containing the Properties.</param>
		/// <param name="elementID">Element ID Containing the Properties.</param>
		/// <param name="force">Indicate if you want to force delete the Property, without using the Mapping Parameters.</param>
		/// <param name="propertyIDs">One or more Property IDs to remove.</param>
		/// <returns>Boolean indicating the success of the removal.</returns>
		public bool RemoveInterfaceProperties(int dataMinerID, int elementID, bool force, params int[] propertyIDs)
		{
			bool success = false;
			try
			{
				if (cInterfacePropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Interface Property|DCFHelper Error: Using RemoveInterfaceProperties requires the CurrentInterfacePropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				success = true;
				string eleKey = CreateElementKey(dataMinerID, elementID);
				HashSet<int> managedNewByThisProtocol;
				if (!newInterfaceProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

				HashSet<int> managedCurrentByThisProtocol;
				if (!currentInterfaceProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

				foreach (int propertyID in propertyIDs)
				{
					if (force || managedNewByThisProtocol.Contains(propertyID) || managedNewByThisProtocol.Contains(-1 * propertyID) || managedCurrentByThisProtocol.Contains(propertyID) || managedCurrentByThisProtocol.Contains(-1 * propertyID))
					{
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + propertyID + ")|Deleting Interface Property:" + propertyID, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!protocol.DeleteConnectivityConnectionProperty(propertyID, dataMinerID, elementID))
						{
							success = false;
							protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property (" + propertyID + ")| Removing Interface Property:{1} Returned False! Property may not have been Removed!", protocol.QActionID, propertyID), LogType.Error, LogLevel.NoLogging);
						}
						else
						{
							managedCurrentByThisProtocol.Remove(propertyID);
							managedNewByThisProtocol.Remove(propertyID);
						}
					}
				}

				newInterfaceProperties[eleKey] = managedNewByThisProtocol;
				currentInterfaceProperties[eleKey] = managedCurrentByThisProtocol;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "RemoveInterfaceProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return success;
		}

		/// <summary>
		/// Saves a collection of ConnectivityConnectionProperty objects to a given ConnectivityConnection.
		/// </summary>
		/// <param name="connectivityConnection">The Interface to link the Properties to.</param>
		/// <param name="full">Default: false, Indicates that every Property for this interface is provided in one go (similar to Fill Table At Once). Any Property managed by this Element that is still connected to this Interface will be removed.</param>
		/// <param name="fixedProperty">Default: false, Indicates this is a fixed property that can only be removed by the custom remove functionality.</param>
		/// <param name="addToReturnConnection">Default: false, In case of external connection, if this is set to true try and add the property to the return connection as well.</param>
		/// <param name="async">Default: false, Indicates if the Save should be performed asynchronous or if it should wait for the property to be fully built. Async: True will be much faster and is highly recommended for large scale setups.</param>
		/// <param name="newConnectProps">One or more ConnectivityConnectionProperty Objects holding the new/updated data.</param>
		/// <returns>A boolean indicating the overall success of the save.</returns>
		public bool SaveConnectionProperties(ConnectivityConnection connectivityConnection, bool full, bool fixedProperty, bool addToReturnConnection, bool async, params ConnectivityConnectionProperty[] newConnectProps)
		{
			try
			{
				bool nullInputDetected = false;
				if (connectivityConnection == null)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property| Save Connection Properties ConnectivityConnection was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				if (cConnectionPropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection Property|DCFHelper Error: Using SaveConnectionProperties requires the CurrentConnectionsPropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool finalResult = true;

				bool externalConnection = connectivityConnection.SourceDataMinerId != connectivityConnection.DestinationDMAId || connectivityConnection.SourceElementId != connectivityConnection.DestinationEId;

				string propertyIdentifier = connectivityConnection.ConnectionId + "-" + connectivityConnection.SourceDataMinerId + "/" + connectivityConnection.SourceElementId;

				Dictionary<string, ConnectivityConnectionProperty> allProps;

				// Retrieve all properties for this connection in a single call, if they haven't already been called earlier.
				if (!connectionProperties.TryGetValue(propertyIdentifier, out allProps))
				{
					var itfProps = connectivityConnection.ConnectionProperties;
					allProps = itfProps.GroupBy(p => p.Value.ConnectionPropertyName).ToDictionary(item => item.Key, item => item.First().Value);
					itfProps = null;
					connectionProperties.Add(propertyIdentifier, allProps);
				}

				int[] result = new int[newConnectProps.Length];

				// parse all properties and add them (this should be updated in the future to a bulk set if it gets added to DCF)
				for (int i = 0; i < newConnectProps.Length; i++)
				{
					bool thisResult = true;
					var newConnectProp = newConnectProps[i];
					if (newConnectProp == null)
					{
						result[i] = -1;
						continue;
					}

					ConnectivityConnectionProperty prop;
					if (allProps.TryGetValue(newConnectProp.ConnectionPropertyName, out prop))
					{
						// UPDATE PROPERTY
						if (prop.ConnectionPropertyName == newConnectProp.ConnectionPropertyName && prop.ConnectionPropertyType == newConnectProp.ConnectionPropertyType && prop.ConnectionPropertyValue == newConnectProp.ConnectionPropertyValue)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + prop.ConnectionPropertyId + ")|Not Updating Connection Property:" + prop.ConnectionPropertyId + "/" + newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue + "-- No Change Detected", LogType.Allways, LogLevel.NoLogging);
#endif
						}
						else
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + prop.ConnectionPropertyId + ")|Updating Connection Property:" + prop.ConnectionPropertyId + "/" + newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue, LogType.Allways, LogLevel.NoLogging);
#endif
							prop.ConnectionPropertyType = newConnectProp.ConnectionPropertyType;
							prop.ConnectionPropertyValue = newConnectProp.ConnectionPropertyValue;
							//if (connectivityConnection.UpdateProperty(prop, false))
							if (connectivityConnection.UpdateProperty(prop.ConnectionPropertyId, prop.ConnectionPropertyName, prop.ConnectionPropertyType, prop.ConnectionPropertyValue, connectivityConnection.ConnectionId, false))
							{
								connectionProperties[propertyIdentifier][newConnectProp.ConnectionPropertyName] = prop;
							}
							else
							{
								protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property (" + prop.ConnectionPropertyId + ")| Updating Connection Property:{1} Returned False. Property may not have been Updated!", protocol.QActionID, prop.ConnectionPropertyId + "/" + newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue), LogType.Error, LogLevel.NoLogging);
								finalResult = thisResult = false;
							}
						}
					}
					else
					{
						// ADD PROPERTY
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property|Adding Connection Property:" + newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue, LogType.Allways, LogLevel.NoLogging);
#endif
						if (!async)
						{
							if (connectivityConnection.AddProperty(newConnectProp.ConnectionPropertyName, newConnectProp.ConnectionPropertyType, newConnectProp.ConnectionPropertyValue, out prop, 420000, false))
							{
								newConnectProp.ConnectionPropertyId = prop.ConnectionPropertyId;
								connectionProperties[propertyIdentifier].Add(prop.ConnectionPropertyName, prop);
#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + prop.ConnectionPropertyId + ")|Property Added Id:" + prop.ConnectionPropertyId, LogType.Allways, LogLevel.NoLogging);
#endif
							}
							else
							{
								protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property| Adding Connection Property:{1} Timed out after 7 Minutes! Property may not have been Added!", protocol.QActionID, newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue), LogType.Error, LogLevel.NoLogging);
								finalResult = thisResult = false;
							}
						}
						else
						{
							int outID;
							if (connectivityConnection.AddProperty(newConnectProp.ConnectionPropertyName, newConnectProp.ConnectionPropertyType, newConnectProp.ConnectionPropertyValue, out outID, false))
							{
								newConnectProp.ConnectionPropertyId = outID;
								newConnectProp.Connection = connectivityConnection;
								prop = newConnectProp;

								connectionProperties[propertyIdentifier].Add(prop.ConnectionPropertyName, prop);
#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property (" + prop.ConnectionPropertyId + ")|Property Getting Added (Async) Id:" + prop.ConnectionPropertyId, LogType.Allways, LogLevel.NoLogging);
#endif
							}
							else
							{
								protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property| Adding Connection Property -Async- :{1} Returned False! Property may not have been Added!", protocol.QActionID, newConnectProp.ConnectionPropertyName + ":" + newConnectProp.ConnectionPropertyValue), LogType.Error, LogLevel.NoLogging);
								finalResult = thisResult = false;
							}
						}
					}

					if (thisResult)
					{
						result[i] = prop.ConnectionPropertyId;

						string eleKey = CreateElementKey(connectivityConnection.SourceDataMinerId, connectivityConnection.SourceElementId);
						if (fixedProperty)
						{
							AddToPropertyDictionary(newConnectionProperties, eleKey, -1 * prop.ConnectionPropertyId);
						}
						else
						{
							AddToPropertyDictionary(newConnectionProperties, eleKey, prop.ConnectionPropertyId);
						}
					}
				}

				// full = true means this save contains all properties for this interface, any old properties not part of the provided data must be deleted if they are managed by this element.
				// Don't do this if one of the properties couldn't get saved because we would be working with invalid data and we don't want to delete anything by mistake
				if (full && finalResult)
				{
					var propertiesToDelete = allProps.Values.Select(p => p.ConnectionPropertyId).Except(result);
					RemoveConnectionProperties(connectivityConnection, false, propertiesToDelete.ToArray());
				}

				// Try and do this, even if one of the properties failed to save. Try and limit the amount of 'bad' properties
				if (externalConnection && addToReturnConnection)
				{
#if debug
					protocol.Log("QA" + protocol.QActionID + "|DCF Connection Property|External Connection Detected, Attempting to Add Properties to Return Connection...", LogType.Allways, LogLevel.NoLogging);
#endif
					// In case of external connections, also manually add the properties to the return connection
					int externalDMAID = connectivityConnection.DestinationDMAId;
					int externalEleID = connectivityConnection.DestinationEId;
					int externalInterface = connectivityConnection.DestinationInterfaceId;
					string elementKey = externalDMAID + "/" + externalEleID;
					if (!map_AllConnections.ContainsKey(elementKey))
					{
						var newPolledConnections = protocol.GetConnectivityConnections(externalDMAID, externalEleID);
						map_AllConnections[elementKey] = new FastCollection<ConnectivityConnection>(newPolledConnections.Values.ToList());
					}

					// Find the external connection based on source to destination being the opposite
					string uniqueKey = connectivityConnection.SourceDataMinerId + "/" + connectivityConnection.SourceElementId + "/" + connectivityConnection.SourceInterfaceId;
					FastCollection<ConnectivityConnection> elementConnections = map_AllConnections[elementKey];
					var returnConnections = elementConnections.FindValue(p => p.DestinationDMAId + "/" + p.DestinationEId + "/" + p.DestinationInterfaceId, uniqueKey).ToArray();
					if (returnConnections != null && returnConnections.Length > 0)
					{
						foreach (var returnConnection in returnConnections)
						{
							SaveConnectionProperties(returnConnection, full, fixedProperty, false, async, newConnectProps);
						}
					}
					else
					{
						protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Connection Property| Could not Locate Return Connection for External Connection with Name:" + connectivityConnection.ConnectionName, LogType.Error, LogLevel.NoLogging);
					}
				}

				return finalResult;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Connection Property|(Exception) Value at {1} with Exception:{2}", protocol.QActionID, "SaveConnectionProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Saves a collection of ConnectivityConnectionProperty objects to a given ConnectivityConnection.
		/// </summary>
		/// <param name="connectivityConnection">The Interface to link the Properties to.</param>
		/// <param name="full">Default: false, Indicates that every Property for this interface is provided in one go (similar to Fill Table At Once). Any Property managed by this Element that is still connected to this Interface will be removed.</param>
		/// <param name="fixedProperty">Default: false, Indicates this is a fixed property that can only be removed by the custom remove functionality.</param>
		/// <param name="addToReturnConnection">Default: false, In case of external connection, if this is set to true try and add the property to the return connection as well.</param>
		/// <param name="newConnectProps">One or more ConnectivityConnectionProperty Objects holding the new/updated data.</param>
		/// <returns>A boolean indicating the overall success of the save.</returns>
		public bool SaveConnectionProperties(ConnectivityConnection connectivityConnection, bool full, bool fixedProperty, bool addToReturnConnection, params ConnectivityConnectionProperty[] newConnectProps)
		{
			return SaveConnectionProperties(connectivityConnection, full, fixedProperty, addToReturnConnection, false, newConnectProps);
		}

		/// <summary>
		/// Saves a collection of ConnectivityConnectionProperty objects to a given ConnectivityConnection.
		/// </summary>
		/// <param name="connectivityConnection">The Interface to link the Properties to.</param>
		/// <param name="full">Default: false, Indicates that every Property for this interface is provided in one go (similar to Fill Table At Once). Any Property managed by this Element that is still connected to this Interface will be removed.</param>
		/// <param name="fixedProperty">Default: false, Indicates this is a fixed property that can only be removed by the custom remove functionality.</param>
		/// <param name="newConnectProps">One or more ConnectivityConnectionProperty Objects holding the new/updated data.</param>
		/// <returns>A boolean indicating the overall success of the save.</returns>
		public bool SaveConnectionProperties(ConnectivityConnection connectivityConnection, bool full, bool fixedProperty, params ConnectivityConnectionProperty[] newConnectProps)
		{
			return SaveConnectionProperties(connectivityConnection, full, fixedProperty, false, newConnectProps);
		}

		/// <summary>
		/// Saves a collection of ConnectivityConnectionProperty objects to a given ConnectivityConnection.
		/// </summary>
		/// <param name="connectivityConnection">The Interface to link the Properties to.</param>
		/// <param name="full">Default: false, Indicates that every Property for this interface is provided in one go (similar to Fill Table At Once). Any Property managed by this Element that is still connected to this Interface will be removed.</param>
		/// <param name="newConnectProps">One or more ConnectivityConnectionProperty Objects holding the new/updated data.</param>
		/// <returns>A boolean indicating the overall success of the save.</returns>
		public bool SaveConnectionProperties(ConnectivityConnection connectivityConnection, bool full, params ConnectivityConnectionProperty[] newConnectProps)
		{
			return SaveConnectionProperties(connectivityConnection, full, false, newConnectProps);
		}

		/// <summary>
		/// This method is used to save both internal and external connections.
		/// </summary>
		/// <param name="forceRefresh">Indicates if the cache of Connections needs to be refreshed (performs a protocol.GetConnectivityConnections() in the background).</param>
		/// <param name="requests">One or more DCFSaveConnectionRequest objects that define the connection you wish to save.</param>
		/// <returns>One or more DCFSaveConnectionResults in the same order as the DCFSaveConnectionRequests. If a Connection fails to get created then the connections inside the DCFSaveConnectionResult will be null.</returns>
		public DCFSaveConnectionResult[] SaveConnections(bool forceRefresh, params DCFSaveConnectionRequest[] requests)
		{
			DCFSaveConnectionResult[] result = new DCFSaveConnectionResult[requests.Length];
			for (int i = 0; i < requests.Length; i++)
			{
				DCFSaveConnectionRequest currentRequest = requests[i];
				result[i] = new DCFSaveConnectionResult(null, null, false, true);
				bool updated = true;
				if (currentRequest == null) continue;
				if (currentRequest.source == null || currentRequest.destination == null)
				{
					protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|ConnectionRequest Had empty Source or Destination. The Requested Interfaces might not exist.", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					continue;
				}

				try
				{
					if (currentRequest.customName == null) currentRequest.customName = currentRequest.source.InterfaceName + "->" + currentRequest.destination.InterfaceName;
					string sourceElementKey = currentRequest.source.ElementKey;
					if (unloadedElements.Contains(sourceElementKey))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Ignoring ConnectionRequest Unloaded Source Element:{1} ", protocol.QActionID, sourceElementKey), LogType.Error, LogLevel.NoLogging);
						continue;
					}

					string destinElementKey = currentRequest.destination.ElementKey;
					if (unloadedElements.Contains(destinElementKey))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Ignoring ConnectionRequest Unloaded Destination Element:{1} ", protocol.QActionID, destinElementKey), LogType.Error, LogLevel.NoLogging);
						continue;
					}

					bool internalConnection = sourceElementKey == destinElementKey;

					if (!map_AllConnections.ContainsKey(sourceElementKey) || forceRefresh)
					{
						var newPolledConnections = protocol.GetConnectivityConnections(currentRequest.source.DataMinerId, currentRequest.source.ElementId);
						if (newPolledConnections == null)
						{
							protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|GetConnectivityConnections returned a Null for Element:" + currentRequest.source.DataMinerId + "/" + currentRequest.source.ElementId + " Either there was No Response, SLNet was not available, or there was an Exception in the DataMiner DCF API code.", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
							continue;
						}

						map_AllConnections[sourceElementKey] = new FastCollection<ConnectivityConnection>(newPolledConnections.Values.ToList());
					}

					string uniqueKey;
					FastCollection<ConnectivityConnection> elementConnections = map_AllConnections[sourceElementKey];
					Expression<Func<ConnectivityConnection, object>> indexer;
					switch (currentRequest.connectionType)
					{
						case SaveConnectionType.Unique_Name:
							indexer = p => InternalExternalChar(p) + "_" + p.ConnectionName;
							uniqueKey = InternalExternalChar(currentRequest) + "_" + currentRequest.customName;
							break;

						case SaveConnectionType.Unique_Destination:
							indexer = p => InternalExternalChar(p) + "_" + p.DestinationDMAId + "/" + p.DestinationEId + "/" + p.DestinationInterfaceId;
							uniqueKey = InternalExternalChar(currentRequest) + "_" + currentRequest.destination.DataMinerId + "/" + currentRequest.destination.ElementId + "/" + currentRequest.destination.InterfaceId;
							break;

						case SaveConnectionType.Unique_Source:
							indexer = p => InternalExternalChar(p) + "_" + p.SourceInterfaceId;
							uniqueKey = InternalExternalChar(currentRequest) + "_" + Convert.ToString(currentRequest.source.InterfaceId);
							break;

						case SaveConnectionType.Unique_SourceAndDestination:
							indexer = p => InternalExternalChar(p) + "_" + p.SourceInterfaceId + "/" + p.DestinationDMAId + "/" + p.DestinationEId + "/" + p.DestinationInterfaceId;
							uniqueKey = InternalExternalChar(currentRequest) + "_" + currentRequest.source.InterfaceId + "/" + currentRequest.destination.ElementKey + "/" + currentRequest.destination.InterfaceId;
							break;

						default:
							indexer = p => InternalExternalChar(p) + "_" + p.ConnectionName;
							uniqueKey = InternalExternalChar(currentRequest) + "_" + currentRequest.customName;
							break;
					}

					elementConnections.AddIndex(indexer);

					// Find Original Connection
					ConnectivityConnection matchingConnection = elementConnections.FindValue(indexer, uniqueKey).FirstOrDefault();
					ConnectivityConnection newDestinationConnection = null;

					if (matchingConnection == null)
					{
						// Add a new Connection
						if (internalConnection)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Connection|Adding Internal Connection:" + currentRequest.customName + " | With Connection Filter: " + currentRequest.ConnectionFilter + " | on Element:" + currentRequest.source.ElementKey, LogType.Allways, LogLevel.NoLogging);
#endif
							// add an internal connection
							if (!currentRequest.source.AddConnection(currentRequest.customName, currentRequest.customName, currentRequest.destination, currentRequest.ConnectionFilter, false, out matchingConnection, out newDestinationConnection, 420000))
							{
								protocol.Log(string.Format("QA{0}: |ERR: DCF Connection|Adding Internal DCF Connection:{1} on element {2} Timed-Out after 7 minutes or returned false. Connection may not have been added", protocol.QActionID, currentRequest.customName, sourceElementKey), LogType.Error, LogLevel.NoLogging);
							}
						}
						else
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Connection|Adding External Connection:" + currentRequest.customName + " | With Connection Filter: " + currentRequest.ConnectionFilter + " | from Element:" + currentRequest.source.ElementKey + " To Element:" + currentRequest.destination.ElementKey, LogType.Allways, LogLevel.NoLogging);
#endif
							// add an external connection
							if (!currentRequest.source.AddConnection(currentRequest.customName, currentRequest.customName + " -RETURN", currentRequest.destination, currentRequest.ConnectionFilter, currentRequest.createExternalReturn, out matchingConnection, out newDestinationConnection, 420000))
							{
								protocol.Log(string.Format("QA{0}:|ERR: DCF Connection|Adding External DCF Connection:{1} from element {2} to element {3} Timed-Out after 7 minutes or returned false. Connection may not have been added", protocol.QActionID, currentRequest.customName, sourceElementKey, currentRequest.destination), LogType.Error, LogLevel.NoLogging);
							}
						}
					}
					else
					{
						// Update the Connection
						// Check if Update is Necessary
						if (
							matchingConnection.ConnectionName == currentRequest.customName
							&& matchingConnection.SourceDataMinerId + "/" + matchingConnection.SourceElementId == currentRequest.source.ElementKey
							&& matchingConnection.SourceInterfaceId == currentRequest.source.InterfaceId
							&& matchingConnection.DestinationDMAId + "/" + matchingConnection.DestinationEId == currentRequest.destination.ElementKey
							&& matchingConnection.DestinationInterfaceId == currentRequest.destination.InterfaceId
							&& matchingConnection.ConnectionFilter == currentRequest.ConnectionFilter)
						{
							// NO UPDATE NECESSARY
							updated = false;

#if debug
							if (internalConnection)
							{
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + matchingConnection.ConnectionId + ") |Not Updating Internal Connection (ID:" + matchingConnection.ConnectionId + ") To:" + currentRequest.customName + " on Element:" + currentRequest.source.ElementKey + "-- No Change Detected", LogType.Allways, LogLevel.NoLogging);
							}
							else
							{
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + matchingConnection.ConnectionId + ") |Not Updating External Connection (ID:" + matchingConnection.ConnectionId + ") To:" + currentRequest.customName + " from Element:" + currentRequest.source.ElementKey + " To Element:" + currentRequest.destination.ElementKey + "-- No Change Detected", LogType.Allways, LogLevel.NoLogging);
							}
#endif
						}
						else
						{
							// UPDATE NECESSARY
							if (internalConnection)
							{
#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + matchingConnection.ConnectionId + ") |Updating Internal Connection (ID:" + matchingConnection.ConnectionId + ") To:" + currentRequest.customName + " | With Connection Filter: " + currentRequest.ConnectionFilter + " | on Element:" + currentRequest.source.ElementKey, LogType.Allways, LogLevel.NoLogging);
#endif
								if (!matchingConnection.Update(currentRequest.customName, currentRequest.source.InterfaceId, currentRequest.customName, currentRequest.destination.DataMinerId, currentRequest.destination.ElementId, currentRequest.destination.InterfaceId, currentRequest.ConnectionFilter, false, out newDestinationConnection, 420000))
								{
									protocol.Log(string.Format("QA{0}:|ERR: DCF Connection (" + matchingConnection.ConnectionId + ") | Updating Internal DCF Connection:{1} on element {2} Timed-Out after 7 minutes or returned false. Connection may not have been updated", protocol.QActionID, currentRequest.customName, sourceElementKey), LogType.Error, LogLevel.NoLogging);
								}
							}
							else
							{
#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + matchingConnection.ConnectionId + ") |Updating External Connection (ID:" + matchingConnection.ConnectionId + ") To:" + currentRequest.customName + " | With Connection Filter: " + currentRequest.ConnectionFilter + " | from Element:" + currentRequest.source.ElementKey + " To Element:" + currentRequest.destination.ElementKey, LogType.Allways, LogLevel.NoLogging);
#endif
								if (!matchingConnection.Update(currentRequest.customName, currentRequest.source.InterfaceId, currentRequest.customName + " -RETURN", currentRequest.destination.DataMinerId, currentRequest.destination.ElementId, currentRequest.destination.InterfaceId, currentRequest.ConnectionFilter, currentRequest.createExternalReturn, out newDestinationConnection, 420000))
								{
									protocol.Log(string.Format("QA{0}:|ERR: DCF Connection (" + matchingConnection.ConnectionId + ") | Updating External DCF Connection:{1} from element {2} to element {3} Timed-Out after 7 minutes or returned false. Connection may not have been updated", protocol.QActionID, currentRequest.customName, sourceElementKey, currentRequest.destination.ElementKey), LogType.Error, LogLevel.NoLogging);
								}
							}
						}
					}

					string inpEleKye = CreateElementKey(currentRequest.source.DataMinerId, currentRequest.source.ElementId);
					if (currentRequest.fixedConnection)
					{
						// Indicating fixed connections with negative values
						AddToPropertyDictionary(newConnections, inpEleKye, matchingConnection.ConnectionId * -1);
					}
					else
					{
						AddToPropertyDictionary(newConnections, inpEleKye, matchingConnection.ConnectionId);
					}

					result[i] = new DCFSaveConnectionResult(matchingConnection, newDestinationConnection, internalConnection, updated);
				}
				catch (Exception e)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Connection| Exception in SaveConnections for connectionRequest:{1}  with exception:{2}", protocol.QActionID, currentRequest.customName, e.ToString()), LogType.Error, LogLevel.NoLogging);
				}
			}

			return result;
		}

		/// <summary>
		/// This method is used to save both internal and external connections.
		/// </summary>
		/// <param name="requests">One or more DCFSaveConnectionRequest objects that define the connection you wish to save.</param>
		/// <returns>One or more DCFSaveConnectionResults in the same order as the DCFSaveConnectionRequests. If a.</returns>
		public DCFSaveConnectionResult[] SaveConnections(params DCFSaveConnectionRequest[] requests)
		{
			return SaveConnections(false, requests);
		}

		/// <summary>
		/// Will save an External Connection based on a Unique Value used to indicate the interface. This method is to be used together with UpdateInterfaces method which creates a mapping of all Unique Values and Interface Objects. Make sure to call UpdateInternalInterfaces  or UpdateExternalInterfaces before using this method.
		/// </summary>
		/// <param name="inputSearchValue">Unique Value indicating the Input Interface.</param>
		/// <param name="outputSearchValue">Unique Value indicating the Output Interface.</param>
		/// <param name="connectionName">Name of the connection.</param>
		/// <param name="saveOnBoth">Indicates if the connection has to be made on the Output but in the opposite direction.</param>
		/// <returns>The created or Updated Connection objects in a Tuple with Item1 = local connection and Item2 = remote connection, will return Null if the save Failed.</returns>
		public Tuple<ConnectivityConnection, ConnectivityConnection> SaveExternalConnection(string inputSearchValue, string outputSearchValue, string connectionName, bool saveOnBoth)
		{
			ConnectivityInterface inp = null;
			ConnectivityInterface outp = null;
			Tuple<ConnectivityConnection, ConnectivityConnection> result = null;
			interfacesSV.TryGetValue(inputSearchValue, out inp);
			interfacesSV.TryGetValue(outputSearchValue, out outp);
			if (inp != null && outp != null)
			{
				result = SaveExternalConnection(inp, outp, connectionName, saveOnBoth);
			}

			return result;
		}

		/// <summary>
		/// Warning: [Obsolete - Please use SaveConnections()]Will add or update an external connection.
		/// </summary>
		/// <param name="input">The Input Interface.</param>
		/// <param name="output">The Output Interface.</param>
		/// <param name="connectionName">The Name of the connection.</param>
		/// <param name="saveOnBoth">Indicates if the connection has to be made on the Output but in the opposite direction.</param>
		/// <returns>The created or Updated Connection objects in a Tuple with Item1 = local connection and Item2 = remote connection, will return Null if the save Failed.</returns>
		public Tuple<ConnectivityConnection, ConnectivityConnection> SaveExternalConnection(ConnectivityInterface input, ConnectivityInterface output, string connectionName, bool saveOnBoth)
		{
			var conReq = new DCFSaveConnectionRequest(input, output, connectionName);
			conReq.createExternalReturn = saveOnBoth;
			var result = SaveConnections(conReq);
			if (result[0] != null)
			{
				return new Tuple<ConnectivityConnection, ConnectivityConnection>(result[0].sourceConnection, result[0].destinationConnection);
			}
			else return null;
		}

		/// <summary>
		/// Saves a collection of ConnectivityInterfaceProperty objects to a given ConnectivityInterface.
		/// </summary>
		/// <param name="connectivityInterface">The Interface to link the Properties to.</param>
		/// <param name="full">When full is true, this call will auto-remove any property previously added (by this code) and not being saved.</param>
		/// <param name="fixedProperty">When FixedProperty is true, this property will never be automatically removed. Only manual removal will get rid of it.</param>
		/// <param name="newInterfProps">One or more ConnectivityInterfaceProperty Objects holding the new/updated data.</param>
		/// <returns>A boolean indicating the save was successful.</returns>
		public bool SaveInterfaceProperties(ConnectivityInterface connectivityInterface, bool full, bool fixedProperty, params ConnectivityInterfaceProperty[] newInterfProps)
		{
			try
			{
				bool nullInputDetected = false;
				if (connectivityInterface == null)
				{
					protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property|Save Interface Properties ConnectivityInterface connectivityInterface was Null", protocol.QActionID), LogType.Error, LogLevel.NoLogging);
					nullInputDetected = true;
				}

				if (nullInputDetected) return false;

				if (cInterfacePropPID == -1)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: DCF Interface Property|DCFHelper Error: Using SaveInterfaceProperties requires the CurrentInterfacePropertiesPID to be defined! Please change the Options Objects to include this PID", LogType.Error, LogLevel.NoLogging);
					return false;
				}

				bool finalResult = true;

				// Retrieve all properties for this connection in a single call, if they haven't already been called earlier.
				Dictionary<string, ConnectivityInterfaceProperty> allProps;
				if (!interfaceProperties.TryGetValue(connectivityInterface.InterfaceId + "-" + connectivityInterface.ElementKey, out allProps))
				{
					var itfProps = connectivityInterface.InterfaceProperties;
					allProps = itfProps.GroupBy(p => p.Value.InterfacePropertyName).ToDictionary(item => item.Key, item => item.First().Value);
					itfProps = null;
					interfaceProperties.Add(connectivityInterface.InterfaceId + "-" + connectivityInterface.ElementKey, allProps);
				}

				// parse all properties and add them (this should be updated in the future to a bulk set if it gets added to DCF)
				int[] result = new int[newInterfProps.Length];

				for (int i = 0; i < newInterfProps.Length; i++)
				{
					var newInterfProp = newInterfProps[i];
					if (newInterfProp == null)
					{
						result[i] = -1;
						continue;
					}

					ConnectivityInterfaceProperty prop;
					if (allProps.TryGetValue(newInterfProp.InterfacePropertyName, out prop))
					{
						// UPDATE PROPERTY
						if (prop.InterfacePropertyName == newInterfProp.InterfacePropertyName && prop.InterfacePropertyType == newInterfProp.InterfacePropertyType && prop.InterfacePropertyValue == newInterfProp.InterfacePropertyValue)
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + prop.InterfacePropertyId + ")|Not Updating Interface Property:" + prop.InterfacePropertyId + "/" + newInterfProp.InterfacePropertyName + ":" + newInterfProp.InterfacePropertyValue + "-- No Change Detected", LogType.Allways, LogLevel.NoLogging);
#endif
						}
						else
						{
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + prop.InterfacePropertyId + ")|Updating Interface Property:" + prop.InterfacePropertyId + "/" + newInterfProp.InterfacePropertyName + ":" + newInterfProp.InterfacePropertyValue, LogType.Allways, LogLevel.NoLogging);
#endif
							prop.InterfacePropertyType = newInterfProp.InterfacePropertyType;
							prop.InterfacePropertyValue = newInterfProp.InterfacePropertyValue;
							if (prop.Update())
							{
								interfaceProperties[connectivityInterface.InterfaceId + "-" + connectivityInterface.ElementKey][newInterfProp.InterfacePropertyName] = prop;
							}
							else
							{
								protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property (" + prop.InterfacePropertyId + ")| Updating Interface Property:{1} Returned False! Property may not have been Updated!", protocol.QActionID, prop.InterfacePropertyId + "/" + newInterfProp.InterfacePropertyName + ":" + newInterfProp.InterfacePropertyValue), LogType.Error, LogLevel.NoLogging);
								finalResult = false;
							}
						}
					}
					else
					{
						// ADD PROPERTY
#if debug
						protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property|Adding Interface Property:" + newInterfProp.InterfacePropertyName + ":" + newInterfProp.InterfacePropertyValue, LogType.Allways, LogLevel.NoLogging);
#endif
						if (connectivityInterface.AddProperty(newInterfProp.InterfacePropertyName, newInterfProp.InterfacePropertyType, newInterfProp.InterfacePropertyValue, out prop, 42000))
						{
							interfaceProperties[connectivityInterface.InterfaceId + "-" + connectivityInterface.ElementKey].Add(newInterfProp.InterfacePropertyName, prop);
#if debug
							protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + prop.InterfacePropertyId + ")|Property Added Id:" + prop.InterfacePropertyId, LogType.Allways, LogLevel.NoLogging);
#endif
						}
						else
						{
							protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property (" + prop.InterfacePropertyId + ")|Adding Interface Property:{1} Timed out after 7 minutes. Property may not have been Added!", protocol.QActionID, prop.InterfacePropertyId + "/" + newInterfProp.InterfacePropertyName + ":" + newInterfProp.InterfacePropertyValue), LogType.Error, LogLevel.NoLogging);
							finalResult = false;
						}
					}

					result[i] = prop.InterfacePropertyId;

					string eleKey = CreateElementKey(connectivityInterface.DataMinerId, connectivityInterface.ElementId);
					if (fixedProperty)
					{
						AddToPropertyDictionary(newInterfaceProperties, eleKey, -1 * result[i]);
					}
					else
					{
						AddToPropertyDictionary(newInterfaceProperties, eleKey, result[i]);
					}
				}

				if (full)
				{
					var propertiesToDelete = allProps.Values.Select(p => p.InterfacePropertyId).Except(result);
					RemoveInterfaceProperties(connectivityInterface, false, propertiesToDelete.ToArray());
				}

				return finalResult;
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface Property| (Exception) Value at {1} with Exception:{2}", protocol.QActionID, "SaveInterfaceProperties", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return false;
		}

		/// <summary>
		/// Saves a collection of ConnectivityInterfaceProperty objects to a given ConnectivityInterface.
		/// </summary>
		/// <param name="connectivityInterface">The Interface to link the Properties to.</param>
		/// <param name="full">Indicates that every Property for this interface is provided in one go (similar to Fill Table At Once). Any Property managed by this Element that is still connected to this Interface will be removed.</param>
		/// <param name="newInterfProps">One or more ConnectivityConnectionProperty Objects holding the new/updated data.</param>
		/// <returns>An Integer array holding all the ID's of successfully saved Properties.</returns>
		public bool SaveInterfaceProperties(ConnectivityInterface connectivityInterface, bool full, params ConnectivityInterfaceProperty[] newInterfProps)
		{
			return SaveInterfaceProperties(connectivityInterface, full, false, newInterfProps);
		}

		/// <summary>
		/// Will save an Internal Connection based on a Unique Value used to indicate the interface. This method is to be used together with UpdateInterfaces method which creates a mapping of all Unique Values and Interface Objects. Make sure to call UpdateInternalInterfaces  or UpdateExternalInterfaces before using this method.
		/// </summary>
		/// <param name="inputSearchValue">Unique Value indicating the Input Interface.</param>
		/// <param name="outputSearchValue">Unique Value indicating the Output Interface.</param>
		/// <param name="connectionName">Name of the connection.</param>
		/// <returns>The created or Updated Connection object, will return Null if the save Failed.</returns>
		public ConnectivityConnection SaveInternalConnection(string inputSearchValue, string outputSearchValue, string connectionName)
		{
			ConnectivityInterface inp = null;
			ConnectivityInterface outp = null;
			ConnectivityConnection connection = null;
			interfacesSV.TryGetValue(inputSearchValue, out inp);
			interfacesSV.TryGetValue(outputSearchValue, out outp);
			if (inp != null && outp != null)
			{
				connection = SaveInternalConnection(inp, outp, connectionName);
			}

			return connection;
		}

		/// <summary>
		/// Will Save an internal connection [Obsolete - Please use SaveConnections()].
		/// </summary>
		/// <param name="input">The Input Interface.</param>
		/// <param name="output">The Output Interface.</param>
		/// <param name="connectionName">The Name for this Connection.</param>
		/// <returns>A ConnectivityConnection object, will return Null if the save Failed.</returns>
		public ConnectivityConnection SaveInternalConnection(ConnectivityInterface input, ConnectivityInterface output, string connectionName)
		{
			var result = SaveConnections(new DCFSaveConnectionRequest(input, output, connectionName));
			if (result[0] != null)
			{
				return result[0].sourceConnection;
			}
			else return null;
		}

		/// <summary>
		/// Creates/Updates an Internal Mapping of All Interfaces with as Key the string value from the 'searchValueColumnIdx' chosen in this method. And the Value is the ConnectivityInterface Object.
		/// </summary>
		/// <param name="dmaID">The dma ID.</param>
		/// <param name="eleID">The element ID.</param>
		/// <param name="tableID">Table containing Interfaces (this should correspond to a Parameter Group Dynamic ID).</param>
		/// <param name="descrColumnIdx">IDX of the column Containing the Description of the row. If Naming is used, this IDX should contain the complete description created by Naming.</param>
		/// <param name="searchValueColumnIdx">IDX of the column containing a string value to be used as Key to lookup ConnectivityInterface Objects. This should be unique.</param>
		/// <param name="parameterGroupNames">All possible ParameterGroupNames that can occur for this Table.</param>
		public void UpdateExternalInterfaces(int dmaID, int eleID, int tableID, UInt32 descrColumnIdx, UInt32 searchValueColumnIdx, string[] parameterGroupNames)
		{
			try
			{
				var allInterfaces = protocol.GetConnectivityInterfaces(dmaID, eleID);
				var newInterfacesNames = allInterfaces.GroupBy(p => p.Value.InterfaceName).ToDictionary(item => item.Key, item => item.First().Value);
				allInterfaces = null;
				DMSClass dms = new DMSClass();
				Object returnValue = new Object();
				dms.Notify(87/*DMS_GET_VALUE*/, 0, new UInt32[] { (UInt32)dmaID, (UInt32)eleID }, tableID, out returnValue);

				// Checking returnValue for null will not work, returnValue will throw a COMException
				object[] returnValueA = (Object[])returnValue;
				object[] columns = (Object[])returnValueA[4]; // Value of table
				if (columns == null) return;
				object[] keys = (object[])columns[descrColumnIdx];
				object[] ips = (object[])columns[searchValueColumnIdx];

				if (ips != null && ips.Length > 0)
				{
					for (int i = 0; i < ips.Length; i++)
					{
						string key = Convert.ToString(((object[])keys[i])[0]);
						string searchValue = Convert.ToString(((object[])ips[i])[0]);
						for (int u = 0; u < parameterGroupNames.Length; u++)
						{
							string intfKey = parameterGroupNames[u] + " " + key;
							ConnectivityInterface interf;
							newInterfacesNames.TryGetValue(intfKey, out interf);
							if (interf != null)
							{
								interfacesSV[dmaID + "/" + eleID + "/" + searchValue] = interf;
								break;
							}
						}
					}
				}
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(DMS Call ERROR) {1} at UpdateExternalInterfaces with Exception:{2}", protocol.QActionID, "Bad DMAId/EleID/ParaID", e.ToString()), LogType.Error, LogLevel.NoLogging);
			}
		}

		/// <summary>
		/// Creates/Updates an Internal Mapping of All Interfaces with as Key the string value from the 'searchValueColumnIdx' chosen in this method. And the Value is the ConnectivityInterface Object.
		/// </summary>
		/// <param name="tableID">Table containing Interfaces (this should correspond to a Parameter Group Dynamic ID).</param>
		/// <param name="descrColumnIdx">IDX of the column Containing the Description of the row. If Naming is used, this IDX should contain the complete description created by Naming.</param>
		/// <param name="searchValueColumnIdx">IDX of the column containing a string value to be used as Key to lookup ConnectivityInterface Objects. This should be unique.</param>
		/// <param name="parameterGroupNames">All possible ParameterGroupNames that can occur for this Table.</param>
		public void UpdateInterfaces(int tableID, UInt32 descrColumnIdx, UInt32 searchValueColumnIdx, params string[] parameterGroupNames)
		{
			try
			{
				var allInterfaces = protocol.GetConnectivityInterfaces(protocol.DataMinerID, protocol.ElementID);
				var newInterfacesNames = allInterfaces.GroupBy(p => p.Value.InterfaceName).ToDictionary(item => item.Key, item => item.First().Value);
				allInterfaces = null;
				object[] columns = (Object[])protocol.NotifyProtocol(321 /*NT_GT_TABLE_COLUMNS*/, tableID, new UInt32[] { descrColumnIdx, searchValueColumnIdx });
				object[] keys = (object[])columns[0];
				object[] ips = (object[])columns[1];

				if (ips != null && ips.Length > 0)
				{
					for (int i = 0; i < ips.Length; i++)
					{
						string key = Convert.ToString(keys[i]);
						string searchValue = Convert.ToString(ips[i]);
						for (int u = 0; u < parameterGroupNames.Length; u++)
						{
							string intfKey = parameterGroupNames[u] + " " + key;
							ConnectivityInterface interf;
							newInterfacesNames.TryGetValue(intfKey, out interf);
							if (interf != null)
							{
								interfacesSV[searchValue] = interf;
								break;
							}
						}
					}
				}
			}
			catch (Exception e)
			{
				protocol.Log(string.Format("QA{0}:|ERR: DCF Interface|(Exception) at UpdateInterfaces with Exception:{1}", protocol.QActionID, e.ToString()), LogType.Error, LogLevel.NoLogging);
			}
		}

		private void AddToPropertyDictionary(Dictionary<string, HashSet<int>> propertyDictionary, string eleKey, int[] propIDs)
		{
			HashSet<int> returned;
			if (propertyDictionary.TryGetValue(eleKey, out returned))
			{
				returned.UnionWith(propIDs);
			}
			else
			{
				returned = new HashSet<int>(propIDs);
				propertyDictionary.Add(eleKey, returned);
			}
		}

		private void AddToPropertyDictionary(Dictionary<string, HashSet<int>> propertyDictionary, string eleKey, int propID)
		{
			HashSet<int> returned;
			if (propertyDictionary.TryGetValue(eleKey, out returned))
			{
				returned.Add(propID);
			}
			else
			{
				returned = new HashSet<int>();
				returned.Add(propID);
				propertyDictionary.Add(eleKey, returned);
			}
		}

		private string CreateElementKey(int dataMinerID, int eleID)
		{
			return dataMinerID + "/" + eleID;
		}

		private string InternalExternalChar(ConnectivityConnection p)
		{
			return (p.DestinationDMAId == p.SourceDataMinerId && p.SourceElementId == p.DestinationEId) ? "I" : "E";
		}

		private string InternalExternalChar(DCFSaveConnectionRequest p)
		{
			return (p.source.ElementKey == p.destination.ElementKey) ? "I" : "E";
		}

		/// <summary>
		/// Allows to know if an element is active (in SLDMS) (and optionally, loop until it is).
		/// </summary>
		/// <param name="protocol">The SLProtocol object.</param>
		/// <param name="iDmaId">ID of the DMA on which the element to be checked is located.</param>
		/// <param name="iElementId">ID of the element to be checked.</param>
		/// <param name="iSecondsToWait">Number of seconds to wait for the element to be active.</param>
		/// <returns>True if the element is active within the given 'iSecondsToWait'.</returns>
		private bool IsElementActiveInSLDMS(SLProtocol protocol, UInt32 iDmaId, UInt32 iElementId, int iSecondsToWait = 0)
		{
			bool bFullyLoaded = false;

			DateTime dtStart = DateTime.Now;
			int iElapsedSeconds = 0;

			while (!bFullyLoaded && iElapsedSeconds <= iSecondsToWait)
			{
				try
				{
					DMSClass dms = new DMSClass();
					object oState = null;
					dms.Notify(91/*DMS_GET_ELEMENT_STATE*/, 0, iDmaId, iElementId, out oState);

					string sElementState = Convert.ToString(oState);
					if (sElementState.Equals("Active", StringComparison.InvariantCultureIgnoreCase))
					{
						bFullyLoaded = true;
					}
				}
				catch (Exception ex)
				{
					protocol.Log("QA" + protocol.QActionID + "|ERR: IsElementActiveInSLDMS|Exception thrown : " + Environment.NewLine + ex.ToString(), LogType.Error, LogLevel.NoLogging);
				}

				if (!bFullyLoaded)
				{
					System.Threading.Thread.Sleep(100);
					iElapsedSeconds = (int)(DateTime.Now - dtStart).TotalSeconds;
				}
			}

			return bFullyLoaded;
		}

		/// <summary>
		/// Allows to know if an element is fully loaded in SLElement (and optionally, loop until it is).
		/// </summary>
		/// <param name="protocol">The SLProtocol object.</param>
		/// <param name="iDmaId">ID of the DMA on which the element to be checked is located.</param>
		/// <param name="iElementId">ID of the element to be checked.</param>
		/// <param name="iSecondsToWait">Number of seconds to wait for the element to be fully loaded.</param>
		/// <returns>True if the element is fully loaded within the given 'iSecondsToWait'.</returns>
		private bool IsElementLoadedInSLElement(SLProtocol protocol, UInt32 iDmaId, UInt32 iElementId, int iSecondsToWait = 0)
		{
			bool bIsFullyStarted = false;

			DateTime dtStart = DateTime.Now;
			int iElapsedSeconds = 0;
			string sExceptionThrown = null;

			while (!bIsFullyStarted && iElapsedSeconds <= iSecondsToWait)
			{
				try
				{
					object oResult = protocol.NotifyDataMiner(377/*NT_ELEMENT_STARTUP_COMPLETE*/, new UInt32[] { iDmaId, iElementId }, null);

					if (oResult != null)
					{
						bIsFullyStarted = Convert.ToBoolean(oResult);
					}
				}
				catch (Exception ex)
				{
					sExceptionThrown = ex.ToString();
				}

				if (!bIsFullyStarted)
				{
					System.Threading.Thread.Sleep(100);
					iElapsedSeconds = (int)(DateTime.Now - dtStart).TotalSeconds;
				}
			}

			if (!bIsFullyStarted && sExceptionThrown != null)
			{
				protocol.Log("QA" + protocol.QActionID + "|ERR: IsElementLoadedInSLElement|Exception thrown :" + Environment.NewLine + sExceptionThrown, LogType.Error, LogLevel.NoLogging);
			}

			return bIsFullyStarted;
		}

		/// <summary>
		/// Allows to know if an element is fully loaded in SLNet (and optionally, loop until it is).
		/// </summary>
		/// <param name="protocol">The SLProtocol object.</param>
		/// <param name="iDmaId">ID of the DMA on which the element to be checked is located.</param>
		/// <param name="iElementId">ID of the element to be checked.</param>
		/// <param name="iSecondsToWait">Number of seconds to wait for the element to be fully loaded.</param>
		/// <returns>True if the element is fully loaded within the given 'iSecondsToWait'.</returns>
		private bool IsElementLoadedInSLNet(SLProtocol protocol, UInt32 iDmaId, UInt32 iElementId, int iSecondsToWait = 0)
		{
			bool bFullyLoaded = false;

			DateTime dtStart = DateTime.Now;
			int iElapsedSeconds = 0;

			while (!bFullyLoaded && iElapsedSeconds <= iSecondsToWait)
			{
				GetElementProtocolMessage getElPro = new GetElementProtocolMessage((int)iDmaId, (int)iElementId);
				DMSMessage[] result = protocol.SLNet.SendMessage(getElPro);
				if (result != null)
				{
					foreach (GetElementProtocolResponseMessage response in result)
					{
						if (response != null)
						{
							if (!response.WasBuiltWithUnsafeData)
							{
								bFullyLoaded = true;
							}
						}
					}
				}

				if (!bFullyLoaded)
				{
					System.Threading.Thread.Sleep(100);
					iElapsedSeconds = (int)(DateTime.Now - dtStart).TotalSeconds;
				}
			}

			return bFullyLoaded;
		}

		private bool IsElementStarted(SLProtocol protocol, int dmaID, int eleID, int timeoutSeconds)
		{
			bool result = false;
			try
			{
				UInt32[] varValue1 = new UInt32[2];
				varValue1[0] = Convert.ToUInt32(dmaID);
				varValue1[1] = Convert.ToUInt32(eleID);
				result = true;
#if debug
				protocol.Log("QA" + protocol.QActionID + "| DBG Load Check ***** SLDMS", LogType.DebugInfo, LogLevel.NoLogging);
#endif
				result = result && IsElementActiveInSLDMS(protocol, varValue1[0], varValue1[1], timeoutSeconds);
#if debug
				if (result == false)
				{
					protocol.Log("QA" + protocol.QActionID + "|SLDMS Check Failed!", LogType.Error, LogLevel.NoLogging);
					return result;
				}

				protocol.Log("QA" + protocol.QActionID + "| DBG Load Check ***** SLElement", LogType.DebugInfo, LogLevel.NoLogging);
#endif
				result = result && IsElementLoadedInSLElement(protocol, varValue1[0], varValue1[1], timeoutSeconds);
				if (result == false)
				{
					protocol.Log("QA" + protocol.QActionID + "|SLElement Check Failed!", LogType.Error, LogLevel.NoLogging);
					return result;
				}
#if debug
				protocol.Log("QA" + protocol.QActionID + "| DBG Load Check ***** SLNet", LogType.DebugInfo, LogLevel.NoLogging);
#endif
				result = result && IsElementLoadedInSLNet(protocol, varValue1[0], varValue1[1], timeoutSeconds);
				if (result == false)
				{
					protocol.Log("QA" + protocol.QActionID + "|SLNet Check Failed!", LogType.Error, LogLevel.NoLogging);
					return result;
				}
#if debug
				protocol.Log("QA" + protocol.QActionID + "| DBG Load Check ***** Finished", LogType.DebugInfo, LogLevel.NoLogging);
#endif
			}
			catch (Exception e)
			{
				result = false;
				protocol.Log(string.Format("QA{0}:|ERR: DCF STARTUP|(Exception) at IsElementStarted:{1} with Exception:{2}", protocol.QActionID, dmaID + "/" + eleID, e.ToString()), LogType.Error, LogLevel.NoLogging);
			}

			return result;
		}

		private void PropDictionaryToBuffer(Dictionary<string, HashSet<int>> dic, int paramID)
		{
			StringBuilder newBuffer = new StringBuilder();
			if (dic != null)
			{
				foreach (var dicEle in dic)
				{
					string eleKey = dicEle.Key;
					newBuffer.Append(eleKey);
					foreach (int pid in dicEle.Value)
					{
						newBuffer.Append('/');
						newBuffer.Append(pid);
					}

					newBuffer.Append(";");
				}
			}

			string result = newBuffer.ToString().TrimEnd(';');
#if debug
			protocol.Log("QA" + protocol.QActionID + "|DCF New Mapping (" + paramID + ")|" + result, LogType.Allways, LogLevel.NoLogging);
#endif
			protocol.SetParameter(paramID, result);
		}

		private void PropertiesBufferToDictionary(int parameterID, Dictionary<string, HashSet<int>> propDic)
		{
			string currentItfsProps = Convert.ToString(protocol.GetParameter(parameterID));
#if debug
			protocol.Log("QA" + protocol.QActionID + "|DCF Old Mapping (" + parameterID + ")|" + currentItfsProps, LogType.Allways, LogLevel.NoLogging);
#endif
			foreach (string itfsProp in currentItfsProps.Split(';'))
			{
				if (!String.IsNullOrEmpty(itfsProp))
				{
					string eleKey;
					string propKeys;
					SplitElePropKey(itfsProp, out eleKey, out propKeys);
					if (String.IsNullOrEmpty(propKeys)) continue;
					string[] propKeysA = propKeys.Split('/');
					int[] propKeysInt = Array.ConvertAll<string, int>(propKeysA, p => Convert.ToInt32(p));
					AddToPropertyDictionary(propDic, eleKey, propKeysInt);
				}
			}
		}

		private void RemoveDeleted()
		{
			Dictionary<string, HashSet<int>> itfsToDelete = new Dictionary<string, HashSet<int>>();
			Dictionary<string, HashSet<int>> conPropsToDelete = new Dictionary<string, HashSet<int>>();
			Dictionary<string, HashSet<int>> connectionsToDelete = new Dictionary<string, HashSet<int>>();
			Dictionary<string, string> elementStates = new Dictionary<string, string>();

			if (cConnectionsPID != -1)
			{
				foreach (var currentConnection in currentConnections)
				{
					HashSet<int> internalNewConnections;
					IEnumerable<int> source;
					if (newConnections.TryGetValue(currentConnection.Key, out internalNewConnections))
					{
						source = currentConnection.Value.Except(internalNewConnections).Where(i => i >= 0); // all the current values not in new
					}
					else
					{
						source = currentConnection.Value.Where(i => i >= 0);
					}

					HashSet<int> currentToDelete;
					if (connectionsToDelete.TryGetValue(currentConnection.Key, out currentToDelete))
					{
						currentToDelete.UnionWith(source);
					}
					else
					{
						HashSet<int> internalToDelete = new HashSet<int>(source);
						connectionsToDelete.Add(currentConnection.Key, internalToDelete);
					}
				}
			}

			if (cInterfacePropPID != -1)
			{
				foreach (var currentInterfaceProperty in currentInterfaceProperties)
				{
					HashSet<int> internalNewProps;
					IEnumerable<int> source;
					if (newInterfaceProperties.TryGetValue(currentInterfaceProperty.Key, out internalNewProps))
					{
						source = currentInterfaceProperty.Value.Except(internalNewProps).Where(i => i >= 0); // all the current values not in new
					}
					else
					{
						source = currentInterfaceProperty.Value.Where(i => i >= 0);
					}

					HashSet<int> currentToDelete;
					if (itfsToDelete.TryGetValue(currentInterfaceProperty.Key, out currentToDelete))
					{
						currentToDelete.UnionWith(source);
					}
					else
					{
						HashSet<int> internalToDelete = new HashSet<int>(source);
						itfsToDelete.Add(currentInterfaceProperty.Key, internalToDelete);
					}
				}
			}

			if (cConnectionPropPID != -1)
			{
				foreach (var currentConnectionProperty in currentConnectionProperties)
				{
					HashSet<int> internalNewProps;
					IEnumerable<int> source;
					if (newConnectionProperties.TryGetValue(currentConnectionProperty.Key, out internalNewProps))
					{
						source = currentConnectionProperty.Value.Except(internalNewProps).Where(i => i >= 0); // all the current values not in new
					}
					else
					{
						source = currentConnectionProperty.Value.Where(i => i >= 0);
					}

					HashSet<int> currentToDelete;
					if (conPropsToDelete.TryGetValue(currentConnectionProperty.Key, out currentToDelete))
					{
						currentToDelete.UnionWith(source);
					}
					else
					{
						HashSet<int> internalToDelete = new HashSet<int>(source);
						conPropsToDelete.Add(currentConnectionProperty.Key, internalToDelete);
					}
				}
			}

			// Delete Connections (will automatically remove all properties for this connection)
			if (connectionsToDelete.Count > 0)
			{
				foreach (var delCon in connectionsToDelete)
				{
					if (unloadedElements.Contains(delCon.Key))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Cleanup|Ignoring Connection Cleanup: Unloaded Element:{1} ", protocol.QActionID, delCon.Key), LogType.Error, LogLevel.NoLogging);
						continue;
					}

					string eleKey = delCon.Key;
					if (delCon.Value.Count > 0)
					{
						int thisDMAID;
						int thisEleID;
						SplitEleKey(eleKey, out thisDMAID, out thisEleID);

						HashSet<int> managedNewByThisProtocol;
						if (!newConnections.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

						HashSet<int> managedCurrentByThisProtocol;
						if (!currentConnections.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

						string state;
						if (!elementStates.TryGetValue(eleKey, out state)) state = GetElementState((UInt32)thisDMAID, (UInt32)thisEleID);
						bool deleted = String.IsNullOrEmpty(state);
						bool active = state == "active";

						foreach (int key in delCon.Value)
						{
							if (active || deleted)
							{
								if (active)
								{
									protocol.DeleteConnectivityConnection(key, thisDMAID, thisEleID, true);
								}

#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Connection (" + key + ")|Sync- Deleted Connection:" + eleKey + "/" + key, LogType.Allways, LogLevel.NoLogging);
#endif
								managedCurrentByThisProtocol.Remove(key);
								managedNewByThisProtocol.Remove(key);
							}
							else
							{
								managedNewByThisProtocol.Add(key);
							}
						}

						newConnections[eleKey] = managedNewByThisProtocol;
						currentConnections[eleKey] = managedCurrentByThisProtocol;
					}
				}
			}

			if (itfsToDelete.Count > 0)
			{
				// Delete Interface Properties
				foreach (var delItf in itfsToDelete)
				{
					if (unloadedElements.Contains(delItf.Key))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Cleanup|Ignoring Interface Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, delItf.Key), LogType.Error, LogLevel.NoLogging);
						continue;
					}

					string eleKey = delItf.Key;
					HashSet<int> managedNewByThisProtocol;
					if (delItf.Value.Count > 0)
					{
						if (!newInterfaceProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

						HashSet<int> managedCurrentByThisProtocol;
						if (!currentInterfaceProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

						int thisDMAID;
						int thisEleID;
						SplitEleKey(eleKey, out thisDMAID, out thisEleID);

						string state;
						if (!elementStates.TryGetValue(eleKey, out state)) state = GetElementState((UInt32)thisDMAID, (UInt32)thisEleID);
						bool deleted = String.IsNullOrEmpty(state);
						bool active = state == "active";

						foreach (int key in delItf.Value)
						{
							if (active || deleted)
							{
								if (active)
								{
									protocol.DeleteConnectivityInterfaceProperty(key, thisDMAID, thisEleID);
								}

#if debug
								protocol.Log("QA" + protocol.QActionID + "|DCF Interface Property (" + key + ")|Sync- Deleted Interface Property:" + eleKey + "/" + key, LogType.Allways, LogLevel.NoLogging);
#endif
								managedCurrentByThisProtocol.Remove(key);
								managedNewByThisProtocol.Remove(key);
							}
							else
							{
								managedNewByThisProtocol.Add(key);
							}
						}

						newInterfaceProperties[eleKey] = managedNewByThisProtocol;
						currentInterfaceProperties[eleKey] = managedCurrentByThisProtocol;
					}
				}
			}

			if (conPropsToDelete.Count > 0)
			{
				foreach (var delConProp in conPropsToDelete)
				{
					if (unloadedElements.Contains(delConProp.Key))
					{
						protocol.Log(string.Format("QA{0}: |ERR: DCF Cleanup|Ignoring Connection Property Cleanup: Unloaded Element:{1} ", protocol.QActionID, delConProp.Key), LogType.Error, LogLevel.NoLogging);
						continue;
					}

					string eleKey = delConProp.Key;
					int thisDMAID;
					int thisEleID;
					SplitEleKey(eleKey, out thisDMAID, out thisEleID);

					if (delConProp.Value.Count > 0)
					{
						HashSet<int> managedNewByThisProtocol;
						if (!newConnectionProperties.TryGetValue(eleKey, out managedNewByThisProtocol)) managedNewByThisProtocol = new HashSet<int>();

						HashSet<int> managedCurrentByThisProtocol;
						if (!currentConnectionProperties.TryGetValue(eleKey, out managedCurrentByThisProtocol)) managedCurrentByThisProtocol = new HashSet<int>();

						string state;
						if (!elementStates.TryGetValue(eleKey, out state)) state = GetElementState((UInt32)thisDMAID, (UInt32)thisEleID);
						bool deleted = String.IsNullOrEmpty(state);
						bool active = state == "active";

						foreach (int key in delConProp.Value)
						{
							if (active || deleted)
							{
								if (active)
								{
									protocol.DeleteConnectivityConnectionProperty(key, thisDMAID, thisEleID);
								}

#if debug
								protocol.Log("QA" + protocol.QActionID + "|Connection Property (" + key + ") |Sync- Deleted Connection Property:" + eleKey + "/" + key, LogType.Allways, LogLevel.NoLogging);
#endif
								managedCurrentByThisProtocol.Remove(key);
								managedNewByThisProtocol.Remove(key);
							}
							else
							{
								managedNewByThisProtocol.Add(key);
							}
						}

						newConnectionProperties[eleKey] = managedNewByThisProtocol;
						currentConnectionProperties[eleKey] = managedCurrentByThisProtocol;
					}
				}
			}
		}

		private bool SplitEleKey(string elementKey, out int dmaID, out int elementID)
		{
			string[] elementKeyA = elementKey.Split('/');
			if (elementKeyA.Length > 1)
			{
				dmaID = Convert.ToInt32(elementKeyA[0]);
				elementID = Convert.ToInt32(elementKeyA[1]);
				return true;
			}
			else
			{
				dmaID = -1;
				elementID = -1;
				return false;
			}
		}

		private void SplitElePropKey(string itfsProp, out string eleID, out string propKey)
		{
			int endOfDmaID = itfsProp.IndexOf('/');
			if (endOfDmaID != -1)
			{
				int endOfEleID = itfsProp.IndexOf('/', endOfDmaID + 1);
				if (endOfEleID == -1)
				{
					eleID = itfsProp;
					propKey = String.Empty;
				}
				else
				{
					eleID = itfsProp.Substring(0, endOfEleID);
					propKey = itfsProp.Substring(endOfEleID + 1);
				}
			}
			else
			{
				eleID = String.Empty;
				propKey = String.Empty;
			}
		}

		/// <summary>
		/// Syncs all changes done to external Parameters that hold the Property Mappings. This needs to be called to keep track of the properties that are managed by this driver.
		/// </summary>
		private void SyncMapping()
		{
#if debug
			protocol.Log("QA" + protocol.QActionID + "|DCF Starting Sync|", LogType.Allways, LogLevel.NoLogging);
#endif

			// Add the negative mapping to the newMapping
			if (cConnectionPropPID != -1) SyncNegative(currentConnectionProperties, newConnectionProperties);
			if (cInterfacePropPID != -1) SyncNegative(currentInterfaceProperties, newInterfaceProperties);
			if (cConnectionsPID != -1) SyncNegative(currentConnections, newConnections);

			switch (helperType)
			{
				case SyncOption.Custom:

					if (cConnectionPropPID != -1)
					{
						foreach (var v in newConnectionProperties)
						{
							HashSet<int> ids;
							if (currentConnectionProperties.TryGetValue(v.Key, out ids))
							{
								ids.UnionWith(v.Value);
								currentConnectionProperties[v.Key] = ids;
							}
							else
							{
								currentConnectionProperties.Add(v.Key, v.Value);
							}
						}
					}

					if (cInterfacePropPID != -1)
					{
						foreach (var v in newInterfaceProperties)
						{
							HashSet<int> ids;
							if (currentInterfaceProperties.TryGetValue(v.Key, out ids))
							{
								ids.UnionWith(v.Value);
								currentInterfaceProperties[v.Key] = ids;
							}
							else
							{
								currentInterfaceProperties.Add(v.Key, v.Value);
							}
						}
					}

					if (cConnectionsPID != -1)
					{
						foreach (var v in newConnections)
						{
							HashSet<int> ids;
							if (currentConnections.TryGetValue(v.Key, out ids))
							{
								ids.UnionWith(v.Value);
								currentConnections[v.Key] = ids;
							}
							else
							{
								currentConnections.Add(v.Key, v.Value);
							}
						}
					}

					SyncToParams();
					break;

				case SyncOption.PollingSync:
					SyncToParams();
					break;

				case SyncOption.EndOfPolling:
					RemoveDeleted();
					if (newInterfacePropID != -1)
					{
						protocol.SetParameter(newInterfacePropID, String.Empty);
					}

					if (newConnectionPropPID != -1)
					{
						protocol.SetParameter(newConnectionPropPID, String.Empty);
					}

					if (newConnectionsPID != -1)
					{
						protocol.SetParameter(newConnectionsPID, String.Empty);
					}

					if (cInterfacePropPID != -1)
					{
						PropDictionaryToBuffer(newInterfaceProperties, cInterfacePropPID);
					}

					if (cConnectionPropPID != -1)
					{
						PropDictionaryToBuffer(newConnectionProperties, cConnectionPropPID);
					}

					if (cConnectionsPID != -1)
					{
						PropDictionaryToBuffer(newConnections, cConnectionsPID);
					}

					break;
			}
		}

		private void SyncNegative(Dictionary<string, HashSet<int>> currentDic, Dictionary<string, HashSet<int>> newDic)
		{
			foreach (var v in currentDic)
			{
				foreach (var p in v.Value)
				{
					if (p < 0)
					{
						AddToPropertyDictionary(newDic, v.Key, p);
					}
				}
			}
		}

		private void SyncToParams()
		{
			if (newInterfacePropID != -1)
			{
				PropDictionaryToBuffer(newInterfaceProperties, newInterfacePropID);
			}

			if (newConnectionPropPID != -1)
			{
				PropDictionaryToBuffer(newConnectionProperties, newConnectionPropPID);
			}

			if (newConnectionsPID != -1)
			{
				PropDictionaryToBuffer(newConnections, newConnectionsPID);
			}

			if (cInterfacePropPID != -1)
			{
				PropDictionaryToBuffer(currentInterfaceProperties, cInterfacePropPID);
			}

			if (cConnectionPropPID != -1)
			{
				PropDictionaryToBuffer(currentConnectionProperties, cConnectionPropPID);
			}

			if (cConnectionsPID != -1)
			{
				PropDictionaryToBuffer(currentConnections, cConnectionsPID);
			}
		}

		#endregion Methods
	}

	/// <summary>
	/// Provide PIDs that will hold Mapping of all Connections and Properties Managed by this Element. Leaving PIDs out will create a more efficient DCFHelper Object but with limited functionality.
	/// For Example: Only defining the CurrentConnectionsPID will allow a user to Add and Remove Connections but it will not be possible to Manipulate any Properties.
	/// </summary>
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DCFMappingOptions
	{
		public SyncOption HelperType = SyncOption.Custom;
		public int PIDcurrentConnectionProperties = -1;
		public int PIDcurrentConnections = -1;
		public int PIDcurrentInterfaceProperties = -1;
		public int PIDnewConnectionProperties = -1;
		public int PIDnewConnections = -1;
		public int PIDnewInterfaceProperties = -1;
	}

	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DCFSaveConnectionRequest
	{
		public SaveConnectionType connectionType = SaveConnectionType.Unique_Name;
		public bool createExternalReturn = true;
		public string customFilter = String.Empty;
		public string customName;
		public ConnectivityInterface destination;
		public bool fixedConnection;
		public ConnectivityInterface source;

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, bool fixedConnection = false)
		{
			this.fixedConnection = fixedConnection;
			this.source = source;
			this.destination = destination;
		}

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, SaveConnectionType connectionType, bool fixedConnection = false)
			: this(source, destination, fixedConnection)
		{
			this.connectionType = connectionType;
		}

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, string customName, bool fixedConnection = false)
			: this(source, destination, fixedConnection)
		{
			this.customName = customName;
		}

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, string customName, string connectionFilter, bool fixedConnection = false)
			: this(source, destination, fixedConnection)
		{
			this.customName = customName;
			this.customFilter = connectionFilter;
		}

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, SaveConnectionType connectionType, string customName, bool fixedConnection = false)
			: this(source, destination, connectionType, fixedConnection)
		{
			this.customName = customName;
		}

		public DCFSaveConnectionRequest(ConnectivityInterface source, ConnectivityInterface destination, SaveConnectionType connectionType, string customName, string connectionFilter, bool fixedConnection = false)
			: this(source, destination, connectionType, fixedConnection)
		{
			this.customName = customName;
			this.customFilter = connectionFilter;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, bool fixedConnection = false)
		{
			var result = dcf.GetInterfaces(source, destination);
			if (result[0] != null)
				this.source = result[0].firstInterface;
			if (result[1] != null)
				this.destination = result[1].firstInterface;
			this.fixedConnection = fixedConnection;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, SaveConnectionType connectionType, bool fixedConnection = false)
			: this(dcf, source, destination, fixedConnection)
		{
			this.connectionType = connectionType;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, SaveConnectionType connectionType, string customName, bool fixedConnection = false)
			: this(dcf, source, destination, connectionType, fixedConnection)
		{
			this.customName = customName;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, string customName, bool fixedConnection = false)
			: this(dcf, source, destination, fixedConnection)
		{
			this.customName = customName;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, string customName, string connectionFilter, bool fixedConnection = false)
			: this(dcf, source, destination, fixedConnection)
		{
			this.customName = customName;
			this.customFilter = connectionFilter;
		}

		public DCFSaveConnectionRequest(DCFHelper dcf, DCFDynamicLink source, DCFDynamicLink destination, SaveConnectionType connectionType, string customName, string connectionFilter, bool fixedConnection = false)
			: this(dcf, source, destination, connectionType, fixedConnection)
		{
			this.customName = customName;
			this.customFilter = connectionFilter;
		}

		public string ConnectionFilter
		{
			get { return customFilter; }
			set { customFilter = value; }
		}
	}

	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DCFSaveConnectionResult
	{
		public ConnectivityConnection destinationConnection;
		public bool internalConnection;
		public ConnectivityConnection sourceConnection;
		public bool updated;

		public DCFSaveConnectionResult(ConnectivityConnection sourceConnection, ConnectivityConnection destinationConnection, bool internalConnection, bool updated)
		{
			this.sourceConnection = sourceConnection;
			this.destinationConnection = destinationConnection;
			this.internalConnection = internalConnection;
			this.updated = updated;
		}
	}

	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class DVEColumn
	{
		public int columnIDX;
		public int tablePID;
		public int timeoutTime = 20;

		public DVEColumn(int tablePID, int columnIDX, int timeoutTime)
		{
			this.tablePID = tablePID;
			this.columnIDX = columnIDX;
			this.timeoutTime = timeoutTime;
		}

		public DVEColumn(int tablePID, int columnIDX)
			: this(tablePID, columnIDX, 20)
		{
		}
	}

	[SuppressMessage("Microsoft.StyleCop.CSharp.NamingRules", "*", Justification = "Reverse Compatibility")]
	[SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "*", Justification = "Reverse Compatibility")]
	public class ExternalElement
	{
		public int dmaID; public int eleID;
		public string elementKey;
		public int timeoutTime = 20;

		public ExternalElement(int dmaID, int eleID, int timeoutTime)
		{
			this.dmaID = dmaID;
			this.eleID = eleID;
			elementKey = dmaID + "/" + eleID;
			this.timeoutTime = timeoutTime;
		}

		public ExternalElement(int dmaID, int eleID)
			: this(dmaID, eleID, 20)
		{
		}

		public ExternalElement(string elementKey)
		{
			string[] elementKeyA = elementKey.Split('/');
			if (elementKeyA.Length > 1)
			{
				Int32.TryParse(elementKeyA[0], out dmaID);
				Int32.TryParse(elementKeyA[1], out eleID);
				this.elementKey = elementKey;
			}
		}
	}

	public class FastCollection<T> : IEnumerable<T>
	{
		private Dictionary<string, ILookup<object, T>> _indexes;
		private IList<T> _items;
		private IList<Expression<Func<T, object>>> _lookups;

		public FastCollection(IList<T> data)
		{
			_items = data;
			_lookups = new List<Expression<Func<T, object>>>();
			_indexes = new Dictionary<string, ILookup<object, T>>();
		}

		public FastCollection()
		{
			_lookups = new List<Expression<Func<T, object>>>();
			_indexes = new Dictionary<string, ILookup<object, T>>();
		}

		public void Add(T item)
		{
			if (_items == null)
			{
				_items = new List<T>();
				_items.Add(item);
			}
			else
			{
				_items.Add(item);
			}

			RebuildIndexes();
		}

		public void Add(IList<T> data, IEqualityComparer<T> comparer)
		{
			if (_items == null)
			{
				_items = data;
			}
			else
			{
				_items = data.Union(_items, comparer).ToList();
			}

			RebuildIndexes();
		}

		public void AddIndex(Expression<Func<T, object>> property)
		{
			if (!_indexes.ContainsKey(property.ToString()))
			{
				_lookups.Add(property);
				_indexes.Add(property.ToString(), _items.ToLookup(property.Compile()));
			}
		}

		public IEnumerable<T> FindValue<TProperty>(Expression<Func<T, TProperty>> property, TProperty value)
		{
			var key = property.ToString();
			if (_indexes.ContainsKey(key))
			{
				return _indexes[key][value];
			}
			else
			{
				var c = property.Compile();
				return _items.Where(x => c(x).Equals(value));
			}
		}

		public IEnumerator<T> GetEnumerator()
		{
			return _items.GetEnumerator();
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		public void RebuildIndexes()
		{
			if (_lookups.Count > 0)
			{
				_indexes = new Dictionary<string, ILookup<object, T>>();
				foreach (var lookup in _lookups)
				{
					_indexes.Add(lookup.ToString(), _items.ToLookup(lookup.Compile()));
				}
			}
		}

		public void Remove(T item)
		{
			_items.Remove(item);
			RebuildIndexes();
		}
	}

	public class PropertyFilter
	{
		private List<PropertyFilter> and = new List<PropertyFilter>();
		private int id = -1;
		private string name = String.Empty;
		private List<PropertyFilter> or = new List<PropertyFilter>();
		private string type = String.Empty;
		private string value = String.Empty;
		////private bool not = false;

		public PropertyFilter(int id)
		{
			this.ID = id;
		}

		////public bool NOT
		////{
		////    get { return not; }
		////    set { not = value; }
		////}
		////public List<PropertyFilter> AND
		////{
		////    get { return and; }
		////    set { and = value; }
		////}
		////public List<PropertyFilter> OR
		////{
		////    get { return or; }
		////    set { or = value; }
		////}
		public PropertyFilter(string name, string type, string value)
		{
			this.Name = name;
			this.Type = type;
			this.Value = value;
		}

		public PropertyFilter(string name, string value)
		{
			this.Name = name;
			this.Value = value;
		}

		public PropertyFilter(string name)
		{
			this.Name = name;
		}

		public int ID
		{
			get { return id; }
			set { id = value; }
		}

		public string Name
		{
			get { return name; }
			set { name = value; }
		}

		public string Type
		{
			get { return type; }
			set { type = value; }
		}

		public string Value
		{
			get { return this.value; }
			set { this.value = value; }
		}
	}

	internal class CustomComparer<T> : IEqualityComparer<T>
	{
		private Func<T, object> keySelector;

		public CustomComparer(Func<T, object> keySelector)
		{
			this.keySelector = keySelector;
		}

		public bool Equals(T x, T y)
		{
			return keySelector(x).Equals(keySelector(y));
		}

		public int GetHashCode(T obj)
		{
			return keySelector(obj).GetHashCode();
		}
	}

	#endregion Classes
}]]>
		</QAction>
		<QAction id="1" name="Precompiled Code" encoding="csharp" options="precompile" dllImport="Newtonsoft.Json.dll;System.Web.Extensions.dll;System.Runtime.Serialization.dll;[ProtocolName].[ProtocolVersion].QAction.64000.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[
//---------------------------------
// QAction_1.cs
//---------------------------------
// <auto-generated />

//The following namespace contains all the classes necessary to map the JSON responses into C# code

namespace Skyline.DataMiner.Protocols.prism.Json
{
	using System.Collections.Generic;
	using System.Web.Script.Serialization;

	/*A class with some utility members*/
	public class Shared
	{
		public static JavaScriptSerializer generalPurposeSerializer = new JavaScriptSerializer();
	}

	public class SimpleString
	{
		public string @string { get; set; }
	}

	public class StringAsIntArray
	{
		public List<string> ints { get; set; }
	}

	public class IntArray
	{
		public List<int> ints { get; set; }
	}

	public class FloatArray
	{
		public List<float> floats { get; set; }
	}

	public class DoubleArray
	{
		public List<double> doubles { get; set; }
	}

	public class SimpleDictionary
	{
		public Dictionary<string, object> @object { get; set; }
	}

	public class ActiveInput
	{
		public int input { get; set; }

		[ScriptIgnore]
		public string name { get; set; }
	}

	public class IPv4ConfigObject
	{
		public IPv4Config @object { get; set; }
	}

	public class IPv4Config
	{
		public string address_v4 { get; set; }
		public int dhcpV4 { get; set; }
		public string gateway_v4 { get; set; }
		public string netmask_v4 { get; set; }
		public int port { get; set; }
	}

	public class InputHardwareIdInfoObject
	{
		public InputHardwareIdInfo @object { get; set; }
	}

	public class InputHardwareIdInfo
	{
		public object buildDate { get; set; }
		public object partNumber { get; set; }
		public object serialNumber { get; set; }
	}

	public class InputHardwareFPGATemperatureObject
	{
		public InputHardwareFPGATemperature @object { get; set; }
	}
	public class InputHardwareFPGATemperature
	{
		public int dec { get; set; }
		public int din { get; set; }
		public int sdi { get; set; }
	}

	public class FanDiagnosticsObject
	{
		public FanDiagnostics @object { get; set; }
	}

	public class FanDiagnostics
	{
		public string status { get; set; }
	}

	//Ethernet stats section
	public class Rx
	{
		public double broadcastPackets { get; set; }
		public int collisions { get; set; }
		public int crcAlignError { get; set; }
		public int dropEvents { get; set; }
		public double fragments { get; set; }
		public double framesBroadErr { get; set; }
		public double framesBroadOk { get; set; }
		public double framesCrc { get; set; }
		public double framesErr { get; set; }
		public double framesMultiErr { get; set; }
		public int framesMultiOk { get; set; }
		public int framesOk { get; set; }
		public int framesUniErr { get; set; }
		public int framesUniOk { get; set; }
		public double jabbers { get; set; }
		public double multicastPackets { get; set; }
		public double octets { get; set; }
		public double octetsOk { get; set; }
		public double overflows { get; set; }
		public double oversizePackets { get; set; }
		public double packets { get; set; }
		public double packets_1024_1518 { get; set; }
		public double packets_128_255 { get; set; }
		public double packets_256_511 { get; set; }
		public double packets_512_1023 { get; set; }
		public double packets_64 { get; set; }
		public double packets_65_127 { get; set; }
		public double undersizePackets { get; set; }
	}

	public class Tx
	{
		public double broadcastPackets { get; set; }
		public int collisions { get; set; }
		public int crcAlignError { get; set; }
		public int dropEvents { get; set; }
		public double fragments { get; set; }
		public int framesBroadErr { get; set; }
		public double framesBroadOk { get; set; }
		public int framesCrc { get; set; }
		public double framesErr { get; set; }
		public double framesMultiErr { get; set; }
		public double framesMultiOk { get; set; }
		public double framesOk { get; set; }
		public int framesUniErr { get; set; }
		public double framesUniOk { get; set; }
		public double jabbers { get; set; }
		public double multicastPackets { get; set; }
		public double octets { get; set; }
		public double octetsOk { get; set; }
		public double overflows { get; set; }
		public double oversizePackets { get; set; }
		public double packets { get; set; }
		public double packets_1024_1518 { get; set; }
		public double packets_128_255 { get; set; }
		public double packets_256_511 { get; set; }
		public double packets_512_1023 { get; set; }
		public double packets_64 { get; set; }
		public int packets_65_127 { get; set; }
		public int undersizePackets { get; set; }
	}

	public class EthernetStats
	{
		public bool HighBER { get; set; }
		public bool RxFault { get; set; }
		public bool TxFault { get; set; }
		public int maxPacket { get; set; }
		public int minPacket { get; set; }
		public int octets { get; set; }
		public double packets { get; set; }
		public Rx rx { get; set; }
		public int rxPauses { get; set; }
		public double seconds { get; set; }
		public List<string> status { get; set; }
		public Tx tx { get; set; }
		public long txPauses { get; set; }
	}

	public class EthernetStatsObject
	{
		public EthernetStats @object { get; set; }
	}

	public class Config
	{
		public int index { get; set; }
		public string subtype { get; set; }
		public string type { get; set; }
	}

	public class Scale
	{
		public List<float> coefs { get; set; }
		public int displayLevelNits { get; set; }
		public bool displayReferenced { get; set; }
		public string scheme { get; set; }
	}

	public class Oetf
	{
		public string encoding { get; set; }
		public string matrix { get; set; }
		public Scale scale { get; set; }
	}

	public class Colorimetry
	{
		public string colorimetry { get; set; }
		public Oetf oetf { get; set; }
	}

	public class Protocol
	{
		public string name { get; set; }
	}

	public class DetectedFormat
	{
		public Colorimetry colorimetry { get; set; }
		public List<string> errors { get; set; }
		public Dictionary<string, object> format { get; set; }
		public object metaSource { get; set; }
		public List<Protocol> protocols { get; set; }
		public bool s2022_7 { get; set; }
		public Dictionary<string, object> structure { get; set; }
		public Dictionary<string, object> transport { get; set; }
		public string type { get; set; }
	}

	public class Scale2
	{
		public List<float> coefs { get; set; }
		public int displayLevelNits { get; set; }
		public bool displayReferenced { get; set; }
		public string scheme { get; set; }
	}

	public class Eotf
	{
		public string encoding { get; set; }
		public string matrix { get; set; }
		public Scale2 scale { get; set; }
	}

	public class Scale3
	{
		public List<float> coefs { get; set; }
		public int displayLevelNits { get; set; }
		public bool displayReferenced { get; set; }
		public string scheme { get; set; }
	}

	public class Oetf2
	{
		public string encoding { get; set; }
		public string matrix { get; set; }
		public Scale3 scale { get; set; }
	}

	public class Colorimetry2
	{
		public string colorimetry { get; set; }
		public Eotf eotf { get; set; }
		public Oetf2 oetf { get; set; }
	}

	public class Protocol2
	{
		public string name { get; set; }
	}

	public class Format
	{
		public bool available { get; set; }
		public Colorimetry2 colorimetry { get; set; }
		public string errorFmt { get; set; }
		public List<string> errors { get; set; }
		public Dictionary<string, object> format { get; set; }
		public object metaSource { get; set; }
		public List<Protocol2> protocols { get; set; }
		public string protocolsFmt { get; set; }
		public bool s2022_7 { get; set; }
		public Dictionary<string, object> structure { get; set; }
		public Dictionary<string, object> transport { get; set; }
		public string type { get; set; }
	}

	public class VideoScope
	{
		public string media { get; set; }
		public int port { get; set; }
		public int slot { get; set; }
		public string subtype { get; set; }
		public string type { get; set; }
	}

	public class InputStatus
	{
		public Config config { get; set; }
		public DetectedFormat detectedFormat { get; set; }
		public Format format { get; set; }
		public VideoScope videoScope { get; set; }
	}

	public class InputStatusObject
	{
		public InputStatus @object { get; set; }
	}
}

namespace Skyline.DataMiner.Protocols.prism.Flows
{
	using System;
	using System.Collections.Generic;
	using System.Runtime.Serialization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;
	using Skyline.DataMiner.Scripting;
	using SupportMethods;

	public static class SerializationEngine
	{
		/// <summary>
		/// Takes a JSON in text format, and attempts to convert it into a provided class object.
		/// </summary>
		/// <typeparam name="T">The class of the object that should be created from the JSON text.</typeparam>
		/// <param name="text">The JSON text to be converted.</param>
		/// <returns>The deserialized object.</returns>
		public static T Deserialize<T>(string text)
		{
			return JsonConvert.DeserializeObject<T>(text, new JsonSerializerSettings { MissingMemberHandling = MissingMemberHandling.Ignore });
		}

		/// <summary>
		/// Attempts to convert a given object into a JSON text. The object should be properly configured, using attributes over the classes properties and variables, in order to have specific behaviors.
		/// </summary>
		/// <param name="data">The object that will be converted into JSON text.</param>
		/// <returns>The JSON text.</returns>
		public static string Serialize(object data)
		{
			return JsonConvert.SerializeObject(data, new JsonSerializerSettings { MissingMemberHandling = MissingMemberHandling.Ignore, Formatting = Formatting.Indented });
		}
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum InputType
	{
		[EnumMember(Value = "SDI")]
		SDI = 0,
		[EnumMember(Value = "S2022.6")]
		S2022_6,
		[EnumMember(Value = "S2022.7")]
		S2022_7,
		[EnumMember(Value = "ASPEN")]
		ASPEN,
		[EnumMember(Value = "S2210")]
		S2110
	};
	
	public enum CustomBool
	{
		False = 0,
		True
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum IgmpMode
	{
		[EnumMember(Value = "WhenSelected")]
		WhenSelected = 1
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum RemoteMode
	{
		[EnumMember(Value = "IOSLAVE_SOURCE_CONFIG_REMOTE_MODE_OFF")]
		IOSlaveSourceRemoteModeOff = 1
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum MediaType
	{
		[EnumMember(Value = "Video")]
		Video = 1,
		[EnumMember(Value = "Audio")]
		Audio,
		[EnumMember(Value = "Metadata")]
		MetaData,
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum PortSubType
	{
		[EnumMember(Value = "IP SFP+")]
		IpSfpPlus = 1
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum PortType
	{
		[EnumMember(Value = "Logical")]
		Logical = 1
	}

	[JsonConverter(typeof(StringEnumConverter))]
	public enum S2110XMode
	{
		[EnumMember(Value = "NL")]
		NL = 1
	}

	public class CreateFlowRequest
	{
		[JsonProperty(PropertyName = "input", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int InputId { get; set; }

		[JsonProperty(PropertyName = "data", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public Data Data { get; set; }

		public override string ToString()
		{
			return "Input ID: " + InputId + Environment.NewLine + "Data:" + Environment.NewLine + Data;
		}
	}

	public class Data
	{
		[JsonProperty(PropertyName = "inputType", NullValueHandling = NullValueHandling.Ignore)]
		public InputType InputType { get; set; }

		[JsonProperty(PropertyName = "name", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty(PropertyName = "s2022_7", NullValueHandling = NullValueHandling.Ignore)]
		public bool? S2022_7 { get; set; }

		[JsonProperty(PropertyName = "flows", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public FlowStructure[] Flows { get; set; }

		[JsonProperty(PropertyName = "port", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int? Port { get; set; }

		[JsonProperty(PropertyName = "remoteMode", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public RemoteMode RemoteMode { get; set; }

		[JsonProperty(PropertyName = "s2110XmitMode", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public S2110XMode S2110TransmitMode { get; set; }

		public override string ToString()
		{
			////+ Environment.NewLine + ""
			return "Flow type: " + InputType + Environment.NewLine + "Name: " + Name + Environment.NewLine + "Port: " + Port;
		}
	}

	public class FlowStructure
	{
		[JsonProperty(PropertyName = "flow", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public Flow Flow { get; set; }

		[JsonProperty(PropertyName = "media", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public Media Media { get; set; }
	}

	public class Flow
	{
		[JsonProperty(PropertyName = "PID")]
		public int Pid { get; set; }

		[JsonProperty(PropertyName = "bitDepth", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int BitDepth { get; set; }

		[JsonProperty(PropertyName = "dst", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public NetworkStructure Destination { get; set; }

		[JsonProperty(PropertyName = "enabled", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public bool? Enabled { get; set; }

		[JsonProperty(PropertyName = "flowKey", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public string FlowKey { get; set; }

		[JsonProperty(PropertyName = "igmpMode", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public string IgmpMode { get; set; }

		[JsonProperty(PropertyName = "igmpVersion", NullValueHandling = NullValueHandling.Ignore)]
		public int IgmpVersion { get; set; }

		[JsonProperty(PropertyName = "ipVersion", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int IpVersion { get; set; }

		[JsonProperty(PropertyName = "port", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public object Port { get; set; }

		// Either "none" or an int
		[JsonProperty(PropertyName = "rtpType")]
		public object RtpType { get; set; }

		[JsonProperty(PropertyName = "src", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public NetworkStructure Source { get; set; }

		[JsonProperty(PropertyName = "vlan", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public object Vlan { get; set; }
	}

	public class NetworkStructure
	{
		// May be an IP, or "any"
		[JsonProperty(PropertyName = "addr", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		private string Address { get; set; }

		[JsonIgnore]
		public string IpAddress
		{
			get
			{
				return Address == "any" ? "0" : Address;
			}
			set
			{
				Address = value == "0" ? "any" : value;
			}
		}

		[JsonProperty(PropertyName = "port", NullValueHandling = NullValueHandling.Ignore)]
		private string InternalPort { get; set; }

		[JsonIgnore]
		public string Port
		{
			get
			{
				return InternalPort == "any" ? "0" : InternalPort;
			}
			set
			{
				InternalPort = value == "0" ? "any" : value;
			}
		}

		[JsonProperty(PropertyName = "prefix", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int Prefix { get; set; }
	}

	public class Media
	{
		[JsonProperty(PropertyName = "index", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int Index { get; set; }

		[JsonProperty(PropertyName = "redundancy", NullValueHandling = NullValueHandling.Ignore)]
		public CustomBool HasRedundancy { get; set; }

		[JsonProperty(PropertyName = "type", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public MediaType Type { get; set; }
	}

	public class Port
	{
		[JsonProperty(PropertyName = "port", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public int PortNumber { get; set; }

		[JsonProperty(PropertyName = "subtype", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public PortSubType SubType { get; set; }

		[JsonProperty(PropertyName = "type", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
		public PortType Type { get; set; }
	}

	/// <summary>
	/// Automates the behavior of creating the JSON messages that create the different types of flows.
	/// </summary>
	public static class FlowRequestFactory
	{
		/// <summary>
		/// Creates an SDI JSON request for a new flow.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The JSON request.</returns>
		public static string CreateSdiRequest(SLProtocol protocol)
		{
			CreateFlowRequest request = new CreateFlowRequest();

			object[] parameters = (object[]) protocol.GetParameters(new uint[]
			{
				Parameter.createflowinputid_8601,
				Parameter.createflowinputtype_8602,
				Parameter.createflowname_8603,
				Parameter.createflowport_8604
			});

			request.InputId = Convert.ToInt32(parameters[0]);
			request.Data = new Data
			{
				InputType = (InputType) Convert.ToInt32(parameters[1]),
				Name = Convert.ToString(parameters[2]),
				Port = Convert.ToInt32(parameters[3])
			};

			////protocol.Log("QA" + protocol.QActionID + "|CreateSdiRequest| Flow object: " + Environment.NewLine + request, LogType.DebugInfo, LogLevel.NoLogging);

			return SerializationEngine.Serialize(request);
		}

		/// <summary>
		/// Creates a new flow request with the most parameters filled in.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The <seealso cref="CreateFlowRequest"/> object filled in.</returns>
		private static CreateFlowRequest CreateGenericFullRequest(SLProtocolExt protocol, bool? s2022_7 = null, bool s2110 = false)
		{
			CreateFlowRequest request = new CreateFlowRequest();
			object[] parameters = (object[]) protocol.GetParameters(new uint[]
			{
				Parameter.createflowinputid_8601,
				Parameter.createflowinputtype_8602,
				Parameter.createflowname_8603,
				Parameter.createflowremotemode_8609,
				Parameter.createflowtransmitmode_8610
			});

			var flowConfigurationTable = Tables.GetFlowConfigurationTable(protocol);
			var flowIpConfigurationTable = Tables.GetFlowIpConfigurationTable(protocol);

			List<FlowStructure> flows = new List<FlowStructure>();


			for (int i = 0; i < flowConfigurationTable.Count; i++)
			{
				FlowconfigurationtableQActionRow flow = flowConfigurationTable[i];
				FlowipconfigurationtableQActionRow ipData = flowIpConfigurationTable[i];
				int vlanId = Convert.ToInt32(flow.Flowconfigurationtablevlanid_8706);
				int rtpType = Convert.ToInt32(flow.Flowconfigurationtablertptype_8710);

				flows.Add(new FlowStructure
				{
					Flow = new Flow
					{
						IgmpMode = Convert.ToString((IgmpMode) Convert.ToInt32(flow.Flowconfigurationtableigmpmode_8703)),
						IgmpVersion = Convert.ToInt32(flow.Flowconfigurationtableigmpversion_8704),
						IpVersion = Convert.ToInt32(flow.Flowconfigurationtableipversion_8705),
						Pid = Convert.ToInt32(flow.Flowconfigurationtablepid_8707),
						Enabled = Convert.ToBoolean(flow.Flowconfigurationtablestatus_8708),
						FlowKey = Convert.ToString(flow.Flowconfigurationtableflowkey_8709),
						RtpType = rtpType == -1 ? null : (object) rtpType,
						BitDepth = s2110 ? Convert.ToInt32(flow.Flowconfigurationtablebitdepth_8714) : default(int),

						Destination = new NetworkStructure
						{
							IpAddress = Convert.ToString(ipData.Flowipconfigurationtabledestinationip_8752),
							Port = Convert.ToString(ipData.Flowipconfigurationtabledestinationport_8753),
							Prefix = Convert.ToInt32(ipData.Flowipconfigurationtabledestinationprefix_8754)
						},
						Source = new NetworkStructure
						{
							IpAddress = Convert.ToString(ipData.Flowipconfigurationtablesourceip_8755),
							Port = Convert.ToString(ipData.Flowipconfigurationtablesourceport_8756),
							Prefix = Convert.ToInt32(ipData.Flowipconfigurationtablesourceprefix_8757)
						},

						Vlan = vlanId < 0 ? (object) "none" : vlanId,
						Port = Convert.ToInt32(ipData.Flowipconfigurationtablephysicalport_8758) == 0 ?
							(object) "none" :
							new Port
							{
								PortNumber = Convert.ToInt32(ipData.Flowipconfigurationtablephysicalportid_8759),
								SubType = (PortSubType) Convert.ToInt32(ipData.Flowipconfigurationtablesubtype_8760),
								Type = (PortType) Convert.ToInt32(ipData.Flowipconfigurationtabletype_8761)
							}
					},
					Media = new Media
					{
						Index = Convert.ToInt32(flow.Flowconfigurationtablemediaindex_8711),
						HasRedundancy = (CustomBool) Convert.ToInt32(flow.Flowconfigurationtablemediaredundancy_8712),
						Type = (MediaType) Convert.ToInt32(flow.Flowconfigurationtablemediatype_8713),
					}
				});
			}

			request.InputId = Convert.ToInt32(parameters[0]);
			request.Data = new Data
			{
				InputType = (InputType) Convert.ToInt32(parameters[1]),
				Name = Convert.ToString(parameters[2]),
				S2022_7 = s2022_7,
				Flows = flows.ToArray(),
				RemoteMode = (RemoteMode) (s2110 ? Convert.ToInt32(parameters[3]) : default(int)),
				S2110TransmitMode = (S2110XMode) (s2110 ? Convert.ToInt32(parameters[4]) : default(int))
			};

			return request;
		}

		/// <summary>
		/// Creates an S2022-6 JSON request for a new flow.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The JSON request.</returns>
		public static string CreateS20226Request(SLProtocolExt protocol)
		{
			var request = CreateGenericFullRequest(protocol, s2022_7: false);

			return SerializationEngine.Serialize(request);
		}

		/// <summary>
		/// Creates an S2022-7 JSON request for a new flow.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The JSON request.</returns>
		public static string CreateS20227Request(SLProtocolExt protocol)
		{
			var request = CreateGenericFullRequest(protocol, s2022_7: true);

			return SerializationEngine.Serialize(request);
		}

		/// <summary>
		/// Creates an ASPEN JSON request for a new flow.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The JSON request.</returns>
		public static string CreateAspenRequest(SLProtocolExt protocol)
		{
			var request = CreateGenericFullRequest(protocol);

			return SerializationEngine.Serialize(request);
		}

		/// <summary>
		/// Creates an S2110 JSON request for a new flow.
		/// </summary>
		/// <param name="protocol">Link with SLProtocol process.</param>
		/// <returns>The JSON request.</returns>
		public static string CreateS2110Request(SLProtocolExt protocol)
		{
			var request = CreateGenericFullRequest(protocol, s2022_7: false, s2110: true);

			return SerializationEngine.Serialize(request);
		}
	}
}

namespace Logging
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Skyline.DataMiner.Scripting;

	public static class LogHandler
	{
		/// <summary>
		/// Logs an exception in the DMA element's logs, including its inner exception if present. Uses a standardized message format. It writes the message with the Run method location.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="exception">The exception object that needs to be written in the logs.</param>
		public static void LogException(this SLProtocol protocol, Exception exception)
		{
			LogException(protocol, exception, "Run");
		}

		/// <summary>
		/// Logs an exception in the DMA element's logs, including its inner exception if present. Uses a standardized message format.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="exception">The exception object that needs to be written in the logs.</param>
		/// <param name="location">The method name where the message was generated.</param>
		public static void LogException(this SLProtocol protocol, Exception exception, string location)
		{
			string text = string.Format("QA{0}|{4}|{1}| There was an exception while running this code: {2}{5}{3}", protocol.QActionID, location, exception.Message, exception.StackTrace, protocol.GetTriggerParameter(), Environment.NewLine);

			if (exception.InnerException != null)
			{
				text += string.Format("\nThere was also an inner exception: {0}{2}{1}", exception.InnerException.Message, exception.InnerException.StackTrace, Environment.NewLine);
			}

			protocol.Log(text, LogType.Error, LogLevel.NoLogging);
		}

		/// <summary>
		/// Logs an information message on the logs, using a standardized message format. It writes the message with the Run method location.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="message">The message to be written on the logs.</param>
		public static void LogInformation(this SLProtocol protocol, string message)
		{
			LogInformation(protocol, message, "Run");
		}

		/// <summary>
		/// Logs an information message on the logs, using a standardized message format.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="message">The message to be written on the logs.</param>
		/// <param name="location">The method name where the message was generated.</param>
		public static void LogInformation(this SLProtocol protocol, string message, string location)
		{
			protocol.Log(string.Format("QA{0}|{1}| {2}", protocol.QActionID, location, message), LogType.Information, LogLevel.NoLogging);
		}

		/// <summary>
		/// Logs an error message on the logs, using a standardized message format. It writes the message with the Run method location.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="message">The message to be written on the logs.</param>
		public static void LogError(this SLProtocol protocol, string message)
		{
			LogError(protocol, message, "Run");
		}

		/// <summary>
		/// Logs an error message on the logs, using a standardized message format.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="message">The message to be written on the logs.</param>
		/// <param name="location">The method name where the message was generated.</param>
		public static void LogError(this SLProtocol protocol, string message, string location)
		{
			protocol.Log(string.Format("QA{0}|{1}| {2}", protocol.QActionID, location, message), LogType.Error, LogLevel.NoLogging);
		}

		/// <summary>
		/// Simplified method that logs all the information contained within a list of rows for a given table.
		/// </summary>
		/// <param name="protocol">Link with Skyline DataMiner.</param>
		/// <param name="table">The list of rows representing a table that will be printed.</param>
		public static void LogTable<T>(this SLProtocol protocol, List<T> table) where T : QActionTableRow
		{
			StringBuilder builder = new StringBuilder();

			builder.Append("\n===Table===\n");

			foreach (QActionTableRow row in table)
			{
				builder.Append("Row key: ");
				builder.Append(row.Key);
				builder.Append(" => ");

				for (int i = 0; i < row.ColumnCount; i++)
				{
					builder.Append(row.Columns.ContainsKey(i) ? row.Columns[i] : "ERR");
					builder.Append(" | ");
				}

				builder.Remove(builder.Length - 2, 2);
				builder.Append("\n");
			}

			builder.Append("===END===");
			LogInformation(protocol, builder.ToString());
		}
	}
}

namespace SupportMethods
{
	using System.Collections.Generic;
	using Skyline.DataMiner.Scripting;
	using Logging;
	using SLNetMessages = Skyline.DataMiner.Net.Messages;

	public static class Extentions
	{
		/// <summary>
		/// Takes the row object of a table, and changes its key to the one provided.
		/// </summary>
		/// <param name="row">The row that will have its key changed.</param>
		/// <param name="key">The new key to set.</param>
		/// <returns>The altered row.</returns>
		public static QActionTableRow SetKey(this QActionTableRow row, string key)
		{
			row.Columns[0] = key;
			return row;
		}
	}

	public static class Tables
	{
		public static List<FlowconfigurationtableQActionRow> GetFlowConfigurationTable(SLProtocolExt protocol)
		{
			uint[] indexesToGet = new uint[]
		{
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableinstance_8701,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemedianame_8702,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableigmpmode_8703,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableigmpversion_8704,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableipversion_8705,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablevlanid_8706,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablepid_8707,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablestatus_8708,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableflowkey_8709,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablertptype_8710,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediaindex_8711,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediaredundancy_8712,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediatype_8713,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablebitdepth_8714
		};

			object[] pidColumnsToDuplicate = (object[]) protocol.NotifyProtocol((int) SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Flowconfigurationtable.tablePid, indexesToGet);

			object[] keys = (object[]) pidColumnsToDuplicate[0];
			object[] mediaNames = (object[]) pidColumnsToDuplicate[1];
			object[] igmpModes = (object[]) pidColumnsToDuplicate[2];
			object[] igmpVersions = (object[]) pidColumnsToDuplicate[3];
			object[] ipVersions = (object[]) pidColumnsToDuplicate[4];
			object[] vlandIds = (object[]) pidColumnsToDuplicate[5];
			object[] pids = (object[]) pidColumnsToDuplicate[6];
			object[] status = (object[]) pidColumnsToDuplicate[7];
			object[] flowKeys = (object[]) pidColumnsToDuplicate[8];
			object[] rtpTypes = (object[]) pidColumnsToDuplicate[9];
			object[] mediaIndexes = (object[]) pidColumnsToDuplicate[10];
			object[] mediaRedundancies = (object[]) pidColumnsToDuplicate[11];
			object[] mediaTypes = (object[]) pidColumnsToDuplicate[12];
			object[] bitDepths = (object[]) pidColumnsToDuplicate[13];

			List<FlowconfigurationtableQActionRow> flowTable = new List<FlowconfigurationtableQActionRow>();
			
			for (int position = 0; position < keys.Length; position++)
			{
				flowTable.Add(new FlowconfigurationtableQActionRow
				{
					Flowconfigurationtableinstance_8701 = keys[position],
					Flowconfigurationtablemedianame_8702 = mediaNames[position],
					Flowconfigurationtableigmpmode_8703 = igmpModes[position],
					Flowconfigurationtableigmpversion_8704 = igmpVersions[position],
					Flowconfigurationtableipversion_8705 = ipVersions[position],
					Flowconfigurationtablevlanid_8706 = vlandIds[position],
					Flowconfigurationtablepid_8707 = pids[position],
					Flowconfigurationtablestatus_8708 = status[position],
					Flowconfigurationtableflowkey_8709 = flowKeys[position],
					Flowconfigurationtablertptype_8710 = rtpTypes[position],
					Flowconfigurationtablemediaindex_8711 = mediaIndexes[position],
					Flowconfigurationtablemediaredundancy_8712 = mediaRedundancies[position],
					Flowconfigurationtablemediatype_8713 = mediaTypes[position],
					Flowconfigurationtablebitdepth_8714 = bitDepths[position]
				});
			}

			protocol.LogTable(flowTable);

			return flowTable;
		}

		public static List<FlowipconfigurationtableQActionRow> GetFlowIpConfigurationTable(SLProtocolExt protocol)
		{
			uint[] indexesToGet = new uint[]
			{
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationip_8752,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationport_8753,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationprefix_8754,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceip_8755,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceport_8756,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceprefix_8757,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtableinstance_8751,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablephysicalport_8758,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablephysicalportid_8759,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesubtype_8760,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabletype_8761
			};

			object[] ipColumnsToDuplicate = (object[]) protocol.NotifyProtocol((int) SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Flowipconfigurationtable.tablePid, indexesToGet);

			List<FlowipconfigurationtableQActionRow> ipTable = new List<FlowipconfigurationtableQActionRow>();

			object[] destinationIps = (object[]) ipColumnsToDuplicate[0];
			object[] destinationPorts = (object[]) ipColumnsToDuplicate[1];
			object[] destinationPrefixes = (object[]) ipColumnsToDuplicate[2];
			object[] sourceIps = (object[]) ipColumnsToDuplicate[3];
			object[] sourcePorts = (object[]) ipColumnsToDuplicate[4];
			object[] sourcePrefixes = (object[]) ipColumnsToDuplicate[5];
			object[] ipKey = (object[]) ipColumnsToDuplicate[6];
			object[] physicalPorts = (object[]) ipColumnsToDuplicate[7];
			object[] physicalPortIds = (object[]) ipColumnsToDuplicate[8];
			object[] subtypes = (object[]) ipColumnsToDuplicate[9];
			object[] portTypes = (object[]) ipColumnsToDuplicate[10];

			for (int position = 0; position < destinationIps.Length; position++)
			{
				ipTable.Add(new FlowipconfigurationtableQActionRow
				{
					Flowipconfigurationtableinstance_8751 = ipKey[position],
					Flowipconfigurationtabledestinationip_8752 = destinationIps[position],
					Flowipconfigurationtabledestinationport_8753 = destinationPorts[position],
					Flowipconfigurationtabledestinationprefix_8754 = destinationPrefixes[position],
					Flowipconfigurationtablesourceip_8755 = sourceIps[position],
					Flowipconfigurationtablesourceport_8756 = sourcePorts[position],
					Flowipconfigurationtablesourceprefix_8757 = sourcePrefixes[position],
					Flowipconfigurationtablephysicalport_8758 = physicalPorts[position],
					Flowipconfigurationtablephysicalportid_8759 = physicalPortIds[position],
					Flowipconfigurationtablesubtype_8760 = subtypes[position],
					Flowipconfigurationtabletype_8761 = portTypes[position]
				});
			}

			return ipTable;
		}
	}
}
//---------------------------------
// DCF\AddDcfMulticastProperty.cs
//---------------------------------
namespace DCF
{
	using System;
	using ProtocolDCF;
	using Skyline.DataMiner.Scripting;

	public class AddDcfMulticastProperty : DcfMulticastProperty
	{
		public AddDcfMulticastProperty(SLProtocolExt protocol, EthernetInterfaces ethernetInterfaces) : base(protocol, ethernetInterfaces, SyncOption.EndOfPolling)
		{
		}

		public override void ExecuteOperationAction(DCFHelper dcf, ConnectivityInterface connectivityInterface, EthernetInterface ethernetInterface)
		{
			var connectivityInterfaceProperty = new ConnectivityInterfaceProperty
			{
				InterfacePropertyName = MulticastPropertyType,
				InterfacePropertyType = Convert.ToString(ethernetInterface.Type),
				InterfacePropertyValue = ethernetInterface.Ips,
			};

			dcf.SaveInterfaceProperties(connectivityInterface, true, connectivityInterfaceProperty);
		}
	}
}
//---------------------------------
// DCF\AudioFlowConfigurationTable.cs
//---------------------------------
namespace DCF
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Library.Protocol;
	using Skyline.DataMiner.Scripting;

	public class AudioFlowConfigurationTable : Table
	{
		public AudioFlowConfigurationTable(SLProtocolExt protocol) : base(protocol)
		{
		}

		public override List<TableData> GetTableData()
		{
			int tablePid = Parameter.Audioflowinputconfigtable.tablePid;

			uint[] columnsIdx = new uint[]
			{
				Parameter.Audioflowinputconfigtable.Idx.audioflowconfigtableinputid_6301,
				Parameter.Audioflowinputconfigtable.Idx.audioflowconfigtableinputdstaddress_6304,
			};

			Func<string, string, TableData> returnSelector = (instance, destinationAddress) => new TableData(instance, destinationAddress);

			return protocol.GetColumns(tablePid, columnsIdx, returnSelector).ToList();
		}
	}
}
//---------------------------------
// DCF\DcfHelperExt.cs
//---------------------------------
namespace DCF
{
	using ProtocolDCF;
	using Skyline.DataMiner.Scripting;

	public abstract class DcfHelperExt
	{
		protected readonly SyncOption HelperTypeOption;

		protected readonly SLProtocolExt Protocol;

		protected DcfHelperExt(SLProtocolExt protocol, SyncOption helperType)
		{
			Protocol = protocol;
			HelperTypeOption = helperType;
		}

		public void ExecuteAction()
		{
			DCFMappingOptions opt = new DCFMappingOptions
			{
				HelperType = HelperTypeOption,
				PIDcurrentInterfaceProperties = Parameter.map_interfaceproperties_63999,
			};

			using (DCFHelper dcf = new DCFHelper(Protocol, Parameter.map_startupelements_63993, opt))
			{
				ExecuteOperation(dcf);
			}
		}

		public abstract void ExecuteOperation(DCFHelper dcf);
	}
}
//---------------------------------
// DCF\DcfInterfaceProperty.cs
//---------------------------------
namespace DCF
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Scripting;

	public class DcfInterfaceProperty
	{
		protected const string MulticastPropertyType = "MC";

		public static void AddDcfProperties(SLProtocolExt protocol, EthernetInterfaces ethernet)
		{
			DcfMulticastProperty addDcfInterfaceProperties = new AddDcfMulticastProperty(protocol, ethernet);
			addDcfInterfaceProperties.ExecuteAction();
		}

		public static void RemoveDcfProperties(SLProtocolExt protocol)
		{
			List<string> dcfPropertiesToRemove = new List<string>();

			foreach (var dcfInterface in protocol.ConnectivityInterfaces.Values)
			{
				var dcfInterfaceProperties = dcfInterface.InterfaceProperties;

				if (dcfInterfaceProperties.Count == 0)
				{
					continue;
				}

				List<string> propertiesToRemove = dcfInterfaceProperties.Where(x => x.Value.InterfacePropertyName.Equals(MulticastPropertyType)).Select(x => Convert.ToString(x.Key)).ToList();

				if (propertiesToRemove.Count == 0)
				{
					continue;
				}

				dcfPropertiesToRemove.AddRange(propertiesToRemove);
			}

			protocol.DeleteRow(65054, dcfPropertiesToRemove.ToArray());
		}

		public static void UpdateDcfProperties(SLProtocolExt protocol, EthernetInterfaces ethernet)
		{
			DcfMulticastProperty updateDcfInterfacePropertyIps = new UpdateDcfMulticastProperty(protocol, ethernet);
			updateDcfInterfacePropertyIps.ExecuteAction();
		}
	}
}
//---------------------------------
// DCF\DcfMulticastProperty.cs
//---------------------------------
namespace DCF
{
	using System.Collections.Generic;
	using ProtocolDCF;
	using Skyline.DataMiner.Scripting;

	public abstract class DcfMulticastProperty : DcfHelperExt
	{
		protected const string MulticastPropertyType = "MC";

		protected DcfMulticastProperty(SLProtocolExt protocol, EthernetInterfaces ethernetInterfaces, SyncOption helperType) : base(protocol, helperType)
		{
			EthernetInterfaces = ethernetInterfaces;
		}

		protected EthernetInterfaces EthernetInterfaces { get; set; }

		public override void ExecuteOperation(DCFHelper dcf)
		{
			var dcfInterfaces = dcf.GetInterfaces(
				new DCFDynamicLink(2),
				new DCFDynamicLink(3)
			);

			if (dcfInterfaces.Length == 0)
			{
				return;
			}

			var ethernetInterfaces = EthernetInterfaces.GetInterfaces();

			if (ethernetInterfaces.Count == 0)
			{
				return;
			}

			foreach (var ethernetInterface in ethernetInterfaces)
			{
				Dictionary<EthernetInterfaceType, ConnectivityInterface> connectivityInterfaceByType = new Dictionary<EthernetInterfaceType, ConnectivityInterface>
				{
					{EthernetInterfaceType.Ethernet1, dcfInterfaces[0].firstInterface},
					{EthernetInterfaceType.Ethernet2, dcfInterfaces[1].firstInterface},
				};

				ConnectivityInterface connectivityInterface = connectivityInterfaceByType[ethernetInterface.Type];

				if (connectivityInterface == null)
				{
					return;
				}

				ExecuteOperationAction(dcf, connectivityInterface, ethernetInterface);
			}
		}

		public abstract void ExecuteOperationAction(DCFHelper dcf, ConnectivityInterface connectivityInterface, EthernetInterface ethernetInterface);
	}
}
//---------------------------------
// DCF\DcfPropertyState.cs
//---------------------------------
namespace DCF
{
	public enum DcfPropertyState
	{
		Disabled = 0,

		Enabled = 1,
	}
}
//---------------------------------
// DCF\EthernetInterface.cs
//---------------------------------
namespace DCF
{
	using System.Collections.Generic;

	public class EthernetInterface
	{
		public EthernetInterface(EthernetInterfaceType type)
		{
			Type = type;
			IpsByEthernet = new List<string>();
		}

		public string Ips
		{
			get
			{
				return string.Join(";", IpsByEthernet.ToArray());
			}
		}

		public List<string> IpsByEthernet { get; private set; }

		public EthernetInterfaceType Type { get; private set; }
	}
}
//---------------------------------
// DCF\EthernetInterfaces.cs
//---------------------------------
namespace DCF
{
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Scripting;

	public class EthernetInterfaces
	{
		private readonly SLProtocolExt protocol;

		public EthernetInterfaces(SLProtocolExt protocol)
		{
			this.protocol = protocol;
		}

		public Dictionary<EthernetInterfaceType, EthernetInterface> NetworkInterfaces { get; private set; }

		public List<EthernetInterface> GetInterfaces()
		{
			List<EthernetInterface> interfaces = NetworkInterfaces.Values.ToList();
			return interfaces;
		}

		public void InitializeInterfacesData()
		{
			GetEthernetInterfaces();

			if (NetworkInterfaces.Count == 0)
			{
				return;
			}

			GetInterfacesIpAddressesFromTable();
		}

		public void InitializeInterfacesWithTableData(List<TableData> tableDataRows)
		{
			GetEthernetInterfaces();

			if (NetworkInterfaces.Count == 0)
			{
				return;
			}

			Table.MapIpAddressToEthernetInterface(this, tableDataRows);
		}

		private void GetEthernetInterfaces()
		{
			List<EthernetInterface> ethernetInterfaces = new List<EthernetInterface>
			{
				new EthernetInterface(EthernetInterfaceType.Ethernet1),
				new EthernetInterface(EthernetInterfaceType.Ethernet2),
			};

			NetworkInterfaces = ethernetInterfaces.ToDictionary(y => y.Type, y => y);
		}

		private void GetInterfacesIpAddressesFromTable()
		{
			Table[] tables = new Table[]
			{
				new VideoFlowConfigurationTable(protocol),
				new AudioFlowConfigurationTable(protocol),
			};

			foreach (var table in tables)
			{
				table.MapIpAddressToEthernetInterface(this);
			}
		}
	}
}
//---------------------------------
// DCF\EthernetInterfaceType.cs
//---------------------------------
namespace DCF
{
	public enum EthernetInterfaceType
	{
		Unknown = -1,

		Ethernet1 = 0,

		Ethernet2 = 1,
	}
}
//---------------------------------
// DCF\Table.cs
//---------------------------------
namespace DCF
{
	using System;
	using System.Collections.Generic;
	using Skyline.DataMiner.Scripting;

	public abstract class Table
	{
		protected readonly SLProtocolExt protocol;

		private const string ExceptionValue = "-1";

		private static readonly List<string> InvalidIpAddresses = new List<string> { "0.0.0.0", "NA", ExceptionValue };

		protected Table(SLProtocolExt protocol)
		{
			this.protocol = protocol;
		}

		public static void MapIpAddressToEthernetInterface(EthernetInterfaces ethernetInterfaces, List<TableData> tableDataRows)
		{
			SetIpAddressToEthernetInterface(ethernetInterfaces, tableDataRows);
		}

		public abstract List<TableData> GetTableData();

		public void MapIpAddressToEthernetInterface(EthernetInterfaces ethernetInterfaces)
		{
			List<TableData> tableDataRows = GetTableData();

			if (tableDataRows.Count == 0)
			{
				return;
			}

			SetIpAddressToEthernetInterface(ethernetInterfaces, tableDataRows);
		}

		private static void SetIpAddressToEthernetInterface(EthernetInterfaces ethernetInterfaces, List<TableData> tableDataRows)
		{
			foreach (var tableDataRow in tableDataRows)
			{
				if (InvalidIpAddresses.Contains(tableDataRow.DestinationAddress))
				{
					continue;
				}

				EthernetInterfaceType networkReference;
				if (TryGetNetworkReference(tableDataRow.Instance, out networkReference))
				{
					UpdateInterfaceData(ethernetInterfaces.NetworkInterfaces, tableDataRow, networkReference);
				}
			}
		}

		private static bool TryGetNetworkReference(string instance, out EthernetInterfaceType networkReference)
		{
			networkReference = EthernetInterfaceType.Unknown;

			var lastIndexOf = instance.LastIndexOf('.');

			if (lastIndexOf < 0)
			{
				return false;
			}

			var matroxReferenceString = instance.Substring(lastIndexOf + 1);
			int matroxReferenceNumber;

			if (!Int32.TryParse(matroxReferenceString, out matroxReferenceNumber))
			{
				return false;
			}

			if (Enum.IsDefined(typeof(EthernetInterfaceType), matroxReferenceNumber))
			{
				networkReference = (EthernetInterfaceType)matroxReferenceNumber;
				return true;
			}
			else
			{
				return false;
			}
		}

		private static void UpdateInterfaceData(Dictionary<EthernetInterfaceType, EthernetInterface> networkInterfaces, TableData tableDataRow, EthernetInterfaceType type)
		{
			networkInterfaces[type].IpsByEthernet.Add(tableDataRow.DestinationAddress);
		}
	}
}
//---------------------------------
// DCF\TableData.cs
//---------------------------------
namespace DCF
{
	public class TableData
	{
		public TableData(string instance, string destinationAddress)
		{
			Instance = instance;
			DestinationAddress = destinationAddress;
		}

		public string DestinationAddress { get; private set; }

		public string Instance { get; private set; }
	}
}
//---------------------------------
// DCF\UpdateDcfMulticastProperty.cs
//---------------------------------
namespace DCF
{
	using System.Collections.Generic;
	using System.Linq;
	using ProtocolDCF;
	using Skyline.DataMiner.Scripting;

	public class UpdateDcfMulticastProperty : DcfMulticastProperty
	{
		public UpdateDcfMulticastProperty(SLProtocolExt protocol, EthernetInterfaces ethernetInterfaces) : base(protocol, ethernetInterfaces, SyncOption.Custom)
		{
		}

		public override void ExecuteOperationAction(DCFHelper dcf, ConnectivityInterface connectivityInterface, EthernetInterface ethernetInterface)
		{
			ConnectivityInterfaceProperty multicastProperty = GetDcfInterfaceMulticastProperty(connectivityInterface);

			if (multicastProperty == null)
			{
				return;
			}

			List<string> multicastPropertyIps = GetMulticastPropertyIps(multicastProperty);

			if (multicastPropertyIps.Count == 0 || !UpdateMulticastPropertyIps(ethernetInterface, multicastPropertyIps))
			{
				return;
			}

			multicastProperty.InterfacePropertyValue = string.Join(";", multicastPropertyIps);

			dcf.SaveInterfaceProperties(connectivityInterface, false, multicastProperty);
		}

		private static ConnectivityInterfaceProperty GetDcfInterfaceMulticastProperty(ConnectivityInterface dcfInterface)
		{
			return dcfInterface.InterfaceProperties.Values.FirstOrDefault(x => x.InterfacePropertyName.Equals(MulticastPropertyType));
		}

		private static List<string> GetMulticastPropertyIps(ConnectivityInterfaceProperty dcfInterfaceProperty)
		{
			return dcfInterfaceProperty.InterfacePropertyValue.Split(';').ToList();
		}

		private static bool UpdateMulticastPropertyIps(EthernetInterface ethernetInterface, List<string> multicastPropertyIps)
		{
			bool hasChanged = false;

			foreach (var ipAddress in ethernetInterface.IpsByEthernet)
			{
				if (!multicastPropertyIps.Contains(ipAddress))
				{
					hasChanged = true;
					multicastPropertyIps.Add(ipAddress);
				}
			}

			return hasChanged;
		}
	}
}
//---------------------------------
// DCF\VideoFlowConfigurationTable.cs
//---------------------------------
namespace DCF
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Library.Protocol;
	using Skyline.DataMiner.Scripting;

	public class VideoFlowConfigurationTable : Table
	{
		public VideoFlowConfigurationTable(SLProtocolExt protocol) : base(protocol)
		{
		}

		public override List<TableData> GetTableData()
		{
			int tablePid = Parameter.Videoflowinputconfigtable.tablePid;

			uint[] columnsIdx = new uint[]
			{
				Parameter.Videoflowinputconfigtable.Idx.videoflowconfigtableinputid_6401,
				Parameter.Videoflowinputconfigtable.Idx.videoflowconfigtableinputdstaddress_6404,
			};

			Func<string, string, TableData> returnSelector = (instance, destinationAddress) => new TableData(instance, destinationAddress);

			return protocol.GetColumns(tablePid, columnsIdx, returnSelector).ToList();
		}
	}
}
//---------------------------------
// Presets\Preset.cs
//---------------------------------
namespace Presets
{
	using Newtonsoft.Json;

	public class Preset
	{
		public static readonly string[] presetInstances = new[]
		{
			"A1","A2","A3","A4","A5","A6","B1","B2","B3","B4","B5","B6","C1","C2","C3","C4","C5","C6",
			"D1","D2","D3","D4","D5","D6","E1","E2","E3","E4","E5","E6","F1","F2","F3","F4","F5","F6",
		};

		[JsonProperty("string")]
		public string Presets { get; set; }

		public static string BuildRequest(string presetNumber, string groupName, string presetName)
		{
			string body = "/local/" + groupName + "/" + presetNumber + ":" + presetName;

			Preset request = new Preset
			{
				Presets = body,
			};

			string jsonRequest = JsonConvert.SerializeObject(request);
			return jsonRequest;
		}
	}
}
//---------------------------------
// Presets\PresetGroup.cs
//---------------------------------
namespace Presets
{
	using Newtonsoft.Json;

	public class PresetGroup
	{
		[JsonProperty("string")]
		public string Groups { get; set; }
	}
}
//---------------------------------
// Presets\ProcessedPreset.cs
//---------------------------------
namespace Presets
{
	using System;

	public class ProcessedPreset
	{
		public ProcessedPreset(string presetToParse)
		{
			PresetToParse = presetToParse;
		}

		public string GroupLetter { get; set; }

		public string PresetLetter { get; set; }

		public string PresetNumber { get; set; }

		public string PresetToParse { get; set; }

		public void GetNumberAndGroupFromInstance()
		{
			PresetNumber = Convert.ToString(PresetToParse).Substring(1, 1);
			GroupLetter = Convert.ToString(PresetToParse).Substring(0, 1);
		}

		public void GetPresetNumberAndLetter()
		{
			string[] choosenPreset = Convert.ToString(PresetToParse).Split(',');
			PresetNumber = choosenPreset[1].Split(' ')[2];
			PresetLetter = choosenPreset[0].Split(' ')[1];
		}
	}
}]]>
		</QAction>
		<QAction id="2" name="After Startup" encoding="csharp" triggers="2" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Presets;
using Skyline.DataMiner.Scripting;
using SLNetMessages = Skyline.DataMiner.Net.Messages;

/// <summary>
/// DataMiner QAction Class.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			string[] presets = Preset.presetInstances;
			Dictionary<string, string> presetsAndGroups = new Dictionary<string, string>();
			List<string> names = new List<string>();

			StringBuilder dynamicPresetValues = new StringBuilder();

			for (int i = 0; i < presets.Length; i++)
			{
				if (i != 0)
				{
					dynamicPresetValues.Append(";");
				}

				string preset = presets[i];

				ProcessedPreset processedPreset = new ProcessedPreset(preset);

				processedPreset.GetNumberAndGroupFromInstance();

				presetsAndGroups.Add(preset, processedPreset.GroupLetter + "_");
				names.Add("-1");

				string savedPreset = "Group " + processedPreset.GroupLetter + ", Preset " + processedPreset.PresetNumber;

				dynamicPresetValues.Append(savedPreset);
			}

			object[] columns = new object[]
			{
				Parameter.Presetstable.tablePid,
				Parameter.Presetstable.Pid.presetsname_8852,
				Parameter.Presetstable.Pid.presetsgroup_8853,
			};

			object[] values = new object[]
			{
				presetsAndGroups.Keys.ToArray(),
				names.ToArray(),
				presetsAndGroups.Values.ToArray(),
			};

			protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_FILL_ARRAY_WITH_COLUMN, columns, values);

			protocol.SetParameter(Parameter.dynamicdependencyvaluespresets_52, Convert.ToString(dynamicPresetValues));
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="200" name="Process DCF Interface Property" encoding="csharp" triggers="200" dllImport="[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.64000.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using DCF;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: Process DCF Interface Property.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			DcfPropertyState propertyState = (DcfPropertyState)Convert.ToInt32(protocol.GetParameter(protocol.GetTriggerParameter()));

			if (propertyState == DcfPropertyState.Enabled)
			{
				EthernetInterfaces ethernetInterfaces = new EthernetInterfaces(protocol);
				ethernetInterfaces.InitializeInterfacesData();

				DcfInterfaceProperty.AddDcfProperties(protocol, ethernetInterfaces);
			}
			else
			{
				DcfInterfaceProperty.RemoveDcfProperties(protocol);
			}

			protocol.SetParameter(Parameter.dcfethernetinterfacesemulticastproperty_100, (int)propertyState);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="2000" name="processRawResponses1" encoding="csharp" triggers="2000;2015;2020;2025;2030;2035;2050;2060;2065;2075;2085;2090;2095;2100;2130;2135;2140;2155;2160;2165;2170;2175;2180;2190;2200;2205;2210;2215;2220;2225;2230;2235;2240;2275" dllImport="System.Web.Extensions.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Skyline.DataMiner.Protocols.prism.Json;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: processRawResponses1.
/// </summary>
public class QAction
{
	/// <summary>
	/// Process the raw responses for parameters from 2000 to 2295.
	/// </summary>
	/// <param name="protocol">Link with Skyline DataMiner.</param>
	public static void Run(SLProtocol protocol)
	{
		int triggerParameter = protocol.GetTriggerParameter();

		try
		{
			Dictionary<int, object> setParameters = new Dictionary<int, object>();

			switch (triggerParameter)
			{
				case 2000:
					IntArray audioMixerVolumeResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(Parameter.audiomixervolume_5000, audioMixerVolumeResponse.ints[0]);
					break;

				case 2015: // The audio mixer mute might be expressed as int or double
					Dictionary<string, object> audioMixerMuteResponse = Shared.generalPurposeSerializer.Deserialize<Dictionary<string, object>>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(Parameter.audiomixermute_5015, audioMixerMuteResponse.ContainsKey("ints") ? ((ArrayList)audioMixerMuteResponse["ints"])[0] : ((ArrayList)audioMixerMuteResponse["doubles"])[0]);
					break;

				case 2020:
					IPv4ConfigObject ipv4IP1ConfigResponse = Shared.generalPurposeSerializer.Deserialize<IPv4ConfigObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5020 /*ipv4IP1Address*/, ipv4IP1ConfigResponse.@object.address_v4);
					setParameters.Add(5021 /*ipv4IP1DHCPEnabled*/, ipv4IP1ConfigResponse.@object.dhcpV4);
					setParameters.Add(5022 /*ipv4IP1Gateway*/, ipv4IP1ConfigResponse.@object.gateway_v4);
					setParameters.Add(5023 /*ipv4IP1Netmask*/, ipv4IP1ConfigResponse.@object.netmask_v4);
					setParameters.Add(5024 /*ipv4IP1Port*/, ipv4IP1ConfigResponse.@object.port);
					break;

				case 2025:
					IPv4ConfigObject ipv4IP2ConfigResponse = Shared.generalPurposeSerializer.Deserialize<IPv4ConfigObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5025 /*ipv4IP2Address*/, ipv4IP2ConfigResponse.@object.address_v4);
					setParameters.Add(5026 /*ipv4IP2DHCPEnabled*/, ipv4IP2ConfigResponse.@object.dhcpV4);
					setParameters.Add(5027 /*ipv4IP2Gateway*/, ipv4IP2ConfigResponse.@object.gateway_v4);
					setParameters.Add(5028 /*ipv4IP2Netmask*/, ipv4IP2ConfigResponse.@object.netmask_v4);
					setParameters.Add(5029 /*ipv4IP2Port*/, ipv4IP2ConfigResponse.@object.port);
					break;

				case 2030:
					string data = Convert.ToString(protocol.GetParameter(triggerParameter));

					if (data.Contains("ERROR:"))
					{
						protocol.Log("QA" + protocol.QActionID + "|Run|Trigger " + triggerParameter + "|Response was retrieved with errors:\n" + Convert.ToString(protocol.GetParameter(triggerParameter)) + "\n", LogType.Error, LogLevel.NoLogging);
						return;
					}

					InputHardwareIdInfoObject inputHardwareIdInfoResponse = Shared.generalPurposeSerializer.Deserialize<InputHardwareIdInfoObject>(data);
					setParameters.Add(5030 /*buildDate*/, inputHardwareIdInfoResponse.@object.buildDate == null ? "null" : inputHardwareIdInfoResponse.@object.buildDate);
					setParameters.Add(5031 /*partNumber*/, inputHardwareIdInfoResponse.@object.partNumber == null ? "null" : inputHardwareIdInfoResponse.@object.partNumber);
					setParameters.Add(5032 /*serialNumber*/, inputHardwareIdInfoResponse.@object.serialNumber == null ? "null" : inputHardwareIdInfoResponse.@object.serialNumber);
					break;

				case 2035:
					StringAsIntArray diagnosticsURLPresetsResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5035, diagnosticsURLPresetsResponse.ints[0]);
					break;

				case 2050:
					IntArray mpiLedBrightnessResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5050, mpiLedBrightnessResponse.ints[0]);
					break;

				case 2060:
					SimpleDictionary inputHardwareVoltageResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5060 /*1vVoltage*/, inputHardwareVoltageResponse.@object.ContainsKey("1v Core") ? inputHardwareVoltageResponse.@object["1v Core"] : -1);
					setParameters.Add(5061 /*2.5vVoltage*/, inputHardwareVoltageResponse.@object.ContainsKey("2.5v PEHA") ? inputHardwareVoltageResponse.@object["2.5v PEHA"] : -1);
					setParameters.Add(5062 /*3.3vHostVoltage*/, inputHardwareVoltageResponse.@object.ContainsKey("3.3v Host") ? inputHardwareVoltageResponse.@object["3.3v Host"] : -1);
					setParameters.Add(5063 /*3.3vIOVoltage*/, inputHardwareVoltageResponse.@object.ContainsKey("3.3v IO") ? inputHardwareVoltageResponse.@object["3.3v IO"] : -1);
					setParameters.Add(5064 /*48vVINVoltage*/, inputHardwareVoltageResponse.@object.ContainsKey("48v VIN DC") ? inputHardwareVoltageResponse.@object["48v VIN DC"] : -1);
					break;

				case 2065:
					string response = Convert.ToString(protocol.GetParameter(triggerParameter));

					if (response.Contains("errno(2)=No such file or directory"))
					{
						break;
					}

					SimpleDictionary eyeHardwareVoltageResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(response);
					setParameters.Add(5065 /*plus18Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+1.8v") ? eyeHardwareVoltageResponse.@object["+1.8v"] : -1);
					setParameters.Add(5066 /*plus20Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+2.0v") ? eyeHardwareVoltageResponse.@object["+2.0v"] : -1);
					setParameters.Add(5067 /*plus25Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+2.5v") ? eyeHardwareVoltageResponse.@object["+2.5v"] : -1);
					setParameters.Add(5068 /*plus33Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+3.3v") ? eyeHardwareVoltageResponse.@object["+3.3v"] : -1);
					setParameters.Add(5069 /*plus50Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+5.0v") ? eyeHardwareVoltageResponse.@object["+5.0v"] : -1);
					setParameters.Add(5070 /*plus60Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("+6.0v") ? eyeHardwareVoltageResponse.@object["+6.0v"] : -1);
					setParameters.Add(5071 /*minus50Voltage*/, eyeHardwareVoltageResponse.@object.ContainsKey("-5.0v") ? eyeHardwareVoltageResponse.@object["-5.0v"] : -999);
					break;

				case 2075:
					FloatArray eyeHardwareTemperatureResponse = Shared.generalPurposeSerializer.Deserialize<FloatArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5075, eyeHardwareTemperatureResponse.floats[0]);
					break;

				case 2085:
					IntArray fanSpeedResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5085, fanSpeedResponse.ints[0]);
					setParameters.Add(5086, fanSpeedResponse.ints[1]);
					setParameters.Add(5087, fanSpeedResponse.ints.Count < 3 ? -1 : fanSpeedResponse.ints[2]);
					break;

				case 2090:
					InputHardwareFPGATemperatureObject inputHardwareFPGAResponse = Shared.generalPurposeSerializer.Deserialize<InputHardwareFPGATemperatureObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5090 /*inputHardwareFPGADec*/, inputHardwareFPGAResponse.@object.dec);
					setParameters.Add(5091 /*inputHardwareFPGADin*/, inputHardwareFPGAResponse.@object.din);
					setParameters.Add(5092 /*inputHardwareFPGASDI*/, inputHardwareFPGAResponse.@object.sdi);
					break;

				case 2095:
					FanDiagnosticsObject fanDiagnosticsObjectResponse = Shared.generalPurposeSerializer.Deserialize<FanDiagnosticsObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5095 /*fanDiagnostics*/, fanDiagnosticsObjectResponse.@object.status);
					break;

				case 2100:
					StringAsIntArray frontPanelTestModeResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5100, frontPanelTestModeResponse.ints[0]);
					break;

				case 2130:
					SimpleString softwareVersionResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5130 /*softwareVersion*/, softwareVersionResponse.@string);
					break;

				case 2135:
					SimpleString softwareBuildIdResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5135 /*softwareBuildId*/, softwareBuildIdResponse.@string);
					break;

				case 2140:
					SimpleString softwareBuildDateResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(Parameter.softwarebuilddate_5140, TryGetOaDate(softwareBuildDateResponse.@string));
					break;

				case 2155:
					SimpleString macAddressIp1Response = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5155 /*macAddressIP1*/, macAddressIp1Response.@string);
					break;

				case 2160:
					SimpleString macAddressIp2Response = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5160 /*macAddressIP2*/, macAddressIp2Response.@string);
					break;

				case 2165:
					SimpleString videoIPAddressIp1Response = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5165 /*videoIPAddressIP1*/, videoIPAddressIp1Response.@string);
					break;

				case 2170:
					SimpleString videoIPAddressIp2Response = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5170 /*videoIPAddressIP2*/, videoIPAddressIp2Response.@string);
					break;

				case 2175:
					SimpleString nomenclatureResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5175 /*nomenclature*/, nomenclatureResponse.@string);
					break;

				case 2180:
					SimpleString serialNumberResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5180 /*Serial number*/, serialNumberResponse.@string);
					break;

				case 2190:
					InputStatusObject inputStatusResponse = Shared.generalPurposeSerializer.Deserialize<InputStatusObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(6000 /*detectedFormatColorimetry*/, inputStatusResponse.@object.detectedFormat.colorimetry.colorimetry);
					setParameters.Add(6003 /*detectedFormatOETFEncoding*/, inputStatusResponse.@object.detectedFormat.colorimetry.oetf.encoding);
					setParameters.Add(6005 /*detectedFormatOETFMatrix*/, inputStatusResponse.@object.detectedFormat.colorimetry.oetf.matrix);
					setParameters.Add(6010 /*detectedFormatErrors*/, inputStatusResponse.@object.detectedFormat.errors == null ? -1 : inputStatusResponse.@object.detectedFormat.errors.Count);
					setParameters.Add(6015 /*detectedFormatFormat*/, inputStatusResponse.@object.detectedFormat.format == null ? "null" : inputStatusResponse.@object.detectedFormat.format["name"]);
					setParameters.Add(6020 /*detectedFormatMetasource*/, inputStatusResponse.@object.detectedFormat.metaSource == null ? "null" : inputStatusResponse.@object.detectedFormat.metaSource);
					setParameters.Add(6025 /*detectedFormatIsSS*/, inputStatusResponse.@object.detectedFormat.s2022_7);
					setParameters.Add(6030 /*detectedFormatStructure*/, inputStatusResponse.@object.detectedFormat.structure == null ? "null" : inputStatusResponse.@object.detectedFormat.structure["name"]);
					setParameters.Add(6035 /*detectedFormatTransport*/, inputStatusResponse.@object.detectedFormat.transport == null ? "null" : inputStatusResponse.@object.detectedFormat.transport["name"]);
					setParameters.Add(6040 /*detectedFormatType*/, inputStatusResponse.@object.detectedFormat.type);
					setParameters.Add(6100 /*formatColorimetry*/, inputStatusResponse.@object.format.colorimetry.colorimetry);
					setParameters.Add(6103 /*formatOETFEncoding*/, inputStatusResponse.@object.format.colorimetry.oetf.encoding);
					setParameters.Add(6105 /*formatOETFMatrix*/, inputStatusResponse.@object.format.colorimetry.oetf.matrix);
					setParameters.Add(6110 /*formatErrors*/, inputStatusResponse.@object.format.errors == null ? -1 : inputStatusResponse.@object.format.errors.Count);
					setParameters.Add(6115 /*formatFormat*/, inputStatusResponse.@object.format.format == null ? "null" : inputStatusResponse.@object.format.format["name"]);
					setParameters.Add(6120 /*formatMetasource*/, inputStatusResponse.@object.format.metaSource == null ? "null" : inputStatusResponse.@object.format.metaSource);
					setParameters.Add(6125 /*formatIsSS*/, inputStatusResponse.@object.format.s2022_7);
					setParameters.Add(6130 /*formatStructure*/, inputStatusResponse.@object.format.structure == null ? "null" : inputStatusResponse.@object.format.structure["name"]);
					setParameters.Add(6135 /*formatTransport*/, inputStatusResponse.@object.format.transport == null ? "null" : inputStatusResponse.@object.format.transport["name"]);
					setParameters.Add(6140 /*formatType*/, inputStatusResponse.@object.format.type);
					setParameters.Add(6145 /*formatEOTFEncoding*/, inputStatusResponse.@object.format.colorimetry.eotf.encoding);
					setParameters.Add(6150 /*formatEOTFMatrix*/, inputStatusResponse.@object.format.colorimetry.eotf.matrix);
					setParameters.Add(6155 /*videoScopeMedia*/, inputStatusResponse.@object.videoScope.media == null ? "null" : inputStatusResponse.@object.videoScope.media);
					setParameters.Add(6160 /*videoScopePort*/, inputStatusResponse.@object.videoScope.port);
					setParameters.Add(6165 /*videoScopeSlot*/, inputStatusResponse.@object.videoScope.slot);
					break;

				case 2200:
					StringAsIntArray videoSessionControlResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5200, videoSessionControlResponse.ints[0]);
					break;

				case 2205:
					// Possible return: ERROR: S_ioslave_INVALID_SCOPE
					string json = Convert.ToString(protocol.GetParameter(triggerParameter));
					if (!json.StartsWith("ERROR: "))
					{
						StringAsIntArray colorimetrySettingsResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(json);
						setParameters.Add(Parameter.colorimetrysettings_5205, colorimetrySettingsResponse.ints[0]);
					}
					else if (json.Equals("ERROR: S_ioslave_INVALID_SCOPE"))
					{
						setParameters.Add(Parameter.colorimetrysettings_5205, "-2");
					}
					else
					{
						setParameters.Add(Parameter.colorimetrysettings_5205, "-1");
					}

					break;

				case 2210:
					// Possible return: ERROR: S_ioslave_INVALID_SCOPE
					json = Convert.ToString(protocol.GetParameter(triggerParameter));
					if (!json.StartsWith("ERROR: "))
					{
						StringAsIntArray eofSettingsResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
						setParameters.Add(Parameter.eotfsettings_5210, eofSettingsResponse.ints[0]);
					}
					else if (json.Equals("ERROR: S_ioslave_INVALID_SCOPE"))
					{
						setParameters.Add(Parameter.eotfsettings_5210, "-2");
					}
					else
					{
						setParameters.Add(Parameter.eotfsettings_5210, "-1");
					}

					break;

				case 2215:
					DoubleArray bitrateIp1Response = Shared.generalPurposeSerializer.Deserialize<DoubleArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5215, bitrateIp1Response.doubles[0]);
					break;

				case 2220:
					DoubleArray bitrateIp2Response = Shared.generalPurposeSerializer.Deserialize<DoubleArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5220, bitrateIp2Response.doubles[0]);
					break;

				case 2225:
					EthernetStatsObject ethernetStatusIP1Response = Shared.generalPurposeSerializer.Deserialize<EthernetStatsObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));

					// IP1
					setParameters.Add(Parameter.ethstatshighberip1_5700, Convert.ToInt32(ethernetStatusIP1Response.@object.HighBER));
					setParameters.Add(Parameter.ethstatsrxfaultip1_5701, Convert.ToInt32(ethernetStatusIP1Response.@object.RxFault));
					setParameters.Add(Parameter.ethstatstxfaultip1_5702, Convert.ToInt32(ethernetStatusIP1Response.@object.TxFault));
					setParameters.Add(Parameter.ethstatsmaxpacketsip1_5703, ethernetStatusIP1Response.@object.maxPacket);
					setParameters.Add(Parameter.ethstatsminpacketsip1_5704, ethernetStatusIP1Response.@object.minPacket);
					setParameters.Add(Parameter.ethstatsoctetsip1_5705, ethernetStatusIP1Response.@object.octets);
					setParameters.Add(Parameter.ethstatspacketsip1_5706, ethernetStatusIP1Response.@object.packets);
					setParameters.Add(Parameter.ethstatsrxpausesip1_5707, ethernetStatusIP1Response.@object.rxPauses);
					setParameters.Add(Parameter.ethstatstxpausesip1_5708, ethernetStatusIP1Response.@object.txPauses);
					setParameters.Add(Parameter.ethstatsrxbroadcastpacketsip1_5710, ethernetStatusIP1Response.@object.rx.broadcastPackets);
					setParameters.Add(Parameter.ethstatsrxcollisionsip1_5711, ethernetStatusIP1Response.@object.rx.collisions);
					setParameters.Add(Parameter.ethstatsrxcrcallignerrorsip1_5712, ethernetStatusIP1Response.@object.rx.crcAlignError);
					setParameters.Add(Parameter.ethstatsrxdropeventsip1_5713, ethernetStatusIP1Response.@object.rx.dropEvents);
					setParameters.Add(Parameter.ethstatsrxfragmetsip1_5714, ethernetStatusIP1Response.@object.rx.fragments);
					setParameters.Add(Parameter.ethstatsrxtulticastpacketsip1_5715, ethernetStatusIP1Response.@object.rx.multicastPackets);
					setParameters.Add(Parameter.ethstatsrxoverflowsip1_5716, ethernetStatusIP1Response.@object.rx.overflows);
					setParameters.Add(Parameter.ethstatssignalstatusip1_5717, ethernetStatusIP1Response.@object.status == null ? "NA" : ethernetStatusIP1Response.@object.status[0]);
					setParameters.Add(Parameter.ethstatstxbroadcastpacketsip1_5720, ethernetStatusIP1Response.@object.tx.broadcastPackets);
					setParameters.Add(Parameter.ethstatstxcollisionsip1_5721, ethernetStatusIP1Response.@object.tx.collisions);
					setParameters.Add(Parameter.ethstatstxcrcallignerrorsip1_5722, ethernetStatusIP1Response.@object.tx.crcAlignError);
					setParameters.Add(Parameter.ethstatstxdropeventsip1_5723, ethernetStatusIP1Response.@object.tx.dropEvents);
					setParameters.Add(Parameter.ethstatstxfragmetsip1_5724, ethernetStatusIP1Response.@object.tx.fragments);
					setParameters.Add(Parameter.ethstatstxtulticastpacketsip1_5725, ethernetStatusIP1Response.@object.tx.multicastPackets);
					setParameters.Add(Parameter.ethstatstxoverflowsip1_5726, ethernetStatusIP1Response.@object.tx.overflows);
					break;

				case 2230:
					EthernetStatsObject ethernetStatusIP2Response = Shared.generalPurposeSerializer.Deserialize<EthernetStatsObject>(Convert.ToString(protocol.GetParameter(triggerParameter)));

					// IP2
					setParameters.Add(Parameter.ethstatshighberip2_5800, ethernetStatusIP2Response.@object.HighBER);
					setParameters.Add(Parameter.ethstatsrxfaultip2_5801, ethernetStatusIP2Response.@object.RxFault);
					setParameters.Add(Parameter.ethstatstxfaultip2_5802, ethernetStatusIP2Response.@object.TxFault);
					setParameters.Add(Parameter.ethstatsmaxpacketsip2_5803, ethernetStatusIP2Response.@object.maxPacket);
					setParameters.Add(Parameter.ethstatsminpacketsip2_5804, ethernetStatusIP2Response.@object.minPacket);
					setParameters.Add(Parameter.ethstatsoctetsip2_5805, ethernetStatusIP2Response.@object.octets);
					setParameters.Add(Parameter.ethstatspacketsip2_5806, ethernetStatusIP2Response.@object.packets);
					setParameters.Add(Parameter.ethstatsrxpausesip2_5807, ethernetStatusIP2Response.@object.rxPauses);
					setParameters.Add(Parameter.ethstatstxpausesip2_5808, ethernetStatusIP2Response.@object.txPauses);
					setParameters.Add(Parameter.ethstatsrxbroadcastpacketsip2_5810, ethernetStatusIP2Response.@object.rx.broadcastPackets);
					setParameters.Add(Parameter.ethstatsrxcollisionsip2_5811, ethernetStatusIP2Response.@object.rx.collisions);
					setParameters.Add(Parameter.ethstatsrxcrcallignerrorsip2_5812, ethernetStatusIP2Response.@object.rx.crcAlignError);
					setParameters.Add(Parameter.ethstatsrxdropeventsip2_5813, ethernetStatusIP2Response.@object.rx.dropEvents);
					setParameters.Add(Parameter.ethstatsrxfragmetsip2_5814, ethernetStatusIP2Response.@object.rx.fragments);
					setParameters.Add(Parameter.ethstatsrxtulticastpacketsip2_5815, ethernetStatusIP2Response.@object.rx.multicastPackets);
					setParameters.Add(Parameter.ethstatsrxoverflowsip2_5816, ethernetStatusIP2Response.@object.rx.overflows);
					setParameters.Add(Parameter.ethstatssignalstatusip2_5817, ethernetStatusIP2Response.@object.status == null ? "NA" : ethernetStatusIP2Response.@object.status[0]);
					setParameters.Add(Parameter.ethstatstxbroadcastpacketsip2_5820, ethernetStatusIP2Response.@object.tx.broadcastPackets);
					setParameters.Add(Parameter.ethstatstxcollisionsip2_5821, ethernetStatusIP2Response.@object.tx.collisions);
					setParameters.Add(Parameter.ethstatstxcrcallignerrorsip2_5822, ethernetStatusIP2Response.@object.tx.crcAlignError);
					setParameters.Add(Parameter.ethstatstxdropeventsip2_5823, ethernetStatusIP2Response.@object.tx.dropEvents);
					setParameters.Add(Parameter.ethstatstxfragmetsip2_5824, ethernetStatusIP2Response.@object.tx.fragments);
					setParameters.Add(Parameter.ethstatstxtulticastpacketsip2_5825, ethernetStatusIP2Response.@object.tx.multicastPackets);
					setParameters.Add(Parameter.ethstatstxoverflowsip2_5826, ethernetStatusIP2Response.@object.tx.overflows);
					break;

				case 2235:
					SimpleDictionary ipPITSummaryIP1ObjectResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5235 /*ipPITSummaryIP1Key*/, ipPITSummaryIP1ObjectResponse.@object["key"]);
					setParameters.Add(5236 /*ipPITSummaryIP1Ready*/, ipPITSummaryIP1ObjectResponse.@object["ready"]);
					break;

				case 2240:
					SimpleDictionary ipPITSummaryIP2ObjectResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5240 /*ipPITSummaryIP1Key*/, ipPITSummaryIP2ObjectResponse.@object["key"]);
					setParameters.Add(5241 /*ipPITSummaryIP1Ready*/, ipPITSummaryIP2ObjectResponse.@object["ready"]);
					break;

				case 2275:
					SimpleString hostIdResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5275 /*hostId*/, hostIdResponse.@string);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Unexpected trigger: " + triggerParameter, LogType.Error, LogLevel.NoLogging);
					break;
			}

			if (setParameters.Any())
			{
				protocol.SetParameters(setParameters.Keys.ToArray(), setParameters.Values.ToArray());
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|Run|Failure on trigger: " + triggerParameter + ". " + e, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static object TryGetOaDate(string dateTime, string format = "yyyy-MM-dd HH:mm:ss")
	{
		double doubleDateTime = -1;
		DateTime time;
		if (DateTime.TryParseExact(dateTime, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out time))
		{
			doubleDateTime = time.ToOADate();
		}

		return doubleDateTime;
	}
}]]>
		</QAction>
		<QAction id="2300" name="processRawResponses2" encoding="csharp" triggers="2315;2330;2395;2400;2450;2455;2460;2470;2475;2480;2485;2495;2500;2505;2510;2515;2520;2525;2595;2600;2601;2602;2603;2604;2605;2610;2614;2615;2616;2617" dllImport="Newtonsoft.Json.dll;System.Web.Extensions.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using DCF;
using Skyline.DataMiner.Protocols.prism.Json;
using Skyline.DataMiner.Scripting;
using SLNetMessages = Skyline.DataMiner.Net.Messages;

/// <summary>
/// DataMiner QAction Class: processRawResponses2.
/// </summary>
public class QAction
{
	/// <summary>
	/// Process the raw responses for parameters from 2300 to 2605.
	/// </summary>
	/// <param name="protocol">Link with Skyline DataMiner.</param>
	public static void Run(SLProtocolExt protocol)
	{
		int triggerParameter = protocol.GetTriggerParameter();
		try
		{
			Dictionary<int, object> setParameters = new Dictionary<int, object>();
			switch (triggerParameter)
			{
				case 2315:
					SimpleString cableTypeResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5315 /*cableType*/, cableTypeResponse.@string);
					break;

				case 2330:
					IntArray jitterHPFResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5330, jitterHPFResponse.ints[0]);
					break;

				case 2395:
					SimpleString currentTimeZoneResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5395 /*currentTimezZone*/, currentTimeZoneResponse.@string);
					break;

				case 2400:
					SimpleString currentTimeResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(Parameter.currenttime_5400, TryGetOaDate(currentTimeResponse.@string));
					break;

				case 2450:
					SimpleString systemUptimeResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5450 /*systemUptimeT*/, systemUptimeResponse.@string);
					break;

				case 2455:
					SimpleString gpioReadResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5455 /*gpioRead*/, gpioReadResponse.@string);
					break;

				case 2470:
					StringAsIntArray audioTestPlayResponse = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5470, audioTestPlayResponse.ints[0]);
					break;

				case 2475:
					IntArray audioTestFrequencyResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5475, audioTestFrequencyResponse.ints[0]);
					break;

				case 2480:
					SimpleString audioTestChanResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5480 /*audiotestChan*/, audioTestChanResponse.@string);
					break;

				case 2485:
					IntArray audioTestVolumeResponse = Shared.generalPurposeSerializer.Deserialize<IntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5485, audioTestVolumeResponse.ints[0]);
					break;

				case 2495:
					SimpleString biosNomenclatureResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5495 /*biosNomenclature*/, biosNomenclatureResponse.@string);
					break;

				case 2500:
					SimpleString biosVersionResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5500 /*biosVersion*/, biosVersionResponse.@string);
					break;

				case 2505:
					SimpleString biosTypeResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5505 /*biosType*/, biosTypeResponse.@string);
					break;

				case 2510:
					SimpleString sataModeResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5510 /*sataMode*/, sataModeResponse.@string);
					break;

				case 2515:
					SimpleString bootDiskDriverResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5515 /*bootDiskDriver*/, bootDiskDriverResponse.@string);
					break;

				case 2520:
					SimpleString hostnameResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5520 /*hostName*/, hostnameResponse.@string);
					break;

				case 2525:
					SimpleString riserVersionResponse = Shared.generalPurposeSerializer.Deserialize<SimpleString>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(5525 /*riserVersion*/, riserVersionResponse.@string);
					break;

				case 2595:
					ActiveInput activeInputResponse = Shared.generalPurposeSerializer.Deserialize<ActiveInput>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					setParameters.Add(Parameter.activeinput_5595, activeInputResponse.name);
					break;

				case 2600: // Input 0 Configuration
					UpdateInputConfigurationTables("0", triggerParameter, protocol);
					break;

				case 2601:
					UpdateInputConfigurationTables("1", triggerParameter, protocol);
					break;

				case 2602:
					UpdateInputConfigurationTables("2", triggerParameter, protocol);
					break;

				case 2603:
					UpdateInputConfigurationTables("3", triggerParameter, protocol);
					break;

				case 2604:
					UpdateInputConfigurationTables("4", triggerParameter, protocol);
					break;

				case 2605:
					UpdateInputConfigurationTables("5", triggerParameter, protocol);
					break;

				case 2610:
					UpdateFlowTableCondensed(protocol);
					break;

				case 2614:
				case 2617:
					ProcessPtpProfileInfo(protocol, triggerParameter, setParameters);
					break;

				case 2615:
					PtpStatusProcessing(protocol, triggerParameter, setParameters);
					break;

				case 2616:
					SimpleDictionary ptpMessageRatesResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(protocol.GetParameter(triggerParameter)));
					TryGetNumerPart(ptpMessageRatesResponse, "announceRate", Parameter.ptpannouncerate_6230, setParameters);
					TryGetNumerPart(ptpMessageRatesResponse, "delayReqRate", Parameter.ptpdelayreqrate_6231, setParameters);
					TryGetNumerPart(ptpMessageRatesResponse, "delayRespRate", Parameter.ptpdelayresprate_6232, setParameters);
					TryGetNumerPart(ptpMessageRatesResponse, "syncRate", Parameter.ptpsyncrate_6233, setParameters);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Unexpected trigger: " + triggerParameter, LogType.Error, LogLevel.NoLogging);
					break;
			}

			if (setParameters.Any())
			{
				protocol.SetParameters(setParameters.Keys.ToArray(), setParameters.Values.ToArray());
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|Run|Failure on trigger: " + triggerParameter + ". " + e, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static object[] BuildFlowsCondensedTableRow(string flowName, Dictionary<string, object> currentFlow, string flowIndex)
	{
		return new object[]
		{
			flowIndex,
			flowName,
			((Dictionary<string, object>)currentFlow["flow"])["protocolsFmt"],
			currentFlow.ContainsKey("bitrate") ? currentFlow["bitrate"] : -1,
			Convert.ToString(currentFlow["expired"]),
			((Dictionary<string, object>)((Dictionary<string, object>)currentFlow["flow"])["dest"])["ip"],
			((Dictionary<string, object>)((Dictionary<string, object>)currentFlow["flow"])["dest"])["port"],
			((Dictionary<string, object>)((Dictionary<string, object>)currentFlow["flow"])["src"])["ip"],
			((Dictionary<string, object>)((Dictionary<string, object>)currentFlow["flow"])["src"])["port"],
			((Dictionary<string, object>)currentFlow["flow"])["vlan"],
			currentFlow.ContainsKey("linkDelay") ? currentFlow["linkDelay"] : -1,
			currentFlow.ContainsKey("packets") ? currentFlow["packets"] : -1,
			Convert.ToString(currentFlow["pending"]),
			currentFlow.ContainsKey("pit") ? currentFlow["pit"] : -1,
			Convert.ToString(currentFlow["selected"]),
			currentFlow.ContainsKey("totalBufSize") ? currentFlow["totalBufSize"] : -1,
			currentFlow.ContainsKey("rtpMarkerFreq") ? currentFlow["rtpMarkerFreq"] : -1,
			currentFlow.ContainsKey("rtpSeqErrorCnt") ? currentFlow["rtpSeqErrorCnt"] : -1,
			currentFlow.ContainsKey("rtpMarkerStatus") ? currentFlow["rtpMarkerStatus"] : "N/A",
		};
	}

	private static void DeleteKeysWhenNeeded(SLProtocol protocol, int tablePid, List<string> keys)
	{
		if (keys.Any())
		{
			protocol.DeleteRow(tablePid, keys.ToArray());
		}
	}

	private static void FillPartialArrayWhenNeeded(SLProtocol protocol, int tablePid, List<object[]> rows)
	{
		if (rows.Any())
		{
			protocol.FillArray(tablePid, rows, NotifyProtocol.SaveOption.Partial);
		}
	}

	private static List<TableData> GetAudioTableData(List<object[]> rows)
	{
		List<TableData> tableRows = new List<TableData>();

		foreach (var row in rows)
		{
			AudioflowinputconfigtableQActionRow audioflowinputconfigtableQActionRow = (AudioflowinputconfigtableQActionRow)row;

			string instance = Convert.ToString(audioflowinputconfigtableQActionRow.Audioflowconfigtableinputid_6301);
			string destinationAddress = Convert.ToString(audioflowinputconfigtableQActionRow.Audioflowconfigtableinputdstaddress_6304);

			tableRows.Add(new TableData(instance, destinationAddress));
		}

		return tableRows;
	}

	private static List<TableData> GetVideoTableData(List<object[]> rows)
	{
		List<TableData> tableRows = new List<TableData>();

		foreach (var row in rows)
		{
			VideoflowinputconfigtableQActionRow videoflowinputconfigtableQActionRow = (VideoflowinputconfigtableQActionRow)row;

			string instance = Convert.ToString(videoflowinputconfigtableQActionRow.Videoflowconfigtableinputid_6401);
			string destinationAddress = Convert.ToString(videoflowinputconfigtableQActionRow.Videoflowconfigtableinputdstaddress_6404);

			tableRows.Add(new TableData(instance, destinationAddress));
		}

		return tableRows;
	}

	private static void ProcessIpTypes(
		SLProtocol protocol,
		string inputId,
		Dictionary<string, object> inputConfiguration,
		List<string> videoConfigKeys,
		List<string> audioConfigKeys,
		List<object[]> audioRows,
		List<object[]> videoRows
		)
	{
		string inputType = (string)inputConfiguration["inputType"];

		foreach (Dictionary<string, object> flow in (ArrayList)inputConfiguration["flows"])
		{
			// Since there could be two or more flow of the same type, we will use the redundancy field to differentiate them
			string composedInputId = inputId + "." + ((Dictionary<string, object>)flow["media"])["redundancy"];

			string type = ((Dictionary<string, object>)flow["media"])["type"].ToString();
			switch (type)
			{
				case "Audio":
					Dictionary<string, object> audioFlow = (Dictionary<string, object>)flow["flow"];
					object[] row = new object[]
					{
							composedInputId /*inputNumber*/,
							inputType /*inputType*/,
							audioFlow["PID"] /*inputPID*/,
							((Dictionary<string, object>)audioFlow["dst"])["addr"] /*inputDstAddr*/,
							((Dictionary<string, object>)audioFlow["dst"])["port"] /*inputDstPort*/,
							((Dictionary<string, object>)audioFlow["dst"])["prefix"] /*inputDstPrefix*/,
							audioFlow["igmpMode"] /*inputVideoigmpMode*/,
							audioFlow["igmpVersion"] /*inputVideoigmpVersion*/,
							audioFlow["ipVersion"] /*inputVideoIpVersion*/,
							audioFlow["rtpType"] /*inputVideoRtpType*/,
							((Dictionary<string, object>)audioFlow["src"])["addr"] /*inputSrcAddr*/,
							((Dictionary<string, object>)audioFlow["src"])["port"] /*inputSrcPort*/,
							((Dictionary<string, object>)audioFlow["src"])["prefix"] /*inputSrcPrefix*/,
							audioFlow.ContainsKey("bitDepth") ? audioFlow["bitDepth"] : -1 /*bitDepth*/,
							audioFlow.ContainsKey("numChannels") ? audioFlow["numChannels"] : -1 /*numChannels*/,
							((Dictionary<string, object>)flow["media"])["index"] /*inputMediaIndex*/,
							((Dictionary<string, object>)flow["media"])["redundancy"] /*inputMediaRedundancy*/,
							inputConfiguration["name"] /*inputName*/,
							(Boolean)inputConfiguration["s2022_7"] ? "true" : "false" /*inputIss2022_7*/,
					};

					audioConfigKeys.Remove(composedInputId);
					audioRows.Add(row);
					break;

				case "Video":
					Dictionary<string, object> videoFlow = (Dictionary<string, object>)flow["flow"];
					object[] videoRow = new object[]
					{
							composedInputId /*inputNumber*/,
							inputType /*inputType*/,
							((Dictionary<string, object>)videoFlow["dst"])["addr"] /*inputDstAddr*/,
							((Dictionary<string, object>)videoFlow["dst"])["port"] /*inputDstPort*/,
							((Dictionary<string, object>)videoFlow["dst"])["prefix"] /*inputDstPrefix*/,
							videoFlow["igmpMode"] /*inputVideoigmpMode*/,
							videoFlow["igmpVersion"] /*inputVideoigmpVersion*/,
							videoFlow["ipVersion"] /*inputVideoIpVersion*/,
							videoFlow["rtpType"] /*inputVideoRtpType*/,
							((Dictionary<string, object>)videoFlow["src"])["addr"] /*inputSrcAddr*/,
							((Dictionary<string, object>)videoFlow["src"])["port"] /*inputSrcPort*/,
							((Dictionary<string, object>)videoFlow["src"])["prefix"] /*inputSrcPrefix*/,
							((Dictionary<string, object>)flow["media"])["index"] /*inputMediaIndex*/,
							((Dictionary<string, object>)flow["media"])["redundancy"] /*inputMediaRedundancy*/,
							inputConfiguration["name"] /*inputName*/,
							(Boolean)inputConfiguration["s2022_7"] ? "true" : "false" /*inputIss2022_7*/,
							-1 /*inputPort*/,
					};

					videoConfigKeys.Remove(composedInputId);
					videoRows.Add(videoRow);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|ProcessIpTypes|Unexpected type: " + type, LogType.Error, LogLevel.NoLogging);
					break;
			}
		}
	}

	private static void ProcessPtpProfileInfo(SLProtocol protocol, int triggerParameter, Dictionary<int, object> setParameters)
	{
		StringAsIntArray ptpProfile = Shared.generalPurposeSerializer.Deserialize<StringAsIntArray>(Convert.ToString(protocol.GetParameter(triggerParameter)));
		int setPid = triggerParameter == 2614 ? 6214 : 6217;
		setParameters.Add(setPid, ptpProfile.ints[0]);

		if (triggerParameter == 2614)
		{
			switch (ptpProfile.ints[0])
			{
				case "PTP_PROFILE_2059":
					setParameters.Add(1617, "api/ptp_domain_2059_profile");
					break;

				case "PTP_PROFILE_AES67":
					setParameters.Add(1617, "api/ptp_domain_aes67_profile_profile");
					break;

				case "PTP_PROFILE_GENERIC":
					setParameters.Add(1617, "api/ptp_domain_general_profile");
					break;

				default:
					setParameters.Add(1617, String.Empty);
					protocol.Log("QA" + protocol.QActionID + "|ProcessPtpProfileInfo|Unexpected PTP Profile value '" + ptpProfile.ints[0] + "'.", LogType.Error, LogLevel.NoLogging);
					break;
			}
		}
	}

	private static void PtpDefaultValues(Dictionary<int, object> setParameters)
	{
		setParameters.Add(Parameter.ptpgrandmasterclockaccuracy_6203, "-1");
		setParameters.Add(Parameter.ptpgrandmasterclockclass_6204, -1);
		setParameters.Add(Parameter.ptpgrandmasterclocksource_6205, "-1");
		setParameters.Add(Parameter.ptpgrandmasterclockvariance_6206, -1);
		setParameters.Add(Parameter.ptpgrandmasterid_6207, "-1");
		setParameters.Add(Parameter.ptpgrandmasteripaddress_6208, "-1");
		setParameters.Add(Parameter.ptpgrandmasterpriority1_6209, "-1");
		setParameters.Add(Parameter.ptpgrandmasterpriority2_6210, "-1");
	}

	private static void PtpStatusProcessing(SLProtocol protocol, int triggerParameter, Dictionary<int, object> setParameters)
	{
		SimpleDictionary ptpStatusResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(protocol.GetParameter(triggerParameter)));

		setParameters.Add(Parameter.ptplockstatus_6200, ptpStatusResponse.@object["lockStatus"]);
		setParameters.Add(Parameter.ptpportstate_6201, ptpStatusResponse.@object["portState"]);
		setParameters.Add(Parameter.ptpgpstime_6202, ptpStatusResponse.@object.ContainsKey("gpsTimeString") ? TryGetOaDate(ptpStatusResponse.@object["gpsTimeString"].ToString()) : -1);

		if (ptpStatusResponse.@object.ContainsKey("grandMaster"))
		{
			Dictionary<string, object> grandMasterConfig = (Dictionary<string, object>)ptpStatusResponse.@object["grandMaster"];

			setParameters.Add(Parameter.ptpgrandmasterclockaccuracy_6203, grandMasterConfig.ContainsKey("clockAccuracy") ? grandMasterConfig["clockAccuracy"] : "-1");
			setParameters.Add(Parameter.ptpgrandmasterclockclass_6204, grandMasterConfig.ContainsKey("clockClass") ? grandMasterConfig["clockClass"] : -1);
			setParameters.Add(Parameter.ptpgrandmasterclocksource_6205, grandMasterConfig.ContainsKey("clockSource") ? grandMasterConfig["clockSource"] : "-1");
			setParameters.Add(Parameter.ptpgrandmasterclockvariance_6206, grandMasterConfig.ContainsKey("clockVariance") ? grandMasterConfig["clockVariance"] : -1);
			setParameters.Add(Parameter.ptpgrandmasterid_6207, grandMasterConfig.ContainsKey("id") ? grandMasterConfig["id"] : "-1");
			setParameters.Add(Parameter.ptpgrandmasteripaddress_6208, grandMasterConfig.ContainsKey("ipAddress") ? grandMasterConfig["ipAddress"] : "-1");
			setParameters.Add(Parameter.ptpgrandmasterpriority1_6209, grandMasterConfig.ContainsKey("priority1") ? grandMasterConfig["priority1"] : "-1");
			setParameters.Add(Parameter.ptpgrandmasterpriority2_6210, grandMasterConfig.ContainsKey("priority2") ? grandMasterConfig["priority2"] : "-1");
		}
		else
		{
			PtpDefaultValues(setParameters);
		}

		setParameters.Add(Parameter.ptplockfom_6211, ptpStatusResponse.@object.ContainsKey("lockFom")
			? ptpStatusResponse.@object["lockFom"].ToString().Replace(" ", String.Empty).Replace("ns", String.Empty)
			: "-1");
		setParameters.Add(Parameter.ptptimestring_6212, ptpStatusResponse.@object.ContainsKey("ptpTimeString") ? TryGetOaDate(ptpStatusResponse.@object["ptpTimeString"].ToString()) : -1);
		setParameters.Add(Parameter.ptpstepsremoved_6213, ptpStatusResponse.@object.ContainsKey("stepsRemoved") ? ptpStatusResponse.@object["stepsRemoved"] : -1);
	}

	private static void TryGetNumerPart(SimpleDictionary messageResponse, string propertyName, int parameterId, Dictionary<int, object> setParameters)
	{
		string[] valueParts = messageResponse.@object[propertyName].ToString().Split(' '); // The value has a format like this: "XXX msg/sec"
		double value;
		if (Double.TryParse(valueParts[0], out value))
		{
			setParameters.Add(parameterId, value);
		}
		else
		{
			setParameters.Add(parameterId, -1);
		}
	}

	private static object TryGetOaDate(string dateTime, char separator = '(', string format = "yyyy-MM-dd HH:mm:ss")
	{
		dateTime = dateTime.Split(separator)[0].Trim();

		double doubleDateTime = -1;
		DateTime time;
		if (DateTime.TryParseExact(dateTime, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out time))
		{
			doubleDateTime = time.ToOADate();
		}

		return doubleDateTime;
	}

	private static void UpdateFlowTableCondensed(SLProtocol protocol)
	{
		object[] parameters = (object[])protocol.GetParameters(new uint[] { Parameter.flowtablecondensedraw_2610, Parameter.condensendflowsindextogglebutton_8498 });

		SimpleDictionary flowTableCondensedObjectResponse = Shared.generalPurposeSerializer.Deserialize<SimpleDictionary>(Convert.ToString(parameters[0]));
		List<object[]> rows = new List<object[]>();
		List<object[]> rowsSelected = new List<object[]>();

		// In some rare cases, the device returns a null object. In this cases, we will simply clear the table
		if (flowTableCondensedObjectResponse.@object == null)
		{
			protocol.FillArray(Parameter.Flowscondensedtable.tablePid, rows, NotifyProtocol.SaveOption.Full);
			return;
		}

		foreach (string flowName in flowTableCondensedObjectResponse.@object.Keys)
		{
			if (flowName.Contains("summary")) continue;

			Dictionary<string, object> currentFlow = (Dictionary<string, object>)flowTableCondensedObjectResponse.@object[flowName];
			string flowIndex = Convert.ToString(((Dictionary<string, object>)currentFlow["flowId"])["index"]);
			bool tableIndex = Convert.ToInt16(parameters[1]) == 1;

			if (!tableIndex)
			{
				flowIndex = Convert.ToString(((Dictionary<string, object>)currentFlow["flowId"])["port"]) + "." + Convert.ToString(((Dictionary<string, object>)currentFlow["flowId"])["index"]);
			}

			object[] row = BuildFlowsCondensedTableRow(flowName, currentFlow, flowIndex);

			if (Convert.ToBoolean(currentFlow["selected"]))
			{
				rowsSelected.Add(row);
			}

			rows.Add(row);
		}

		protocol.FillArray(Parameter.Flowscondensedtable.tablePid, rows, NotifyProtocol.SaveOption.Full);
		protocol.FillArray(Parameter.Flowscondensedtableselected.tablePid, rowsSelected, NotifyProtocol.SaveOption.Full);
	}

	private static void UpdateInputConfigurationTables(string inputId, int triggerParameter, SLProtocolExt protocol)
	{
		Dictionary<string, object> inputConfiguration = Shared.generalPurposeSerializer.Deserialize<Dictionary<string, object>>(Convert.ToString(protocol.GetParameter(triggerParameter)));

		string inputType = (string)inputConfiguration["inputType"];

		if (protocol.Exists(Parameter.Inputstable.tablePid, inputId))
		{ // Updates the table that support DCF connections
			protocol.SetRow(Parameter.Inputstable.tablePid, inputId, new object[] { inputId, inputConfiguration["name"], protocol.GetParameter(triggerParameter) });
		}
		else
		{
			protocol.AddRow(Parameter.Inputstable.tablePid, new object[] { inputId, inputConfiguration["name"], protocol.GetParameter(triggerParameter) });
		}

		List<string> videoConfigKeys = ((object[])((object[])protocol.NotifyProtocol(
			(int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Videoflowinputconfigtable.tablePid,
			new uint[] { Parameter.Videoflowinputconfigtable.indexColumn }))[0]).Select(x => x.ToString()).ToList();
		List<string> audioConfigKeys = ((object[])((object[])protocol.NotifyProtocol(
			(int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Audioflowinputconfigtable.tablePid,
			new uint[] { Parameter.Videoflowinputconfigtable.indexColumn }))[0]).Select(x => x.ToString()).ToList();

		List<string> audioKeysToRemove = new List<string>();
		List<string> videoKeysToRemove = new List<string>();

		List<object[]> audioRows = new List<object[]>();
		List<object[]> videoRows = new List<object[]>();

		if (inputType.Equals("SDI"))
		{
			// SDI inputs will be shown only in the video table
			string composedInputId = String.Format("{0}.0", inputId);

			object[] row = new object[]
			{
				composedInputId /*inputNumber*/,
				inputType /*inputType*/,
				"NA" /*inputDstAddr*/,
				"NA" /*inputDstPort*/,
				-1 /*inputDstPrefix*/,
				"NA" /*inputVideoigmpMode*/,
				-1 /*inputVideoigmpVersion*/,
				-1 /*inputVideoIpVersion*/,
				-1 /*inputVideoRtpType*/,
				"NA" /*inputSrcAddr*/,
				"NA" /*inputSrcPort*/,
				-1 /*inputSrcPrefix*/,
				-1 /*inputMediaIndex*/,
				-1 /*inputMediaRedundancy*/,
				inputConfiguration["name"] /*inputName*/,
				"false" /*inputIss2022_7*/,
				inputId /*inputPort*/,
			};

			videoConfigKeys.Remove(composedInputId);
			videoRows.Add(row);
		}
		else
		{ // IP type inputs
		  // Some responses have both flows, but some only one
			ProcessIpTypes(protocol, inputId, inputConfiguration, videoConfigKeys, audioConfigKeys, audioRows, videoRows);
		}

		// clean non available items for inputId
		for (int i = 0; i < 2; i++)
		{
			string key = String.Format("{0}.{1}", inputId, i);
			if (audioConfigKeys.Contains(key))
			{
				audioKeysToRemove.Add(key);
			}

			if (videoConfigKeys.Contains(key))
			{
				videoKeysToRemove.Add(key);
			}
		}

		DeleteKeysWhenNeeded(protocol, Parameter.Audioflowinputconfigtable.tablePid, audioKeysToRemove);
		DeleteKeysWhenNeeded(protocol, Parameter.Videoflowinputconfigtable.tablePid, videoKeysToRemove);

		FillPartialArrayWhenNeeded(protocol, Parameter.Audioflowinputconfigtable.tablePid, audioRows);
		FillPartialArrayWhenNeeded(protocol, Parameter.Videoflowinputconfigtable.tablePid, videoRows);

		List<TableData> audioData = GetAudioTableData(audioRows);
		List<TableData> videoData = GetVideoTableData(videoRows);

		bool dcfPropertyStateEnabled = Convert.ToBoolean(protocol.GetParameter(Parameter.dcfethernetinterfacesemulticastproperty_100));

		if (dcfPropertyStateEnabled)
		{
			EthernetInterfaces ethernetInterfaces = new EthernetInterfaces(protocol);
			ethernetInterfaces.InitializeInterfacesWithTableData(audioData);
			DcfInterfaceProperty.UpdateDcfProperties(protocol, ethernetInterfaces);
			ethernetInterfaces.InitializeInterfacesWithTableData(videoData);
			DcfInterfaceProperty.UpdateDcfProperties(protocol, ethernetInterfaces);
		}
	}
}]]>
		</QAction>
		<QAction id="6000" name="assembleWriteInputConfigurationRequest" encoding="csharp" triggers="6354;6355;6356;6360;6361;6362;6363;6368;6454;6455;6456;6460;6461;6462;6463;6468;6470" row="true" dllImport="System.Web.Extensions.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using Skyline.DataMiner.Protocols.prism.Json;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: assembleWriteInputConfigurationRequest.
/// </summary>
public class QAction
{
	/// <summary>
	/// This QAction assembles the requests that modify information for input configuration parameters.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			string tableKey = protocol.RowKey();
			char inputId = tableKey[0];
			switch (inputId)
			{ // The table key is a composition of the input id, plus the flow id
				case '0':
					QueueWriteRequest(tableKey, 1650 /*rawWriteInputConfigureInput0*/, protocol);
					break;

				case '1':
					QueueWriteRequest(tableKey, 1651 /*rawWriteInputConfigureInput1*/, protocol);
					break;

				case '2':
					QueueWriteRequest(tableKey, 1652 /*rawWriteInputConfigureInput2*/, protocol);
					break;

				case '3':
					QueueWriteRequest(tableKey, 1653 /*rawWriteInputConfigureInput3*/, protocol);
					break;

				case '4':
					QueueWriteRequest(tableKey, 1654 /*rawWriteInputConfigureInput4*/, protocol);
					break;

				case '5':
					QueueWriteRequest(tableKey, 1655 /*rawWriteInputConfigureInput5*/, protocol);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Unknown Input ID: " + inputId.ToString(), LogType.Error, LogLevel.NoLogging);
					break;
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|Run|Failure: " + e, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static void AssembleWriteRequest(string tableKey, int inputId, int writeParam, object newValue, int triggerParam, SLProtocol protocol)
	{
		string signalType = triggerParam > Parameter.Videoflowinputconfigtable.tablePid ? "Video" : "Audio";
		string[] tableKeyParts = tableKey.Split('.');
		int redundancy;

		if (tableKeyParts.Length < 2 || !Int32.TryParse(tableKeyParts[1], out redundancy))
		{
			return;
		}

		// The third column of the inputs table contains the last known configuration of the given input. "writeParam - 1650" is the number of the input
		String formerResponse = (string)protocol.GetParameterIndexByKey(Parameter.Inputstable.tablePid, Convert.ToString(inputId), Parameter.Inputstable.Idx.inputstablelastconfigurationresponse_8003 + 1);
		Dictionary<string, object> deserializedFormerResponse = Shared.generalPurposeSerializer.Deserialize<Dictionary<string, object>>(formerResponse);

		// The next challenge is to find out what flow was modified. From the table we know the if it was Audio or Video and we also know the redundancy flag,
		// so now we will iterate through the existing flows and check if the settings match
		bool flowFound = false; // Flag used to know if a flow matching the specifications was found in the former response. This should always be true,
								// However, I'll leave this as a safeguard in case there's some sort or desync between the information in the table and that in the original response
		if (!deserializedFormerResponse.ContainsKey("flows"))
		{
			return;
		}

		// An IP-enabled input
		foreach (Dictionary<String, object> flow in (ArrayList)deserializedFormerResponse["flows"])
		{
			if (((Dictionary<string, object>)flow["media"])["redundancy"].Equals(redundancy) && ((Dictionary<string, object>)flow["media"])["type"].Equals(signalType))
			{
				switch (triggerParam)
				{
					case 6354:
					case 6454:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["addr"] = newValue;
						break;

					case 6355:
					case 6455:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["port"] = newValue;
						break;

					case 6356:
					case 6456:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["prefix"] = newValue;
						break;

					case 6360:
					case 6460:
						((Dictionary<string, object>)flow["flow"])["rtpType"] = newValue;
						break;

					case 6361:
					case 6461:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["addr"] = newValue;
						break;

					case 6362:
					case 6462:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["port"] = newValue;
						break;

					case 6363:
					case 6463:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["prefix"] = newValue;
						break;

					default:
						protocol.Log("QA" + protocol.QActionID + "|AssembleWriteRequest|Unknown trigger: " + triggerParam, LogType.Error, LogLevel.NoLogging);
						break;
				}

				flowFound = true;
				break;
			}
		}

		if (flowFound)
		{
			// The request is slightly different from the response, the flows have to be encapsulated into an additional level
			Dictionary<string, object> setRequest = new Dictionary<string, object>();
			setRequest.Add("input", inputId);
			setRequest.Add("data", deserializedFormerResponse);

			protocol.SetParameter(writeParam, Shared.generalPurposeSerializer.Serialize(setRequest));
		}
		else
		{
			protocol.Log("QA" + protocol.QActionID + "|AssembleWriteRequest|The flow with id " + tableKey + " could not be found in the original JSON response", LogType.Error, LogLevel.NoLogging);
		}
	}

	private static void QueueWriteRequest(string tableKey, int writeParam, SLProtocol protocol)
	{
		int triggerParam = protocol.GetTriggerParameter();
		object newValue = protocol.GetParameter(triggerParam);
		int inputId = writeParam - 1650;

		// Add the set to the queue, if the queue is empty, perform the set immediately, if not, just wait till the queue is processed
		// Let's remember that the format the changes are stored are TABLE_KEY_N:WRITE_PARAM_ID_1:NEW_VALUE_1;...;TABLE_KEY_N:WRITE_PARAM_ID_N:NEW_VALUE_N
		string currentCurrentQueue = Convert.ToString(protocol.GetParameter(10150 + inputId)); // The queues estar in pid 10150
		if (String.IsNullOrEmpty(currentCurrentQueue))
		{
			protocol.SetParameter(10150 + inputId, tableKey + ":" + triggerParam + ":" + newValue);
			AssembleWriteRequest(tableKey, inputId, writeParam, newValue, triggerParam, protocol);
		}
		else
			protocol.SetParameter(10150 + inputId, currentCurrentQueue + ";" + tableKey + ":" + triggerParam + ":" + newValue);
	}
}]]>
		</QAction>
		<QAction id="6500" name="disableInputFlow" encoding="csharp" row="true" triggers="6320;6421" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: disableInputFlow.
/// </summary>
public class QAction
{
	/// <summary>
	/// This QAction sends an update request without the flow that triggered the action, so it is disabled.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			int writeParam = Convert.ToInt16(protocol.RowKey()[0]);

			if (protocol.GetTriggerParameter() == 6320)
			{ // It's the audio table
				if (protocol.Exists(Parameter.Videoflowinputconfigtable.tablePid, protocol.RowKey()))
				{
					object[] videoFlowRow = (object[])protocol.GetRow(Parameter.Videoflowinputconfigtable.tablePid, protocol.RowKey());
					string request = String.Format(
					@"{{
					""input"":{0},
					""data"":{{
					""flows"":[
					   {{
						""flow"":{{
						   ""dst"":{{
							  ""addr"":""{1}"",
							  ""port"":""{2}"",
							  ""prefix"":{3}
						   }},
						   ""igmpMode"":""{4}"",
						   ""igmpVersion"":{5},
						   ""ipVersion"":{6},
						   ""rtpType"":{7},
						   ""src"":{{
							  ""addr"":""{8}"",
							  ""port"":""{9}"",
							  ""prefix"":{10}
						   }}
						}},
						""media"":{{
						   ""index"":{11},
						   ""redundancy"":{12},
						   ""type"":""Video""
						}}
					 }}

				  ],
				  ""inputType"":""{13}"",
				  ""name"":""{14}"",
				  ""s2022_7"":{15}
				}}
				}}",
					protocol.RowKey()[0],
					videoFlowRow[2],
					videoFlowRow[3],
					videoFlowRow[4],
					videoFlowRow[5],
					videoFlowRow[6],
					videoFlowRow[7],
					videoFlowRow[8],
					videoFlowRow[9],
					videoFlowRow[10],
					videoFlowRow[11],
					videoFlowRow[12],
					videoFlowRow[13],
					videoFlowRow[1],
					videoFlowRow[14],
					videoFlowRow[15]);

					protocol.SetParameter(1650 + writeParam, request);
					protocol.CheckTrigger(1650 + writeParam);
				}
				else
				{ // We send an empty request
					object[] audioFlowRow = (object[])protocol.GetRow(Parameter.Audioflowinputconfigtable.tablePid, protocol.RowKey());
					string request = String.Format(
					@"{{
					""input"":{0},
					""data"":{{
					""flows"":[ ],
				  ""inputType"":""{1}"",
				  ""name"":""{2}"",
				  ""s2022_7"":{3}
				}}
				}}",
					protocol.RowKey()[0],
					audioFlowRow[1],
					audioFlowRow[17],
					audioFlowRow[18]);

					protocol.SetParameter(1650 + writeParam, request);
					protocol.CheckTrigger(1650 + writeParam);
				}
			}
			else
			{ // The trigger is on the video flow table
				if (protocol.Exists(Parameter.Audioflowinputconfigtable.tablePid /*audioFlowInputConfigTable*/, protocol.RowKey()))
				{
					object[] audioFlowRow = (object[])protocol.GetRow(Parameter.Audioflowinputconfigtable.tablePid, protocol.RowKey());
					string request = String.Format(
						@"{{
					""input"":{0},
					""data"":{{
					""flows"":[
					   {{
						""flow"":{{
						   ""PID"":{1},
						   ""dst"":{{
							  ""addr"":""{2}"",
							  ""port"":""{3}"",
							  ""prefix"":{4}
						   }},
						   ""igmpMode"":""{5}"",
						   ""igmpVersion"":{6},
						   ""ipVersion"":{7},
						   ""rtpType"":{8},
						   ""src"":{{
							  ""addr"":""{9}"",
							  ""port"":""{10}"",
							  ""prefix"":{11}
						   }},
						   ""bitDepth"":{12},
						   ""numChannels"":{13}
						}},
						""media"":{{
						   ""index"":{14},
						   ""redundancy"":{15},
						   ""type"":""Audio""
						}}
					 }}
				  ],
				  ""inputType"":""{16}"",
				  ""name"":""{17}"",
				  ""s2022_7"":{18}
				}}
			   }}",
					protocol.RowKey()[0],
					audioFlowRow[2],
					audioFlowRow[3],
					audioFlowRow[4],
					audioFlowRow[5],
					audioFlowRow[6],
					audioFlowRow[7],
					audioFlowRow[8],
					audioFlowRow[9],
					audioFlowRow[10],
					audioFlowRow[11],
					audioFlowRow[12],
					audioFlowRow[13],
					audioFlowRow[14],
					audioFlowRow[15],
					audioFlowRow[16],
					audioFlowRow[1],
					audioFlowRow[17],
					audioFlowRow[18]);

					protocol.SetParameter(1650 + writeParam, request);
					protocol.CheckTrigger(1650 + writeParam);
				}
				else
				{ // We send an empty request
					object[] videoFlowRow = (object[])protocol.GetRow(Parameter.Videoflowinputconfigtable.tablePid, protocol.RowKey());
					string request = String.Format(
						@"{{
					""input"":{0},
					""data"":{{
					""flows"":[ ],
				  ""inputType"":""{1}"",
				  ""name"":""{2}"",
				  ""s2022_7"":{3}
				}}
			   }}",
					 protocol.RowKey()[0],
					 videoFlowRow[1],
					 videoFlowRow[14],
					 videoFlowRow[15]);

					protocol.SetParameter(1650 + writeParam, request);
					protocol.CheckTrigger(1650 + writeParam);
				}
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|Run|Failure: " + e, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="7000" name="processInputConfigureSetQueue" encoding="csharp" triggers="12650;12651;12652;12653;12654;12655" dllImport="System.Web.Extensions.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using Skyline.DataMiner.Protocols.prism.Json;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: processInputConfigureSetQueue.
/// </summary>
public class QAction
{
	/// <summary>
	/// This QActions is triggered upon receiving a response from a inputConfigure write request and checks for possible requests in the queue.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			int currentQueueId;
			int writeParameter;
			int triggerParameter = protocol.GetTriggerParameter();
			switch (triggerParameter)
			{
				case 12650: // Input0
					currentQueueId = 10150; /*inputConfigureSetQueue0*/
					writeParameter = 1650; /*rawWriteInputConfigureInput0*/
					break;

				case 12651: // Input1
					currentQueueId = 10151; /*inputConfigureSetQueue1*/
					writeParameter = 1651; /*rawWriteInputConfigureInput1*/
					break;

				case 12652: // Input2
					currentQueueId = 10152; /*inputConfigureSetQueue2*/
					writeParameter = 1652; /*rawWriteInputConfigureInput2*/
					break;

				case 12653: // Input3
					currentQueueId = 10153; /*inputConfigureSetQueue1*/
					writeParameter = 1653; /*rawWriteInputConfigureInput1*/
					break;

				case 12654: // Input4
					currentQueueId = 10154; /*inputConfigureSetQueue0*/
					writeParameter = 1654; /*rawWriteInputConfigureInput0*/
					break;

				case 12655: // Input5
					currentQueueId = 10155; /*inputConfigureSetQueue0*/
					writeParameter = 1655; /*rawWriteInputConfigureInput0*/
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Unexpected Trigger: " + triggerParameter, LogType.Error, LogLevel.NoLogging);
					return;
			}

			string currentQueue = Convert.ToString(protocol.GetParameter(currentQueueId));

			string[] currentQueueTokens = currentQueue.Split(';');
			if (currentQueueTokens.Length == 1)
			{ // There's only one value queued and it's the one we received the response for, so clear the queue and die
				protocol.SetParameter(currentQueueId, String.Empty);
				return;
			}

			string[] newQueueTokens = new string[currentQueueTokens.Length - 1];
			Array.Copy(currentQueueTokens, 1, newQueueTokens, 0, currentQueueTokens.Length - 1);
			protocol.SetParameter(currentQueueId, String.Join(";", newQueueTokens));
			AssembleQueuedRequest(protocol, newQueueTokens[0], writeParameter);
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|Run|Failure: " + e, LogType.Error, LogLevel.NoLogging);
		}
	}

	/**
	 * Takes a set request previously queued and builds a request body out of it. The format is the following:
	 * TABLE_KEY:WRITE_PARAM_THAT_TRIGGER_THE_SET:FIELD_VALUE
	 */

	private static void AssembleQueuedRequest(SLProtocol protocol, string changeDefinition, int writeParam)
	{
		string[] changeDefinitionTokens = changeDefinition.Split(':');
		if (changeDefinitionTokens.Length != 3)
		{
			return;
		}

		string tableKey = changeDefinitionTokens[0];
		int triggerParam = Convert.ToInt16(changeDefinitionTokens[1]);
		string newValue = changeDefinitionTokens[2];
		int inputId = writeParam - 1650;
		string signalType = triggerParam > Parameter.Videoflowinputconfigtable.tablePid ? "Video" : "Audio";

		string[] tableKeyParts = tableKey.Split('.');
		int redundancy;
		if (tableKeyParts.Length < 2 || !Int32.TryParse(tableKeyParts[1], out redundancy))
		{
			return;
		}

		// The third column of the inputs table contains the last known configuration of the given input. "writeParam - 1650" is the number of the input
		String formerResponse = (string)protocol.GetParameterIndexByKey(Parameter.Inputstable.tablePid, Convert.ToString(inputId), Parameter.Inputstable.Idx.inputstablelastconfigurationresponse_8003 + 1);
		Dictionary<string, object> deserializedFormerResponse = Shared.generalPurposeSerializer.Deserialize<Dictionary<string, object>>(formerResponse);

		// The next challenge is to find out what flow was modified. From the table we know the if it was Audio or Video and we also know the redundancy flag,
		// so now we will iterate through the existing flows and check if the settings match
		bool flowFound = false; // Flag used to know if a flow matching the specifications was found in the former response. This should always be true,
								// However, I'll leave this as a safeguard in case there's some sort or desync between the information in the table and that in the original response
		if (!deserializedFormerResponse.ContainsKey("flows"))
		{
			return;
		}

		// An IP-enabled input
		foreach (Dictionary<String, object> flow in (ArrayList)deserializedFormerResponse["flows"])
		{
			if (((Dictionary<string, object>)flow["media"])["redundancy"].Equals(redundancy) && ((Dictionary<string, object>)flow["media"])["type"].Equals(signalType))
			{
				switch (triggerParam)
				{
					case 6354:
					case 6454:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["addr"] = newValue;
						break;

					case 6355:
					case 6455:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["port"] = newValue;
						break;

					case 6356:
					case 6456:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["dst"])["prefix"] = newValue;
						break;

					case 6360:
					case 6460:
						((Dictionary<string, object>)flow["flow"])["rtpType"] = newValue;
						break;

					case 6361:
					case 6461:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["addr"] = newValue;
						break;

					case 6362:
					case 6462:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["port"] = newValue;
						break;

					case 6363:
					case 6463:
						((Dictionary<string, object>)((Dictionary<string, object>)flow["flow"])["src"])["prefix"] = newValue;
						break;

					default:
						protocol.Log("QA" + protocol.QActionID + "|AssembleQueuedRequest|Unexpected Write Parameter: " + writeParam, LogType.Error, LogLevel.NoLogging);
						break;
				}

				flowFound = true;
				break;
			}
		}

		if (flowFound)
		{
			// The request is slightly different from the response, the flows have to be encapsulated into an additional level
			Dictionary<string, object> setRequest = new Dictionary<string, object>();
			setRequest.Add("input", inputId);
			setRequest.Add("data", deserializedFormerResponse);

			protocol.SetParameter(writeParam, Shared.generalPurposeSerializer.Serialize(setRequest));
		}
		else
		{
			protocol.Log("QA" + protocol.QActionID + "|AssembleQueuedRequest|The flow with id: " + tableKey + " could not be found in the original JSON response", LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="8000" name="updateActiveInputNameList" encoding="csharp" triggers="12656" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: updateActiveInputNameList.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			SetActiveInputNameList(protocol);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}

	public static void SetActiveInputNameList(SLProtocol protocol)
	{
		try
		{
			int tableId = Parameter.Inputstable.tablePid;
			var columnIndexes = new uint[] { Parameter.Inputstable.Idx.inputstableindex_8001, Parameter.Inputstable.Idx.inputstablename_8002 };
			var columns = (object[])protocol.NotifyProtocol(321, tableId, columnIndexes);

			if (columns != null && columns.Length == 2)
			{
				var indexColumn = (object[])columns[0];
				var nameColumn = (object[])columns[1];

				var inputNamePairs = new Dictionary<string, string>();
				for (int i = 0; i < indexColumn.Length; i++)
				{
					inputNamePairs.Add(Convert.ToString(indexColumn[i]), Convert.ToString(nameColumn[i]));
				}
				var inputNamePairsList = inputNamePairs.ToList();
				inputNamePairsList.Sort((pair1, pair2) => pair1.Value.CompareTo(pair2.Value));

				var indexList = String.Join(";", inputNamePairsList.Select(i => i.Key).ToList());
				var nameList = String.Join(";", inputNamePairsList.Select(i => i.Value).ToList());
				var paramIds = new[] { Parameter.activeinputindexlist_5596, Parameter.activeinputnamelist_5597 };
				var paramValues = new object[] { indexList, nameList };
				protocol.SetParameters(paramIds, paramValues);
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|SetActiveInputNameList|Error: " + e, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="8001" name="setActiveInput" encoding="csharp" triggers="5695" dllImport="System.Web.Extensions.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using Skyline.DataMiner.Protocols.prism.Json;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: setActiveInput.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			SetActiveInput(protocol);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}

	public static void SetActiveInput(SLProtocol protocol)
	{
		try
		{
			const int SendActiveInputWriteRequest = 1695;
			var activeInputLists = (object[])protocol.GetParameters(new uint[] { Parameter.activeinputindexlist_5596, Parameter.activeinputnamelist_5597, Parameter.Write.activeinput_5695 });
			var activeInputIndexes = Convert.ToString(activeInputLists[0]).Split(';');
			var activeInputNames = Convert.ToString(activeInputLists[1]).Split(';');
			var activeInputName = Convert.ToString(activeInputLists[2]);

			var nameIndex = Array.IndexOf(activeInputNames, activeInputName);
			if (nameIndex != -1)
			{
				var activeInputIndex = Convert.ToInt32(activeInputIndexes[nameIndex]);
				var activeInput = new ActiveInput
				{
					input = activeInputIndex,
				};

				protocol.SetParameter(Parameter.rawwriteactiveinput_1695, Shared.generalPurposeSerializer.Serialize(activeInput));
				protocol.CheckTrigger(SendActiveInputWriteRequest);
			}
			else
			{
				protocol.Log("QA" + protocol.QActionID + "|SetActiveInput|Error active input to set not found: " + activeInputName, LogType.Error, LogLevel.NoLogging);
			}
		}
		catch (Exception e)
		{
			protocol.Log("QA" + protocol.QActionID + "|SetActiveInput|Error: " + e, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="8799" name="Flow Configuration Table Context Menu" encoding="csharp" triggers="8799" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using Logging;
using Skyline.DataMiner.Scripting;
using SupportMethods;
using SLNetMessages = Skyline.DataMiner.Net.Messages;

/// <summary>
/// DataMiner QAction Class: Flow Configuration Table Context Menu.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	/// <param name="contextData">The data related to the context menu.</param>
	public static void Run(SLProtocolExt protocol, object contextData)
	{
		try
		{
			string[] menuOptionData = contextData as string[];

			if (menuOptionData == null || menuOptionData.Length < 2)
			{
				return;
			}

			switch (menuOptionData[1])
			{
				case "add":
					AddNewRow(protocol, menuOptionData);
					break;

				case "delete":
					string[] keysToDelete = new string[menuOptionData.Length - 2];
					Array.Copy(menuOptionData, 2, keysToDelete, 0, menuOptionData.Length - 2);
					protocol.flowconfigurationtable.DeleteRow(keysToDelete);
					protocol.flowipconfigurationtable.DeleteRow(keysToDelete);
					break;

				case "clear":
					protocol.flowconfigurationtable.FillArray(new List<QActionTableRow>());
					protocol.flowipconfigurationtable.FillArray(new List<QActionTableRow>());
					break;

				case "duplicate":
					DuplicateRows(protocol, menuOptionData);
					break;

				default:
					protocol.LogInformation("Unknown context menu option for PID Configuration...");
					break;
			}
		}
		catch (Exception ex)
		{
			protocol.LogException(ex);
		}
	}

	/// <summary>
	/// Adds a new row to the PID monitoring configuration table.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	/// <param name="menuOptionData">The context menu data.</param>
	private static void AddNewRow(SLProtocolExt protocol, string[] menuOptionData)
	{
		var biggestKey = Array.ConvertAll(protocol.flowconfigurationtable.Keys, Convert.ToInt64).OrderBy(x => x).LastOrDefault();

		if (menuOptionData.Length > 19)
		{
			string currentKey = Convert.ToString(++biggestKey);
			protocol.flowconfigurationtable.AddRow(new FlowconfigurationtableQActionRow
			{
				Flowconfigurationtableinstance_8701 = currentKey,
				Flowconfigurationtablemedianame_8702 = menuOptionData[2],
				Flowconfigurationtableigmpmode_8703 = menuOptionData[3],
				Flowconfigurationtableigmpversion_8704 = menuOptionData[4],
				Flowconfigurationtableipversion_8705 = menuOptionData[5],
				Flowconfigurationtablevlanid_8706 = menuOptionData[6],
				Flowconfigurationtablepid_8707 = menuOptionData[7],
				Flowconfigurationtablestatus_8708 = menuOptionData[8],
				Flowconfigurationtableflowkey_8709 = menuOptionData[9],
				Flowconfigurationtablertptype_8710 = menuOptionData[10],
				Flowconfigurationtablemediaindex_8711 = menuOptionData[11],
				Flowconfigurationtablemediaredundancy_8712 = menuOptionData[12],
				Flowconfigurationtablemediatype_8713 = menuOptionData[13],
			});

			protocol.flowipconfigurationtable.AddRow(new FlowipconfigurationtableQActionRow
			{
				Flowipconfigurationtableinstance_8751 = currentKey,
				Flowipconfigurationtabledestinationip_8752 = menuOptionData[14],
				Flowipconfigurationtabledestinationport_8753 = menuOptionData[15],
				Flowipconfigurationtabledestinationprefix_8754 = menuOptionData[16],
				Flowipconfigurationtablesourceip_8755 = menuOptionData[17],
				Flowipconfigurationtablesourceport_8756 = menuOptionData[18],
				Flowipconfigurationtablesourceprefix_8757 = menuOptionData[19],
				Flowipconfigurationtablephysicalport_8758 = 0,
			});
		}
	}

	/// <summary>
	/// Takes a group of rows, and duplicates them in the PID monitoring configuration table.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	/// <param name="menuOptionData">The context menu data.</param>
	private static void DuplicateRows(SLProtocolExt protocol, string[] menuOptionData)
	{
		uint[] indexesToGet = new uint[]
		{
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableinstance_8701,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemedianame_8702,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableigmpmode_8703,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableigmpversion_8704,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableipversion_8705,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablevlanid_8706,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablepid_8707,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablestatus_8708,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtableflowkey_8709,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablertptype_8710,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediaindex_8711,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediaredundancy_8712,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablemediatype_8713,
			Parameter.Flowconfigurationtable.Idx.flowconfigurationtablebitdepth_8714,
		};

		object[] pidColumnsToDuplicate = (object[])protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Flowconfigurationtable.tablePid, indexesToGet);

		object[] keys = (object[])pidColumnsToDuplicate[0];
		object[] mediaNames = (object[])pidColumnsToDuplicate[1];
		object[] igmpModes = (object[])pidColumnsToDuplicate[2];
		object[] igmpVersions = (object[])pidColumnsToDuplicate[3];
		object[] ipVersions = (object[])pidColumnsToDuplicate[4];
		object[] vlandIds = (object[])pidColumnsToDuplicate[5];
		object[] pids = (object[])pidColumnsToDuplicate[6];
		object[] status = (object[])pidColumnsToDuplicate[7];
		object[] flowKeys = (object[])pidColumnsToDuplicate[8];
		object[] rtpTypes = (object[])pidColumnsToDuplicate[9];
		object[] mediaIndexes = (object[])pidColumnsToDuplicate[10];
		object[] mediaRedundancies = (object[])pidColumnsToDuplicate[11];
		object[] mediaTypes = (object[])pidColumnsToDuplicate[12];
		object[] bitDepths = (object[])pidColumnsToDuplicate[13];

		indexesToGet = new uint[]
			{
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationip_8752,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationport_8753,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabledestinationprefix_8754,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceip_8755,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceport_8756,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesourceprefix_8757,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtableinstance_8751,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablephysicalport_8758,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablephysicalportid_8759,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtablesubtype_8760,
				Parameter.Flowipconfigurationtable.Idx.flowipconfigurationtabletype_8761,
			};

		object[] ipColumnsToDuplicate = (object[])protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Flowipconfigurationtable.tablePid, indexesToGet);

		object[] destinationIps = (object[])ipColumnsToDuplicate[0];
		object[] destinationPorts = (object[])ipColumnsToDuplicate[1];
		object[] destinationPrefixes = (object[])ipColumnsToDuplicate[2];
		object[] sourceIps = (object[])ipColumnsToDuplicate[3];
		object[] sourcePorts = (object[])ipColumnsToDuplicate[4];
		object[] sourcePrefixes = (object[])ipColumnsToDuplicate[5];
		object[] ipKey = (object[])ipColumnsToDuplicate[6];
		object[] physicalPorts = (object[])ipColumnsToDuplicate[7];
		object[] physicalPortIds = (object[])ipColumnsToDuplicate[8];
		object[] subtypes = (object[])ipColumnsToDuplicate[9];
		object[] portTypes = (object[])ipColumnsToDuplicate[10];

		List<QActionTableRow> pidTable = new List<QActionTableRow>();
		List<QActionTableRow> ipTable = new List<QActionTableRow>();
		Dictionary<string, int> pidPosition = new Dictionary<string, int>();
		Dictionary<string, int> ipPosition = new Dictionary<string, int>();

		for (int position = 0; position < keys.Length; position++)
		{
			// Fill in the Dictionary that relates PIDs and their position in the list of rows.
			pidPosition.Add(Convert.ToString(keys[position]), position);
			ipPosition.Add(Convert.ToString(ipKey[position]), position);
			pidTable.Add(new FlowconfigurationtableQActionRow
			{
				Flowconfigurationtableinstance_8701 = keys[position],
				Flowconfigurationtablemedianame_8702 = mediaNames[position],
				Flowconfigurationtableigmpmode_8703 = igmpModes[position],
				Flowconfigurationtableigmpversion_8704 = igmpVersions[position],
				Flowconfigurationtableipversion_8705 = ipVersions[position],
				Flowconfigurationtablevlanid_8706 = vlandIds[position],
				Flowconfigurationtablepid_8707 = pids[position],
				Flowconfigurationtablestatus_8708 = status[position],
				Flowconfigurationtableflowkey_8709 = flowKeys[position],
				Flowconfigurationtablertptype_8710 = rtpTypes[position],
				Flowconfigurationtablemediaindex_8711 = mediaIndexes[position],
				Flowconfigurationtablemediaredundancy_8712 = mediaRedundancies[position],
				Flowconfigurationtablemediatype_8713 = mediaTypes[position],
				Flowconfigurationtablebitdepth_8714 = bitDepths[position],
			});

			ipTable.Add(new FlowipconfigurationtableQActionRow
			{
				Flowipconfigurationtableinstance_8751 = ipKey[position],
				Flowipconfigurationtabledestinationip_8752 = destinationIps[position],
				Flowipconfigurationtabledestinationport_8753 = destinationPorts[position],
				Flowipconfigurationtabledestinationprefix_8754 = destinationPrefixes[position],
				Flowipconfigurationtablesourceip_8755 = sourceIps[position],
				Flowipconfigurationtablesourceport_8756 = sourcePorts[position],
				Flowipconfigurationtablesourceprefix_8757 = sourcePrefixes[position],
				Flowipconfigurationtablephysicalport_8758 = physicalPorts[position],
				Flowipconfigurationtablephysicalportid_8759 = physicalPortIds[position],
				Flowipconfigurationtablesubtype_8760 = subtypes[position],
				Flowipconfigurationtabletype_8761 = portTypes[position],
			});
		}

		var biggestKey = Array.ConvertAll(protocol.flowconfigurationtable.Keys, Convert.ToInt64).OrderBy(x => x).LastOrDefault();
		string pidToDupe;

		for (int duplicatedPidPos = 2; duplicatedPidPos < menuOptionData.Length; duplicatedPidPos++)
		{
			pidToDupe = menuOptionData[duplicatedPidPos];
			if (pidPosition.ContainsKey(pidToDupe))
			{
				string key = Convert.ToString(++biggestKey);
				pidTable.Add(new FlowconfigurationtableQActionRow(pidTable[pidPosition[pidToDupe]]).SetKey(key));
				ipTable.Add(new FlowipconfigurationtableQActionRow(ipTable[ipPosition[pidToDupe]]).SetKey(key));
			}
		}

		protocol.flowconfigurationtable.FillArray(pidTable);
		protocol.flowipconfigurationtable.FillArray(ipTable);
	}
}]]>
		</QAction>
		<QAction id="9000" name="CreateNewFlowRequest" encoding="csharp" triggers="8607" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll">
			<![CDATA[using System;
using Skyline.DataMiner.Protocols.prism.Flows;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: CreateNewFlowRequest.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			InputType flowType = (InputType) Convert.ToInt32(protocol.GetParameter(Parameter.createflowinputtype_8602));
			string request = string.Empty;

			switch (flowType)
			{
				case InputType.SDI:
					request = FlowRequestFactory.CreateSdiRequest(protocol);
					break;

				case InputType.S2022_6:
					request = FlowRequestFactory.CreateS20226Request(protocol);
					break;

				case InputType.S2022_7:
					request = FlowRequestFactory.CreateS20227Request(protocol);
					break;

				case InputType.ASPEN:
					request = FlowRequestFactory.CreateAspenRequest(protocol);
					break;

				case InputType.S2110:
					request = FlowRequestFactory.CreateS2110Request(protocol);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run| Unrecognized input type: " + flowType, LogType.Error, LogLevel.NoLogging);
					return;
			}

			////protocol.Log("QA" + protocol.QActionID + "|Run| " + Environment.NewLine + request, LogType.DebugInfo, LogLevel.NoLogging);
			protocol.SetParameter(Parameter.createflowhttprequest_2696, request);
			protocol.CheckTrigger(8000);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="8854" name="Load Preset" encoding="csharp" triggers="8854" row="true" dllImport="Newtonsoft.Json.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using Presets;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: Load Preset.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol)
	{
		try
		{
			string jsonRequest = BuildJsonRequest(protocol);
			LoadPreset(protocol, jsonRequest);
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static string BuildJsonRequest(SLProtocol protocol)
	{
		string rowKey = protocol.RowKey();
		object[] row = (object[])protocol.GetRow(Parameter.Presetstable.tablePid, rowKey);

		string presetNumber = Convert.ToString(row[0]).Substring(1, 1);
		string groupInstance = Convert.ToString(row[2]);
		string groupName = Convert.ToString(protocol.GetParameterIndexByKey(Parameter.Presetgroupstable.tablePid, groupInstance, 3));
		string group = groupInstance + groupName;

		string presetName = string.Empty;

		if (Convert.ToString(row[1]) != "-1")
		{
			presetName = Convert.ToString(row[1]);
		}

		string jsonRequest = Preset.BuildRequest(presetNumber, group, presetName);
		return jsonRequest;
	}

	private static void LoadPreset(SLProtocol protocol, string jsonRequest)
	{
		protocol.SetParameter(Parameter.loadpresetdata_2609, jsonRequest);
		protocol.CheckTrigger(8854);
	}
}]]>
		</QAction>
		<QAction id="55" name="Presets" encoding="csharp" triggers="54;55;59;61;2606;2607;2608" dllImport="Newtonsoft.Json.dll;[ProtocolName].[ProtocolVersion].QAction.1.dll;[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Presets;
using Skyline.DataMiner.Scripting;
using SLNetMessages = Skyline.DataMiner.Net.Messages;

/// <summary>
/// DataMiner QAction Class.
/// </summary>
public static class QAction
{
	public static void ProcessPresetGroups(SLProtocolExt protocol, string response)
	{
		PresetGroup presetGroups = JsonConvert.DeserializeObject<PresetGroup>(response);

		string[] presetGroupsArray = presetGroups.Groups.Split(',');

		var groupRows = new List<PresetgroupstableQActionRow>();

		for (int i = 0; i < presetGroupsArray.Length; i++)
		{
			string group = presetGroupsArray[i].Trim('\\', '\"');
			int startIndex = group.LastIndexOf('/') + 1;
			string letterName = group.Substring(startIndex);

			string[] presetGroup = letterName.Split('_');
			string instance = presetGroup[0] + "_";

			var row = new PresetgroupstableQActionRow
			{
				Presetgroupsinstance_8801 = instance,
				Presetgroupsgroupletter_8802 = presetGroup[0],
				Presetgroupsgroupname_8803 = presetGroup[1],
			};

			groupRows.Add(row);
		}

		protocol.presetgroupstable.FillArray(groupRows.ToArray());
	}

	public static void ProcessPresets(SLProtocolExt protocol, string response)
	{
		Dictionary<object, object> names = new Dictionary<object, object>();
		List<object> initializedPresets = new List<object>();

		Preset presets = JsonConvert.DeserializeObject<Preset>(response);
		string[] presetsArray = presets.Presets.Split(',');

		for (int i = 0; i < presetsArray.Length; i++)
		{
			string instance;
			string presetName;
			GetPresetInstanceAndName(presetsArray[i], out instance, out presetName);

			names.Add(instance, presetName);
			initializedPresets.Add(1);
		}

		object[] columnsToSet = new object[]
		{
			Parameter.Presetstable.tablePid,
			Parameter.Presetstable.Pid.presetsname_8852,
			Parameter.Presetstable.Pid.presetsinitialized_8855,
		};

		object[] values = new object[]
		{
			names.Keys.ToArray(),
			names.Values.ToArray(),
			initializedPresets.ToArray(),
		};

		protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_FILL_ARRAY_WITH_COLUMN, columnsToSet, values);
	}

	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			int triggerParameter = protocol.GetTriggerParameter();
			string response = Convert.ToString(protocol.GetParameter(triggerParameter));
			switch (triggerParameter)
			{
				case Parameter.Write.variablepresets_54:
					SetPresetName(protocol);
					break;

				case Parameter.Write.savepreset_55:
					SavePreset(protocol);
					break;

				case Parameter.savepresetresponse_59:
					CheckIfPresetIsSaved(protocol, response);
					break;

				case Parameter.Write.factorypreset_61:
					FactoryPreset(protocol);
					break;

				case Parameter.getpresetgroupsresponse_2606:
					ProcessPresetGroups(protocol, response);
					break;

				case Parameter.getpresetsresponse_2607:
					ProcessPresets(protocol, response);
					break;

				case Parameter.loadpresetresponse_2608:
					LoadPresetResponse(protocol, response);
					break;

				default:
					protocol.Log("QA" + protocol.QActionID + "|Run|Unexpected trigger: " + triggerParameter, LogType.Error, LogLevel.NoLogging);
					break;
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}

	private static void CheckIfPresetIsSaved(SLProtocolExt protocol, string response)
	{
		bool status = true;

		if (response.Contains("ERROR"))
		{
			status = false;
		}

		protocol.SetParameter(Parameter.savedpresetstatus_60, Convert.ToInt32(status));
	}

	private static void FactoryPreset(SLProtocolExt protocol)
	{
		string body = "factory";

		Preset request = new Preset
		{
			Presets = body,
		};

		string jsonRequest = JsonConvert.SerializeObject(request);

		protocol.SetParameter(Parameter.loadpresetdata_2609, jsonRequest);
		protocol.CheckTrigger(8854);
	}

	private static void GetPresetInstanceAndName(string presetString, out string instance, out string presetName)
	{
		string[] presetValues = presetString.Split('/');
		string presetLetter = presetValues[2].Split('_')[0];
		string presetNumberAndName = presetValues[3];
		instance = presetLetter + presetNumberAndName;

		presetName = "-1";

		if (presetNumberAndName.Contains(":"))
		{
			presetName = presetNumberAndName.Split(':')[1];
			string presetNumber = presetNumberAndName.Split(':')[0];
			instance = presetLetter + presetNumber;
		}
	}

	private static void LoadPresetResponse(SLProtocolExt protocol, string response)
	{
		string presetRequest = Convert.ToString(protocol.GetParameter(Parameter.loadpresetdata_2609));

		Preset presets = JsonConvert.DeserializeObject<Preset>(presetRequest);

		int status;
		string instance;
		string presetName;

		if (presets.Presets == "factory")
		{
			instance = "Factory";
			presetName = string.Empty;
		}
		else
		{
			GetPresetInstanceAndName(presets.Presets, out instance, out presetName);
		}

		if (response == "ERROR: S_preset_NO_DATAExecution failed.")
		{
			status = 0;
		}
		else if (response == "ERROR: S_preset_NOT_FOUNDExecution failed.")
		{
			status = 1;
		}
		else
		{
			status = 2;
		}

		string loadedPreset = "Preset " + instance + "; " + presetName + " (" + DateTime.Now.ToString() + ")";

		int[] ids = new[]
		{
			Parameter.loadedpresetsstatus_62,
			Parameter.loadedpreset_63,
		};

		object[] values = new object[]
		{
			status,
			loadedPreset,
		};

		protocol.SetParameters(ids, values);
	}

	private static void SavePreset(SLProtocolExt protocol)
	{
		uint[] parametersToGet = new uint[] { Parameter.variablepresets_53, Parameter.newpresetname_56 };
		object[] parameters = (object[])protocol.GetParameters(parametersToGet);

		string presetName = Convert.ToString(parameters[1]);

		ProcessedPreset processedPreset = new ProcessedPreset(Convert.ToString(parameters[0]));

		processedPreset.GetPresetNumberAndLetter();

		string group = Convert.ToString(protocol.GetParameterIndexByKey(Parameter.Presetgroupstable.tablePid, processedPreset.PresetLetter + "_", 3));
		string newPresetName = string.Empty;

		if (!string.IsNullOrEmpty(presetName))
		{
			newPresetName = presetName;
		}

		string presetGroup = processedPreset.PresetLetter + "_" + group;

		string jsonRequest = Preset.BuildRequest(processedPreset.PresetNumber, presetGroup, newPresetName);

		protocol.SetParameter(Parameter.savepresetdata_58, jsonRequest);
		protocol.CheckTrigger(55);
	}

	private static void SetPresetName(SLProtocolExt protocol)
	{
		string selectedPreset = Convert.ToString(protocol.GetParameter(Parameter.Write.variablepresets_54));

		ProcessedPreset processedPreset = new ProcessedPreset(selectedPreset);

		processedPreset.GetPresetNumberAndLetter();

		string presetName = Convert.ToString(protocol.GetParameterIndexByKey(Parameter.Presetstable.tablePid, processedPreset.PresetLetter + processedPreset.PresetNumber, 2));

		if (presetName == "-1")
		{
			presetName = string.Empty;
		}

		int[] ids = new[]
		{
			Parameter.newpresetname_56,
			Parameter.variablepresets_53,
		};

		object[] values = new object[]
		{
			presetName,
			selectedPreset,
		};

		protocol.SetParameters(ids, values);
	}
}]]>
		</QAction>
	</QActions>
	<HTTP>
		<Session id="55" name="savePresets">
			<Connection id="1" name="name">
				<Request verb="POST" url="api/savepreset">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="58" />
				</Request>
				<Response statusCode="10005">
					<Content pid="59" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioMixerVolume" id="1000">
			<Connection id="1">
				<Request verb="GET" pid="1000" />
				<Response statusCode="10005">
					<Content pid="2000" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioMixerMute" id="1015">
			<Connection id="1">
				<Request verb="GET" pid="1015" />
				<Response statusCode="10005">
					<Content pid="2015" />
				</Response>
			</Connection>
		</Session>
		<Session name="IPv4ConfigIP1" id="1020">
			<Connection id="1">
				<Request verb="GET" pid="1020" />
				<Response statusCode="10005">
					<Content pid="2020" />
				</Response>
			</Connection>
		</Session>
		<Session name="IPv4ConfigIP2" id="1025">
			<Connection id="1">
				<Request verb="GET" pid="1025" />
				<Response statusCode="10005">
					<Content pid="2025" />
				</Response>
			</Connection>
		</Session>
		<Session name="inputHardwareIdInfo" id="1030">
			<Connection id="1">
				<Request verb="GET" pid="1030" />
				<Response statusCode="10005">
					<Content pid="2030" />
				</Response>
			</Connection>
		</Session>
		<Session name="diagnosticURLPreset" id="1035">
			<Connection id="1">
				<Request verb="GET" pid="1035" />
				<Response statusCode="10005">
					<Content pid="2035" />
				</Response>
			</Connection>
		</Session>
		<Session name="mpiLedBrightness" id="1050">
			<Connection id="1">
				<Request verb="GET" pid="1050" />
				<Response statusCode="10005">
					<Content pid="2050" />
				</Response>
			</Connection>
		</Session>
		<Session name="inputVoltageHardware" id="1060">
			<Connection id="1">
				<Request verb="GET" pid="1060" />
				<Response statusCode="10005">
					<Content pid="2060" />
				</Response>
			</Connection>
		</Session>
		<Session name="eyeVoltageHardware" id="1065">
			<Connection id="1">
				<Request verb="GET" pid="1065" />
				<Response statusCode="10005">
					<Content pid="2065" />
				</Response>
			</Connection>
		</Session>
		<Session name="eyeHardwareTemperature" id="1075">
			<Connection id="1">
				<Request verb="GET" pid="1075" />
				<Response statusCode="10005">
					<Content pid="2075" />
				</Response>
			</Connection>
		</Session>
		<Session name="fanSpeed" id="1085">
			<Connection id="1">
				<Request verb="GET" pid="1085" />
				<Response statusCode="10005">
					<Content pid="2085" />
				</Response>
			</Connection>
		</Session>
		<Session name="inputHardwareFPGA" id="1090">
			<Connection id="1">
				<Request verb="GET" pid="1090" />
				<Response statusCode="10005">
					<Content pid="2090" />
				</Response>
			</Connection>
		</Session>
		<Session name="fanDiagnostics" id="1095">
			<Connection id="1">
				<Request verb="GET" pid="1095" />
				<Response statusCode="10005">
					<Content pid="2095" />
				</Response>
			</Connection>
		</Session>
		<Session name="fanPanelTestMode" id="1100">
			<Connection id="1">
				<Request verb="GET" pid="1100" />
				<Response statusCode="10005">
					<Content pid="2100" />
				</Response>
			</Connection>
		</Session>
		<Session name="softwareVersion" id="1130">
			<Connection id="1">
				<Request verb="GET" pid="1130" />
				<Response statusCode="10005">
					<Content pid="2130" />
				</Response>
			</Connection>
		</Session>
		<Session name="softwareBuildId" id="1135">
			<Connection id="1">
				<Request verb="GET" pid="1135" />
				<Response statusCode="10005">
					<Content pid="2135" />
				</Response>
			</Connection>
		</Session>
		<Session name="softwareBuildDate" id="1140">
			<Connection id="1">
				<Request verb="GET" pid="1140" />
				<Response statusCode="10005">
					<Content pid="2140" />
				</Response>
			</Connection>
		</Session>
		<Session name="macAddressIP1" id="1155">
			<Connection id="1">
				<Request verb="GET" pid="1155" />
				<Response statusCode="10005">
					<Content pid="2155" />
				</Response>
			</Connection>
		</Session>
		<Session name="macAddressIP2" id="1160">
			<Connection id="1">
				<Request verb="GET" pid="1160" />
				<Response statusCode="10005">
					<Content pid="2160" />
				</Response>
			</Connection>
		</Session>
		<Session name="videoIPAddressIP1" id="1165">
			<Connection id="1">
				<Request verb="GET" pid="1165" />
				<Response statusCode="10005">
					<Content pid="2165" />
				</Response>
			</Connection>
		</Session>
		<Session name="videoIPAddressIP2" id="1170">
			<Connection id="1">
				<Request verb="GET" pid="1170" />
				<Response statusCode="10005">
					<Content pid="2170" />
				</Response>
			</Connection>
		</Session>
		<Session name="nomenclature" id="1175">
			<Connection id="1">
				<Request verb="GET" pid="1175" />
				<Response statusCode="10005">
					<Content pid="2175" />
				</Response>
			</Connection>
		</Session>
		<Session name="serialNumber" id="1180">
			<Connection id="1">
				<Request verb="GET" pid="1180" />
				<Response statusCode="10005">
					<Content pid="2180" />
				</Response>
			</Connection>
		</Session>
		<Session name="iputStatus" id="1190">
			<Connection id="1">
				<Request verb="GET" pid="1190" />
				<Response statusCode="10005">
					<Content pid="2190" />
				</Response>
			</Connection>
		</Session>
		<Session name="sessionControl" id="1200">
			<Connection id="1">
				<Request verb="GET" pid="1200" />
				<Response statusCode="10005">
					<Content pid="2200" />
				</Response>
			</Connection>
		</Session>
		<Session name="colorimetrySettings" id="1205">
			<Connection id="1">
				<Request verb="GET" pid="1205" />
				<Response statusCode="10005">
					<Content pid="2205" />
				</Response>
			</Connection>
		</Session>
		<Session name="eotfSettings" id="1210">
			<Connection id="1">
				<Request verb="GET" pid="1210" />
				<Response statusCode="10005">
					<Content pid="2210" />
				</Response>
			</Connection>
		</Session>
		<Session name="currentBitRateIP1" id="1215">
			<Connection id="1">
				<Request verb="GET" pid="1215" />
				<Response statusCode="10005">
					<Content pid="2215" />
				</Response>
			</Connection>
		</Session>
		<Session name="currentBitRateIP2" id="1220">
			<Connection id="1">
				<Request verb="GET" pid="1220" />
				<Response statusCode="10005">
					<Content pid="2220" />
				</Response>
			</Connection>
		</Session>
		<Session name="currentEthernetStatsIP1" id="1225">
			<Connection id="1">
				<Request verb="GET" pid="1225" />
				<Response statusCode="10005">
					<Content pid="2225" />
				</Response>
			</Connection>
		</Session>
		<Session name="currentEthernetStatsIP2" id="1230">
			<Connection id="1">
				<Request verb="GET" pid="1230" />
				<Response statusCode="10005">
					<Content pid="2230" />
				</Response>
			</Connection>
		</Session>
		<Session name="ipPitSummaryIP1" id="1235">
			<Connection id="1">
				<Request verb="GET" pid="1235" />
				<Response statusCode="10005">
					<Content pid="2235" />
				</Response>
			</Connection>
		</Session>
		<Session name="ipPitSummaryIP2" id="1240">
			<Connection id="1">
				<Request verb="GET" pid="1240" />
				<Response statusCode="10005">
					<Content pid="2240" />
				</Response>
			</Connection>
		</Session>
		<Session name="hostId" id="1275">
			<Connection id="1">
				<Request verb="GET" pid="1275" />
				<Response statusCode="10005">
					<Content pid="2275" />
				</Response>
			</Connection>
		</Session>
		<Session name="cableType" id="1315">
			<Connection id="1">
				<Request verb="GET" pid="1315" />
				<Response statusCode="10005">
					<Content pid="2315" />
				</Response>
			</Connection>
		</Session>
		<Session name="jitterHPF" id="1330">
			<Connection id="1">
				<Request verb="GET" pid="1330" />
				<Response statusCode="10005">
					<Content pid="2330" />
				</Response>
			</Connection>
		</Session>
		<Session name="currentTimeZone" id="1395">
			<Connection id="1">
				<Request verb="GET" pid="1395" />
				<Response statusCode="10005">
					<Content pid="2395" />
				</Response>
			</Connection>
		</Session>
		<Session name="currenTime" id="1400">
			<Connection id="1">
				<Request verb="GET" pid="1400" />
				<Response statusCode="10005">
					<Content pid="2400" />
				</Response>
			</Connection>
		</Session>
		<Session name="systemUpTime" id="1450">
			<Connection id="1">
				<Request verb="GET" pid="1450" />
				<Response statusCode="10005">
					<Content pid="2450" />
				</Response>
			</Connection>
		</Session>
		<Session name="gpioRead" id="1455">
			<Connection id="1">
				<Request verb="GET" pid="1455" />
				<Response statusCode="10005">
					<Content pid="2455" />
				</Response>
			</Connection>
		</Session>
		<Session name="gpioAssert" id="1460">
			<Connection id="1">
				<Request verb="POST" pid="1460">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
				</Request>
				<Response statusCode="10005">
					<Content pid="2460" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioTestPlay" id="1470">
			<Connection id="1">
				<Request verb="GET" pid="1470" />
				<Response statusCode="10005">
					<Content pid="2470" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioTestFrequency" id="1475">
			<Connection id="1">
				<Request verb="GET" pid="1475" />
				<Response statusCode="10005">
					<Content pid="2475" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioTestChan" id="1480">
			<Connection id="1">
				<Request verb="GET" pid="1480" />
				<Response statusCode="10005">
					<Content pid="2480" />
				</Response>
			</Connection>
		</Session>
		<Session name="audioTestVolume" id="1485">
			<Connection id="1">
				<Request verb="GET" pid="1485" />
				<Response statusCode="10005">
					<Content pid="2485" />
				</Response>
			</Connection>
		</Session>
		<Session name="biosNomenclature" id="1495">
			<Connection id="1">
				<Request verb="GET" pid="1495" />
				<Response statusCode="10005">
					<Content pid="2495" />
				</Response>
			</Connection>
		</Session>
		<Session name="biosVersion" id="1500">
			<Connection id="1">
				<Request verb="GET" pid="1500" />
				<Response statusCode="10005">
					<Content pid="2500" />
				</Response>
			</Connection>
		</Session>
		<Session name="biosType" id="1505">
			<Connection id="1">
				<Request verb="GET" pid="1505" />
				<Response statusCode="10005">
					<Content pid="2505" />
				</Response>
			</Connection>
		</Session>
		<Session name="sataMode" id="1510">
			<Connection id="1">
				<Request verb="GET" pid="1510" />
				<Response statusCode="10005">
					<Content pid="2510" />
				</Response>
			</Connection>
		</Session>
		<Session name="bootDiskDriver" id="1515">
			<Connection id="1">
				<Request verb="GET" pid="1515" />
				<Response statusCode="10005">
					<Content pid="2515" />
				</Response>
			</Connection>
		</Session>
		<Session name="hostName" id="1520">
			<Connection id="1">
				<Request verb="GET" pid="1520" />
				<Response statusCode="10005">
					<Content pid="2520" />
				</Response>
			</Connection>
		</Session>
		<Session name="riserVersion" id="1525">
			<Connection id="1">
				<Request verb="GET" pid="1525" />
				<Response statusCode="10005">
					<Content pid="2525" />
				</Response>
			</Connection>
		</Session>
		<Session name="activeInputRead" id="1595">
			<Connection id="1">
				<Request verb="GET" pid="1595" />
				<Response statusCode="10005">
					<Content pid="2595" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure0" id="1600">
			<Connection id="1">
				<Request verb="GET" pid="1600" />
				<Response statusCode="10005">
					<Content pid="2600" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure0" id="1650">
			<Connection id="1">
				<Request verb="POST" pid="1600">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1650" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2650" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure1" id="1601">
			<Connection id="1">
				<Request verb="GET" pid="1601" />
				<Response statusCode="10005">
					<Content pid="2601" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure1" id="1651">
			<Connection id="1">
				<Request verb="POST" pid="1606">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1651" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2651" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure2" id="1602">
			<Connection id="1">
				<Request verb="GET" pid="1602" />
				<Response statusCode="10005">
					<Content pid="2602" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure2" id="1652">
			<Connection id="1">
				<Request verb="POST" pid="1602">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1652" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2652" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure3" id="1603">
			<Connection id="1">
				<Request verb="GET" pid="1603" />
				<Response statusCode="10005">
					<Content pid="2603" />
				</Response>
			</Connection>
		</Session>
		<Session name="readFlowTableCondensed" id="1610">
			<Connection id="1">
				<Request verb="GET" pid="1610" />
				<Response statusCode="10005">
					<Content pid="2610" />
				</Response>
			</Connection>
		</Session>
		<Session name="readPtpProfile" id="1614">
			<Connection id="1">
				<Request verb="GET" pid="1614" />
				<Response statusCode="10005">
					<Content pid="2614" />
				</Response>
			</Connection>
		</Session>
		<Session name="readPtpStatus" id="1615">
			<Connection id="1">
				<Request verb="GET" pid="1615" />
				<Response statusCode="10005">
					<Content pid="2615" />
				</Response>
			</Connection>
		</Session>
		<Session name="readPtpMessageRate" id="1616">
			<Connection id="1">
				<Request verb="GET" pid="1616" />
				<Response statusCode="10005">
					<Content pid="2616" />
				</Response>
			</Connection>
		</Session>
		<Session name="readPtpProfileDomain" id="1617">
			<Connection id="1">
				<Request verb="GET" pid="1617" />
				<Response statusCode="10005">
					<Content pid="2617" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure3" id="1653">
			<Connection id="1">
				<Request verb="POST" pid="1603">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1653" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2653" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure4" id="1604">
			<Connection id="1">
				<Request verb="GET" pid="1604" />
				<Response statusCode="10005">
					<Content pid="2604" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure4" id="1654">
			<Connection id="1">
				<Request verb="POST" pid="1604">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1654" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2654" />
				</Response>
			</Connection>
		</Session>
		<Session name="readInputConfigure5" id="1605">
			<Connection id="1">
				<Request verb="GET" pid="1605" />
				<Response statusCode="10005">
					<Content pid="2605" />
				</Response>
			</Connection>
		</Session>
		<Session name="writeInputConfigure5" id="1655">
			<Connection id="1">
				<Request verb="POST" pid="1605">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1655" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2655" />
				</Response>
			</Connection>
		</Session>
		<Session name="activeInputWrite" id="1695">
			<Connection id="1">
				<Request verb="POST" pid="1595">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="1695" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2695" />
				</Response>
			</Connection>
		</Session>
		<Session id="8000" name="CreateNewFlow">
			<Connection id="1" name="CreateNewFlow">
				<Request verb="POST" url="api/inputConfigure">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="2696" />
				</Request>
				<Response statusCode="2697">
					<Content pid="2698" />
				</Response>
			</Connection>
		</Session>
		<Session id="8800" name="getPresetGroups">
			<Connection id="1" name="name">
				<Request verb="GET" url="api/getpresetgroups">
				</Request>
				<Response statusCode="10005">
					<Content pid="2606" />
				</Response>
			</Connection>
		</Session>
		<Session id="8850" name="getPresets">
			<Connection id="1" name="name">
				<Request verb="GET" url="api/getpresets" />
				<Response statusCode="10005">
					<Content pid="2607" />
				</Response>
			</Connection>
		</Session>
		<Session id="8854" name="loadPreset">
			<Connection id="1" name="name">
				<Request verb="POST" url="api/loadpreset">
					<Headers>
						<Header key="Content-Type">application/json</Header>
					</Headers>
					<Data pid="2609" />
				</Request>
				<Response statusCode="10005">
					<Content pid="2608" />
				</Response>
			</Connection>
		</Session>
	</HTTP>
	<Groups>
		<Group id="2">
			<Name>After Startup</Name>
			<Description>After Startup</Description>
			<Type>poll action</Type>
			<Content>
				<Action>2</Action>
			</Content>
		</Group>
		<Group id="55">
			<Name>savePreset</Name>
			<Description>savePreset</Description>
			<Type>poll</Type>
			<Content>
				<Session>55</Session>
			</Content>
		</Group>
		<Group id="1000">
			<Name>midPolled Parameters 1</Name>
			<Description>Mid-polled Parameters 1</Description>
			<Type>poll</Type>
			<Content>
				<Session>1000</Session>
				<Session>1015</Session>
				<Session>1050</Session>
			</Content>
		</Group>
		<Group id="1100">
			<Name>midPolled Parameters 2</Name>
			<Description>Mid-polled Parameters 2</Description>
			<Type>poll</Type>
			<Content>
				<Session>1100</Session>
			</Content>
		</Group>
		<Group id="1200">
			<Name>midPolled Parameters 3</Name>
			<Description>Mid-polled Parameters 3</Description>
			<Type>poll</Type>
			<Content>
				<Session>1200</Session>
				<Session>1205</Session>
				<Session>1210</Session>
				<Session>1215</Session>
				<Session>1220</Session>
				<Session>1225</Session>
				<Session>1230</Session>
				<Session>1235</Session>
				<Session>1240</Session>
			</Content>
		</Group>
		<Group id="1300">
			<Name>midPolled Parameters 4</Name>
			<Description>Mid-polled Parameters 4</Description>
			<Type>poll</Type>
			<Content>
				<Session>1315</Session>
				<Session>1455</Session>
				<Session>1470</Session>
				<Session>1475</Session>
				<Session>1480</Session>
				<Session>1485</Session>
			</Content>
		</Group>
		<Group id="1500">
			<Name>midPolled Parameters 5</Name>
			<Description>Mid-polled Parameters 5</Description>
			<Type>poll</Type>
			<Content>
				<Session>1500</Session>
				<Session>1505</Session>
				<Session>1510</Session>
				<Session>1515</Session>
				<Session>1520</Session>
				<Session>1525</Session>
			</Content>
		</Group>
		<Group id="1060">
			<Name>fastPolled Parameters 1</Name>
			<Description>Fast-polled Parameters 1</Description>
			<Type>poll</Type>
			<Content>
				<Session>1060</Session>
				<Session>1065</Session>
				<Session>1075</Session>
				<Session>1085</Session>
				<Session>1090</Session>
				<Session>1095</Session>
				<Session>1190</Session>
			</Content>
		</Group>
		<Group id="1250">
			<Name>fastPolled Parameters 2</Name>
			<Description>Fast-polled Parameters 2</Description>
			<Type>poll</Type>
			<Content>
				<Session>1330</Session>
				<Session>1400</Session>
				<Session>1450</Session>
				<Session>1615</Session>
			</Content>
		</Group>
		<Group id="1550">
			<Name>fastPolled Parameters 3</Name>
			<Description>Fast-polled Parameters 3</Description>
			<Type>poll</Type>
			<Content>
				<Session>1595</Session>
				<Session>1600</Session>
				<Session>1601</Session>
				<Session>1602</Session>
				<Session>1603</Session>
				<Session>1604</Session>
				<Session>1605</Session>
			</Content>
		</Group>
		<Group id="1150">
			<Name>slowPolled Parameters 1</Name>
			<Description>Slow-polled Parameters 1</Description>
			<Type>poll</Type>
			<Content>
				<Session>1155</Session>
				<Session>1160</Session>
				<Session>1165</Session>
				<Session>1170</Session>
				<Session>1175</Session>
				<Session>1180</Session>
				<Session>1275</Session>
				<Session>1395</Session>
			</Content>
		</Group>
		<Group id="2150">
			<Name>slowPolled Parameters 2</Name>
			<Description>Slow-polled Parameters 2</Description>
			<Type>poll</Type>
			<Content>
				<Session>1020</Session>
				<Session>1025</Session>
				<Session>1030</Session>
				<Session>1035</Session>
				<Session>1130</Session>
				<Session>1135</Session>
				<Session>1140</Session>
				<Session>1495</Session>
			</Content>
		</Group>
		<Group id="1600">
			<Name>input0ConfigReadGroup</Name>
			<Description>Input 0 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1600</Session>
			</Content>
		</Group>
		<Group id="1610">
			<Name>flowTableCondensedReadGroup</Name>
			<Description>Flow Table Condensed Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1610</Session>
			</Content>
		</Group>
		<Group id="1614">
			<Name>ptpProfileGroup</Name>
			<Description>PTP Profile Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1614</Session>
			</Content>
		</Group>
		<Group id="1616">
			<Name>ptpMessageRatesGroup</Name>
			<Description>PTP Message Rates Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1616</Session>
			</Content>
		</Group>
		<Group id="1617">
			<Name>ptpProfileDomainGroup</Name>
			<Description>PTP Profile Domain Group</Description>
			<Type>poll</Type>
			<Condition><![CDATA[id:1617 != emptystring]]></Condition>
			<Content>
				<Session>1617</Session>
			</Content>
		</Group>
		<Group id="1650">
			<Name>input0ConfigWriteGroup</Name>
			<Description>Input 0 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1650</Session>
				<Session>1600</Session>
			</Content>
		</Group>
		<Group id="1601">
			<Name>input1ConfigReadGroup</Name>
			<Description>Input 1 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1601</Session>
			</Content>
		</Group>
		<Group id="1651">
			<Name>input1ConfigWriteGroup</Name>
			<Description>Input 1 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1651</Session>
				<Session>1601</Session>
			</Content>
		</Group>
		<Group id="1602">
			<Name>input2ConfigReadGroup</Name>
			<Description>Input 2 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1602</Session>
			</Content>
		</Group>
		<Group id="1652">
			<Name>input2ConfigWriteGroup</Name>
			<Description>Input 2 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1652</Session>
				<Session>1602</Session>
			</Content>
		</Group>
		<Group id="1603">
			<Name>input3ConfigReadGroup</Name>
			<Description>Input 3 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1603</Session>
			</Content>
		</Group>
		<Group id="1653">
			<Name>input3ConfigWriteGroup</Name>
			<Description>Input 3 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1653</Session>
				<Session>1603</Session>
			</Content>
		</Group>
		<Group id="1604">
			<Name>input4ConfigReadGroup</Name>
			<Description>Input 4 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1604</Session>
			</Content>
		</Group>
		<Group id="1654">
			<Name>input4ConfigWriteGroup</Name>
			<Description>Input 4 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1654</Session>
				<Session>1604</Session>
			</Content>
		</Group>
		<Group id="1605">
			<Name>input5ConfigReadGroup</Name>
			<Description>Input 5 Config Read Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1605</Session>
			</Content>
		</Group>
		<Group id="1655">
			<Name>input5ConfigWriteGroup</Name>
			<Description>Input 5 Config Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1655</Session>
				<Session>1605</Session>
			</Content>
		</Group>
		<Group id="1695">
			<Name>activeInputWriteGroup</Name>
			<Description>Active Input Write Group</Description>
			<Type>poll</Type>
			<Content>
				<Session>1695</Session>
				<Session>1595</Session>
			</Content>
		</Group>
		<Group id="8000">
			<Name>CreateNewFlowGroup</Name>
			<Description>Create New Flow And Update Flow Table</Description>
			<Type>poll</Type>
			<Content>
				<Session>8000</Session>
				<Session>1600</Session>
				<Session>1601</Session>
				<Session>1602</Session>
				<Session>1603</Session>
				<Session>1604</Session>
				<Session>1605</Session>
			</Content>
		</Group>
		<Group id="8854">
			<Name>loadPreset</Name>
			<Description>loadPreset</Description>
			<Type>poll</Type>
			<Content>
				<Session>8854</Session>
			</Content>
		</Group>
		<Group id="8800">
			<Name>getPresetGroups</Name>
			<Description>Get Preset Groups</Description>
			<Type>poll</Type>
			<Content>
				<Session>8800</Session>
			</Content>
		</Group>
		<Group id="8850">
			<Name>getPresets</Name>
			<Description>Get Presets</Description>
			<Type>poll</Type>
			<Content>
				<Session>8850</Session>
			</Content>
		</Group>
	</Groups>
	<Triggers>
		<Trigger id="1">
			<Name>After Startup</Name>
			<On>protocol</On>
			<Time>after startup</Time>
			<Type>action</Type>
			<Content>
				<Id>1</Id>
			</Content>
		</Trigger>
		<Trigger id="55">
			<Name>savePresetFromQAction</Name>
			<Type>action</Type>
			<Content>
				<Id>55</Id>
			</Content>
		</Trigger>
		<Trigger id="56">
			<Name>GetPresetsAfterSavePreset</Name>
			<On id="55">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>56</Id>
			</Content>
		</Trigger>
		<Trigger id="1550">
			<Name>updateActiveInputList</Name>
			<On id="1550">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>1550</Id>
			</Content>
		</Trigger>
		<Trigger id="1600">
			<Name>sendInput0CongurationReadRequest</Name>
			<On id="1600">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1600</Id>
			</Content>
		</Trigger>
		<Trigger id="1650">
			<Name>sendInput0CongurationWriteRequest</Name>
			<On id="1650">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1650</Id>
			</Content>
		</Trigger>
		<Trigger id="2650">
			<Name>processInputConfigureSetQueueForInput0</Name>
			<On id="1650">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2650</Id>
				<Id>21650</Id>
			</Content>
		</Trigger>
		<Trigger id="1601">
			<Name>sendInput1CongurationReadRequest</Name>
			<On id="1601">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1601</Id>
			</Content>
		</Trigger>
		<Trigger id="1651">
			<Name>sendInput1CongurationWriteRequest</Name>
			<On id="1651">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1651</Id>
			</Content>
		</Trigger>
		<Trigger id="2651">
			<Name>processInputConfigureSetQueueForInput1</Name>
			<On id="1651">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2651</Id>
				<Id>21651</Id>
			</Content>
		</Trigger>
		<Trigger id="1602">
			<Name>sendInput2CongurationReadRequest</Name>
			<On id="1602">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1602</Id>
			</Content>
		</Trigger>
		<Trigger id="1652">
			<Name>sendInput2CongurationWriteRequest</Name>
			<On id="1652">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1652</Id>
			</Content>
		</Trigger>
		<Trigger id="2652">
			<Name>processInputConfigureSetQueueForInput2</Name>
			<On id="1652">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2652</Id>
				<Id>21652</Id>
			</Content>
		</Trigger>
		<Trigger id="1603">
			<Name>sendInput3CongurationReadRequest</Name>
			<On id="1603">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1603</Id>
			</Content>
		</Trigger>
		<Trigger id="1653">
			<Name>sendInput3CongurationWriteRequest</Name>
			<On id="1653">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1653</Id>
			</Content>
		</Trigger>
		<Trigger id="2653">
			<Name>processInputConfigureSetQueueForInput3</Name>
			<On id="1653">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2653</Id>
				<Id>21653</Id>
			</Content>
		</Trigger>
		<Trigger id="1604">
			<Name>sendInput4CongurationReadRequest</Name>
			<On id="1604">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1604</Id>
			</Content>
		</Trigger>
		<Trigger id="1654">
			<Name>sendInput4CongurationWriteRequest</Name>
			<On id="1654">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1654</Id>
			</Content>
		</Trigger>
		<Trigger id="2654">
			<Name>processInputConfigureSetQueueForInput4</Name>
			<On id="1654">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2654</Id>
				<Id>21654</Id>
			</Content>
		</Trigger>
		<Trigger id="1605">
			<Name>sendInput5CongurationReadRequest</Name>
			<On id="1605">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1605</Id>
			</Content>
		</Trigger>
		<Trigger id="1655">
			<Name>sendInput5CongurationWriteRequest</Name>
			<On id="1655">parameter</On>
			<Time>change</Time>
			<Type>action</Type>
			<Content>
				<Id>1655</Id>
			</Content>
		</Trigger>
		<Trigger id="1695">
			<Name>sendActiveInputWriteRequest</Name>
			<Type>action</Type>
			<Content>
				<Id>1695</Id>
			</Content>
		</Trigger>
		<Trigger id="2655">
			<Name>processInputConfigureSetQueueForInput5</Name>
			<On id="1655">group</On>
			<Time>after</Time>
			<Type>action</Type>
			<Content>
				<Id>2655</Id>
				<Id>21655</Id>
			</Content>
		</Trigger>
		<Trigger id="8000">
			<Name>When New Flow Request Created From QAction</Name>
			<Type>action</Type>
			<Content>
				<Id>8000</Id>
			</Content>
		</Trigger>
		<Trigger id="8854">
			<Name>loadPresetFromQAction</Name>
			<Type>action</Type>
			<Content>
				<Id>8854</Id>
			</Content>
		</Trigger>
	</Triggers>
	<Actions>
		<Action id="1">
			<Name>After Startup Group</Name>
			<On id="2">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="2">
			<Name>After Startup QAction</Name>
			<On id="2">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="55">
			<Name>savePreset</Name>
			<On id="55">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="56">
			<Name>GetPresetsAfterSavePreset</Name>
			<On id="8850">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="1550">
			<Name>updateActiveInputList</Name>
			<On id="12656">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="1600">
			<Name>sendInput0CongurationReadRequest</Name>
			<On id="1600">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1650">
			<Name>sendInput0CongurationWriteRequest</Name>
			<On id="1650">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2650">
			<Name>processInputConfigureSetQueueForInput0</Name>
			<On id="12650">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="21650">
			<Name>clearInput0CongurationWriteRequest</Name>
			<On id="2650">parameter</On>
			<Type>clear</Type>
		</Action>
		<Action id="1601">
			<Name>sendInput1CongurationReadRequest</Name>
			<On id="1601">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1651">
			<Name>sendInput1CongurationWriteRequest</Name>
			<On id="1651">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2651">
			<Name>processInputConfigureSetQueueForInput1</Name>
			<On id="12651">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="21651">
			<Name>clearInput1CongurationWriteRequest</Name>
			<On id="2651">parameter</On>
			<Type>clear</Type>
		</Action>
		<Action id="1602">
			<Name>sendInput2CongurationReadRequest</Name>
			<On id="1602">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1652">
			<Name>sendInput2CongurationWriteRequest</Name>
			<On id="1652">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2652">
			<Name>processInputConfigureSetQueueForInput2</Name>
			<On id="12652">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="21652">
			<Name>clearInput2CongurationWriteRequest</Name>
			<On id="2652">parameter</On>
			<Type>clear</Type>
		</Action>
		<Action id="1603">
			<Name>sendInput3CongurationReadRequest</Name>
			<On id="1603">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1653">
			<Name>sendInput3CongurationWriteRequest</Name>
			<On id="1653">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2653">
			<Name>processInputConfigureSetQueueForInput3</Name>
			<On id="12653">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="21653">
			<Name>clearInput3CongurationWriteRequest</Name>
			<On id="2653">parameter</On>
			<Type>clear</Type>
		</Action>
		<Action id="1604">
			<Name>sendInput4CongurationReadRequest</Name>
			<On id="1604">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1654">
			<Name>sendInput4CongurationWriteRequest</Name>
			<On id="1654">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2654">
			<Name>processInputConfigureSetQueueForInput4</Name>
			<On id="12654">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="21654">
			<Name>clearInput4CongurationWriteRequest</Name>
			<On id="2654">parameter</On>
			<Type>clear</Type>
		</Action>
		<Action id="1605">
			<Name>sendInput5CongurationReadRequest</Name>
			<On id="1605">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1655">
			<Name>sendInput5CongurationWriteRequest</Name>
			<On id="1655">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="1695">
			<Name>sendActiveInputWriteRequest</Name>
			<On id="1695">group</On>
			<Type>execute</Type>
		</Action>
		<Action id="2655">
			<Name>processInputConfigureSetQueueForInput5</Name>
			<On id="12655">parameter</On>
			<Type>run actions</Type>
		</Action>
		<Action id="8000">
			<Name>Send Create Flow Request</Name>
			<On id="8000">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="8854">
			<Name>loadPreset</Name>
			<On id="8854">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="21655">
			<Name>clearInput5CongurationWriteRequest</Name>
			<On id="2655">parameter</On>
			<Type>clear</Type>
		</Action>
	</Actions>
	<Timers>
		<!-- This timer was explicitly requested. It's aimed to help build a histogram similar to that displayed by the management interface -->
		<Timer id="1">
			<Name>superFastTimer</Name>
			<Time initial="true">10000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>1614</Group>
				<Group>1616</Group>
			</Content>
		</Timer>
		<Timer id="2">
			<Name>fastTimer</Name>
			<Time initial="true">30000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>1617</Group>
				<Group>1060</Group>
				<Group>1250</Group>
				<Group>1550</Group>
				<Group>1610</Group>
			</Content>
		</Timer>
		<Timer id="3">
			<Name>midTimer</Name>
			<Time initial="true">90000</Time>
			<Interval>250</Interval>
			<!--<Interval>75</Interval>-->
			<Content>
				<Group>1000</Group>
				<Group>1100</Group>
				<Group>1200</Group>
				<Group>1300</Group>
				<Group>1500</Group>
				<Group>8800</Group>
				<Group>8850</Group>
			</Content>
		</Timer>
		<Timer id="4">
			<Name>slowTimer</Name>
			<Time initial="true">3600000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>1150</Group>
				<Group>2150</Group>
			</Content>
		</Timer>
	</Timers>
	<PortSettings name="HTTP Connection">
		<BusAddress>
			<Disabled>false</Disabled>
			<DefaultValue>byPassProxy</DefaultValue>
		</BusAddress>
		<IPport>
			<DefaultValue>9000</DefaultValue>
		</IPport>
	</PortSettings>
	<VersionHistory>
		<Branches>
			<Branch id="1">
				<Comment />
				<SystemVersions>
					<SystemVersion id="0">
						<MajorVersions>
							<MajorVersion id="1">
								<MinorVersions>
									<MinorVersion id="3">
										<Changes>
											<NewFeature>Allow to create flows on the device;</NewFeature>
										</Changes>
										<Date>2019-11-06</Date>
										<Provider>
											<Author>MCO</Author>
											<Company>Skyline Communications</Company>
										</Provider>
									</MinorVersion>
									<MinorVersion id="4">
										<Changes>
											<Fix>Fix PTP Parameter types</Fix>
										</Changes>
										<Date>2020-01-14</Date>
										<Provider>
											<Author>JRI</Author>
											<Company>Skyline Communications</Company>
										</Provider>
									</MinorVersion>
									<MinorVersion id="5">
										<Changes>
											<Change>Update Discreet Values on Param PTP Lock Status</Change>
										</Changes>
										<Date>2020-02-12</Date>
										<Provider>
											<Author>JRI</Author>
											<Company>Skyline Communications</Company>
										</Provider>
									</MinorVersion>
									<MinorVersion id="6">
										<Date>2020-09-15</Date>
										<Provider>
											<Author>DSI</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<Fix>Fixed exceptions cases being logged in QA 2000 and QA 2300.</Fix>
											<NewFeature>Added two new parameters to &#39;PTP Information&#39; page.</NewFeature>
										</Changes>
									</MinorVersion>
									<MinorVersion id="7">
										<Date>2021-04-09</Date>
										<Provider>
											<Author>PDO</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<NewFeature>Added name and flows of the active input</NewFeature>
											<NewFeature>Added RTP stats in the flows condensed table</NewFeature>
										</Changes>
										<References>
											<TaskId>150516</TaskId>
										</References>
									</MinorVersion>
								</MinorVersions>
							</MajorVersion>
							<MajorVersion id="2">
								<MinorVersions>
									<MinorVersion id="1" basedOn="1.0.1.7">
										<Date>2021-05-31</Date>
										<Provider>
											<Author>PDO</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<Change>Changed column display order for tables ‘Audio Flow Configuration’ and ‘Video Flow Configuration’.</Change>
										</Changes>
										<References>
											<TaskId>150516</TaskId>
										</References>
									</MinorVersion>
									<MinorVersion id="2" basedOn="1.0.2.1">
										<Date>2021-10-07</Date>
										<Provider>
											<Author>TVO</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<Fix>Fix to allow first Input selection for Active Input.</Fix>
										</Changes>
										<References>
											<TaskId>167116</TaskId>
										</References>
									</MinorVersion>
									<MinorVersion id="3" basedOn="1.0.2.2">
										<Date>2022-03-08</Date>
										<Provider>
											<Author>ADK</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<NewFeature>Extend with MC Property</NewFeature>
										</Changes>
										<References>
											<TaskId>177245</TaskId>
										</References>
										<Suppressions>
											<Suppression type="MajorChange">
												<ResultId>3.32.1</ResultId>
												<Location>Protocol/QActions/QAction[@id:63000]</Location>
												<Reason>No impact on minimum DataMiner version.</Reason>
											</Suppression>
										</Suppressions>
									</MinorVersion>
									<MinorVersion id="4" basedOn="1.0.2.3">
										<Date>2022-03-29</Date>
										<Provider>
											<Author>ADK</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<NewFeature>Presets implementation</NewFeature>
										</Changes>
										<References>
											<TaskId>181082</TaskId>
										</References>
									</MinorVersion>
								</MinorVersions>
							</MajorVersion>
						</MajorVersions>
					</SystemVersion>
				</SystemVersions>
			</Branch>
		</Branches>
	</VersionHistory>
</Protocol>