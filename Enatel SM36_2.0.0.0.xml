<?xml version="1.0" encoding="utf-8" ?>
<!--

****************************************************************************
*  Copyright (c) 2021,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this driver, you expressly agree with the usage terms and
conditions set out below.
This driver and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this driver is strictly for personal use only.
This driver may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
driver is forbidden.

Any modifications to this driver by the user are only allowed for
personal use and within the intended purpose of the driver,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the driver resulting from a modification
or adaptation by the user.

The content of this driver is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe



Revision History (auto generated):

DATE    VERSION    AUTHOR                      COMMENTS

        1.0.0.1    , Skyline Communications    NF: Initial version


Revision History (auto generated):

DATE    VERSION    AUTHOR                      COMMENTS

        1.0.0.1    , Skyline Communications    NF: Initial version
-->
<Protocol xmlns="http://www.skyline.be/protocol">
	<Name>Enatel SM36</Name>
	<Description>Enatel SM36</Description>
	<Version>2.0.0.0</Version>
	<IntegrationID>DMS-DRV-XXXX</IntegrationID>
	<Provider>Enatel</Provider>
	<Vendor>Enatel Ltd</Vendor>
	<VendorOID>.1.3.6.1.4.1.21940</VendorOID>
	<ElementType>SNMP</ElementType>
	<Type relativeTimers="true">snmp</Type>
	<Display defaultPage="General" pageOrder="General;Webinterface#http://[Polling Ip];Alerts &amp; Notifications" wideColumnPages="" />
	<SNMP includepages="true">auto</SNMP>
	<Compliancies>
		<CassandraReady>true</CassandraReady>
	</Compliancies>
	<Params>
		<Param id="2">
			<Name>AfterStartup</Name>
			<Description>After Startup</Description>
			<Type>dummy</Type>
		</Param>
		<Param id="11">
			<Name>Remove All Rows</Name>
			<Description />
			<Information>
				<Text>This action will also reset the Alarm Status</Text>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Alerts &amp; Notifications</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Delete all traps</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="20">
			<Name>TrapReceiver</Name>
			<Description>TrapReceiver</Description>
			<Type>dummy</Type>
			<Display>
				<RTDisplay>false</RTDisplay>
			</Display>
			<SNMP>
				<Enabled>true</Enabled>
				<TrapOID setBindings="allBindingInfo" type="wildcard">*</TrapOID>
			</SNMP>
		</Param>
		<Param id="30" trending="false" save="true">
			<Name>TrapsProcessingToggleButton</Name>
			<Description>Trap Processing</Description>
			<Type>read</Type>
			<Information>
			</Information>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<DefaultValue>1</DefaultValue>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Alerts &amp; Notifications</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="31" trending="false" save="true">
			<Name>TrapsProcessingToggleButton</Name>
			<Description>Trap Processing</Description>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Alerts &amp; Notifications</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>togglebutton</Type>
				<Discreets>
					<Discreet>
						<Display>Disabled</Display>
						<Value>0</Value>
					</Discreet>
					<Discreet>
						<Display>Enabled</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="100" trending="false">
			<Name>Systemtime</Name>
			<Description>System Time</Description>
			<Information>
				<Subtext>
					<![CDATA[System time]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.1.1.0</OID>
				<Type>octetstring</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="101" trending="false">
			<Name>SystemDescription</Name>
			<Description>System Description</Description>
			<Information>
				<Subtext>
					<![CDATA[A textual description of the entity.  This value should
include the full name and version identification of
the system's hardware type, software operating-system,
and networking software.]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.2.1.1.1.0</OID>
				<Type>octetstring</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>255</High>
				</Range>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>4</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="102" trending="false">
			<Name>sysUpTime</Name>
			<Description>System Up Time</Description>
			<Information>
				<Subtext>
					<![CDATA[The time (in hundredths of a second) since the
network management portion of the system was last
re-initialized.]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:100</Sequence>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.2.1.1.3.0</OID>
				<Type>timeticks</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>2</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="time">number</Type>
			</Measurement>
		</Param>
		<Param id="103" trending="false">
			<Name>Contact</Name>
			<Description>Contact</Description>
			<Information>
				<Subtext>
					<![CDATA[The textual identification of the contact person for
this managed node, together with information on how
to contact this person.  If no contact information is
known, the value is the zero-length string.]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.2.1.1.4.0</OID>
				<Type>octetstring</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>255</High>
				</Range>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>6</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="104" trending="false">
			<Name>SystemName</Name>
			<Description>System Name</Description>
			<Information>
				<Subtext>
					<![CDATA[An administratively-assigned name for this managed
node.  By convention, this is the node's fully-qualified
domain name.  If the name is unknown, the value is
the zero-length string.]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.2.1.1.5.0</OID>
				<Type>octetstring</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>255</High>
				</Range>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>3</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="105" trending="false">
			<Name>Location</Name>
			<Description>Location</Description>
			<Information>
				<Subtext>
					<![CDATA[The physical location of this node (e.g., 'telephone
closet, 3rd floor').  If the location is unknown, the
value is the zero-length string.]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.2.1.1.6.0</OID>
				<Type>octetstring</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Range>
					<Low>0</Low>
					<High>255</High>
				</Range>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>5</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="200">
			<Name>DCMonitoringBegin</Name>
			<Description>DC Monitoring</Description>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="begin">title</Type>
			</Measurement>
		</Param>
		<Param id="201">
			<Name>DCMonitoring</Name>
			<Description />
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<!--Note that by adding multiple positions,
					the same title end can be re-used for closing different group boxes.
					Indeed, Cube only uses the positions in order to potentially group a title begin to a title end.-->
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>18</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="end">title</Type>
			</Measurement>
		</Param>
		<Param id="203">
			<Name>SystemInformationBegin</Name>
			<Description>System Information</Description>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>0</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="begin">title</Type>
			</Measurement>
		</Param>
		<Param id="204">
			<Name>SystemInformation</Name>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<!--Note that by adding multiple positions,
					the same title end can be re-used for closing different group boxes.
					Indeed, Cube only uses the positions in order to potentially group a title begin to a title end.-->
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>7</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="end">title</Type>
			</Measurement>
		</Param>
		<Param id="205">
			<Name>PowerModuleBegin</Name>
			<Description>Power Module</Description>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="begin">title</Type>
			</Measurement>
		</Param>
		<Param id="206">
			<Name>PowerModule</Name>
			<Type>fixed</Type>
			<Display>
				<RTDisplay>true</RTDisplay>
				<!--Note that by adding multiple positions,
					the same title end can be re-used for closing different group boxes.
					Indeed, Cube only uses the positions in order to potentially group a title begin to a title end.-->
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>10</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="end">title</Type>
			</Measurement>
		</Param>
		<Param id="300" trending="false">
			<Name>AlarmsAndNotications</Name>
			<Description>System Alarms and Notifcations</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="301" type="autoincrement" options=";save" />
				<ColumnOption idx="1" pid="302" type="retrieved" options=";save" />
				<ColumnOption idx="2" pid="303" type="retrieved" options=";save" />
				<ColumnOption idx="3" pid="304" type="retrieved" options=";save" />
				<ColumnOption idx="4" pid="305" type="retrieved" options=";save" />
				<ColumnOption idx="5" pid="306" type="retrieved" options=";save" />
			</ArrayOptions>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>Alerts &amp; Notifications</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:301|0-302|1-303|2-304|3-305|4-306|5,width:182-150-100-500-100-100,sort:STRING-STRING-STRING-STRING-STRING-STRING,lines:20,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="301" trending="false">
			<Name>IndexAlarmsNotications</Name>
			<Description>Alarms Notifications [IDX]</Description>
			<Information>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="302" trending="false">
			<Name>Time</Name>
			<Description>Time</Description>
			<Information>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="303" trending="false">
			<Name>IPAddress</Name>
			<Description>IP address</Description>
			<Information>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>false</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="304" trending="false">
			<Name>Message</Name>
			<Description>Message</Description>
			<Information>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="305">
			<Name>Delete trap</Name>
			<Description>Delete trap</Description>
			<Information>
			</Information>
			<Type>write</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type width="110">button</Type>
				<Discreets>
					<Discreet>
						<Display>Delete</Display>
						<Value>1</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="306" trending="false">
			<Name>Key</Name>
			<Description>Key</Description>
			<Information>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="400" trending="false">
			<Name>ImportCSVSNMPTrapInformation</Name>
			<Description>Import CSV SNMP Trap Information</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="401" type="autoincrement" options=";save" />
				<ColumnOption idx="1" pid="402" type="custom" options=";save" />
				<ColumnOption idx="2" pid="403" type="custom" options=";save" />
			</ArrayOptions>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type options="tab=lines:20,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="401" trending="false">
			<Name>IndexTrapTable</Name>
			<Description>Table [IDX]</Description>
			<Information>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="402" trending="false">
			<Name>IndexTrapKeys</Name>
			<Description>Trap keys</Description>
			<Information>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="403" trending="false">
			<Name>IndexTrapDecriptions</Name>
			<Description>Trap Description</Description>
			<Information>
				<Includes>
					<Include>time</Include>
					<Include>range</Include>
					<Include>steps</Include>
					<Include>units</Include>
				</Includes>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<LengthType>next param</LengthType>
				<Type>string</Type>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="2000" trending="true">
			<Name>RectifierVoltage</Name>
			<Description>Rectifier Voltage</Description>
			<Information>
				<Subtext>
					<![CDATA[Bus 1 Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.1.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Decimals>1</Decimals>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>1</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2001" trending="true">
			<Name>RectifierCurrent</Name>
			<Description>Rectifier Current</Description>
			<Information>
				<Subtext>
					<![CDATA[Rectifier Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.2.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>2</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2002" trending="true">
			<Name>convertervoltage12v</Name>
			<Description>Converter Voltage 12V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.3.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>10</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2003" trending="true">
			<Name>ConverterCurrent12v</Name>
			<Description>Converter Current 12V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.4.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>11</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2004" trending="true">
			<Name>ConverterVoltage24v</Name>
			<Description>Converter Voltage 24V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.5.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>12</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2005" trending="true">
			<Name>ConverterCurrent24v</Name>
			<Description>Converter Current 24V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.6.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>13</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2006" trending="true">
			<Name>ConverterVoltage48v</Name>
			<Description>Converter Voltage 48V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.7.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>14</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2007" trending="true">
			<Name>ConverterCurrent48v</Name>
			<Description>Converter Current 48V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.8.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>15</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2008" trending="true">
			<Name>ConverterVoltage60v</Name>
			<Description>Converter Voltage 60V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.9.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>16</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2009" trending="true">
			<Name>ConverterCurrent60v</Name>
			<Description>Converter Current 60V</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.10.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>17</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2010" trending="true">
			<Name>InverterVoltage</Name>
			<Description>Inverter Voltage</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Voltage]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.11.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>V</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>3</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2011" trending="true">
			<Name>InvertercCurrent</Name>
			<Description>Inverter Current</Description>
			<Information>
				<Subtext>
					<![CDATA[Converter Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.12.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>4</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2012" trending="true">
			<Name>LoadCurrent</Name>
			<Description>Load Current</Description>
			<Information>
				<Subtext>
					<![CDATA[Load Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.13.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>5</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2013" trending="true">
			<Name>BatteryCurrent</Name>
			<Description>Battery Current</Description>
			<Information>
				<Subtext>
					<![CDATA[Battery Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.14.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>6</Row>
					</Position>
				</Positions>
				<Decimals>1</Decimals>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2014" trending="true">
			<Name>BatteryTemperature</Name>
			<Description>Battery Temperature</Description>
			<Information>
				<Subtext>
					<![CDATA[Battery Temperature]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:10</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.15.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>7</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2015" trending="true">
			<Name>AmbientTemperature</Name>
			<Description>Ambient Temperature</Description>
			<Information>
				<Subtext>
					<![CDATA[Ambient Temperature]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:1000</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.16.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>8</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="2016" trending="true">
			<Name>BatteryCapacity</Name>
			<Description>Battery Capacity</Description>
			<Information>
				<Subtext>
					<![CDATA[Battery Capacity]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:10</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.4.2.17.0</OID>
				<Type>integer32</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>%</Units>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>0</Column>
						<Row>9</Row>
					</Position>
				</Positions>
				<Range>
					<Low>1</Low>
					<High>100</High>
				</Range>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3000" trending="false">
			<Name>PowerModuleTable</Name>
			<Description>PowerModule Table</Description>
			<Type>array</Type>
			<ArrayOptions index="0">
				<ColumnOption idx="0" pid="3001" type="snmp" options="" />
				<ColumnOption idx="1" pid="3002" type="snmp" options="" />
				<ColumnOption idx="2" pid="3003" type="snmp" options="" />
				<ColumnOption idx="3" pid="3004" type="snmp" options=";enableHeaderAvg;enableHistogram;enableHeatmap" />
				<ColumnOption idx="4" pid="3005" type="snmp" options=";enableHeaderAvg;enableHistogram;enableHeatmap" />
				<ColumnOption idx="5" pid="3006" type="snmp" options=";enableHeaderAvg;enableHistogram;enableHeatmap" />
				<ColumnOption idx="6" pid="3007" type="snmp" options=";enableHeaderAvg;enableHistogram;enableHeatmap" />
				<ColumnOption idx="7" pid="3008" type="snmp" options=";enableHeaderAvg;enableHistogram;enableHeatmap" />
				<ColumnOption idx="8" pid="3009" type="snmp" options="" />
			</ArrayOptions>
			<Information>
				<Subtext>
					<![CDATA[power modules table]]>
				</Subtext>
			</Information>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete" options="instance;multipleGetNext">1.3.6.1.4.1.21940.2.5.5.1</OID>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Positions>
					<Position>
						<Page>General</Page>
						<Column>1</Column>
						<Row>9</Row>
					</Position>
				</Positions>
			</Display>
			<Measurement>
				<Type options="tab=columns:3001|0-3002|1-3003|2-3004|3-3005|4-3006|5-3007|6-3008|7-3009|8,width:153-100-100-100-100-100-100-100-100,sort:INT-STRING-INT-INT-INT-INT-INT-INT-INT,lines:20,filter:true">table</Type>
			</Measurement>
		</Param>
		<Param id="3001" trending="false">
			<Name>PowermoduleModulenumber</Name>
			<Description>Modulenumber [IDX]</Description>
			<Information>
				<Subtext>
					<![CDATA[This is the SNMP instance of the table. Format: [modulenumber].

 - modulenumber: Address of power module]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="3002" trending="false">
			<Name>PowerModuleid</Name>
			<Description>ID</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module ID]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>other</RawType>
				<Type>string</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.2</OID>
				<Type>OctetStringASCII</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>string</Type>
			</Measurement>
		</Param>
		<Param id="3003" trending="false">
			<Name>PowerModuleshutdown</Name>
			<Description>Shutdown</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Shutdown Command]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.3</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>discreet</Type>
				<Discreets>
					<Discreet>
						<Display>Yes</Display>
						<Value>1</Value>
					</Discreet>
					<Discreet>
						<Display>No</Display>
						<Value>0</Value>
					</Discreet>
				</Discreets>
			</Measurement>
		</Param>
		<Param id="3004" trending="true">
			<Name>PowerModuleFanspeed1</Name>
			<Description>Fanspeed 1</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Fan Speed 1]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.4</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>rpm</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3005" trending="true">
			<Name>PowerModuleFanspeed2</Name>
			<Description>Fanspeed 2</Description>
			<Information>
				<Subtext>
					<![CDATA[Power module Fan Speed 2]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.5</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>rpm</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3006" trending="true">
			<Name>PowerModuleOutputCurrent</Name>
			<Description>Outputcurrent</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Output Current]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.6</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>A</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3007" trending="true">
			<Name>PowerModuleTemperature1</Name>
			<Description>Temperature</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Temperature Measurment 1]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:10</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.7</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3008" trending="true">
			<Name>PowerModuleTemperature2</Name>
			<Description>Temperature2</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Temperature Measurment 2]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
				<Sequence noset="true">div:10</Sequence>
			</Interprete>
			<Alarm>
				<Monitored>true</Monitored>
			</Alarm>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.8</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
				<Units>deg C</Units>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
		<Param id="3009" trending="false">
			<Name>PowerModuleAlarmStatus</Name>
			<Description>Alarmstatus</Description>
			<Information>
				<Subtext>
					<![CDATA[Power Module Alarm status word]]>
				</Subtext>
			</Information>
			<Type>read</Type>
			<Interprete>
				<RawType>numeric text</RawType>
				<Type>double</Type>
				<LengthType>next param</LengthType>
			</Interprete>
			<SNMP>
				<Enabled>true</Enabled>
				<OID type="complete">1.3.6.1.4.1.21940.2.5.5.1.1.9</OID>
				<Type>integer</Type>
			</SNMP>
			<Display>
				<RTDisplay>true</RTDisplay>
			</Display>
			<Measurement>
				<Type>number</Type>
			</Measurement>
		</Param>
	</Params>
	<QActions>
		<QAction id="63000" encoding="csharp" name="** Auto-generated Class Library **" options="precompile">
			
			<![CDATA[// --- auto-generated code --- do not modify ---

/*
{{StartPackageInfo}}
<PackageInfo xmlns="http://www.skyline.be/ClassLibrary">
	<BasePackage>
		<Identity>
			<Name>Class Library</Name>
			<Version>1.2.0.12</Version>
		</Identity>
	</BasePackage>
	<CustomPackages />
</PackageInfo>
{{EndPackageInfo}}
*/

namespace Skyline.DataMiner.Library.Protocol.Snmp.Trap
{
    /// <summary>
    /// Represents a keyed collection of trap variable bindings.
    /// </summary>
    internal class TrapInfoVariableBindingCollection : System.Collections.ObjectModel.KeyedCollection<System.String, Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding>
    {
        /// <summary>
        /// Extracts the key from the specified element.
        /// </summary>
        /// <param name = "item">The element from which to extract the key.</param>
        /// <exception cref = "ArgumentNullException"><paramref name = "item"/> is <see langword = "null"/>.</exception>
        /// <returns>The key for the specified element.</returns>
        protected override string GetKeyForItem(Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding item)
        {
            if (item != null)
            {
                return item.Oid;
            }
            else
            {
                throw new System.ArgumentNullException("item");
            }
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return string.Join(System.Environment.NewLine, this.Items);
        }
    }

    /// <summary>
    /// Represents a read-only collection of trap variable bindings.
    /// </summary>
    public class ReadOnlyTrapInfoVariableBindingCollection : System.Collections.ObjectModel.ReadOnlyCollection<Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding>
    {
        readonly Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection trapInfoVariableBindings;
        internal ReadOnlyTrapInfoVariableBindingCollection(Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection trapInfoVariableBindings): base(trapInfoVariableBindings)
        {
            if (trapInfoVariableBindings == null)
            {
                throw new System.ArgumentNullException("trapInfoVariableBindings");
            }

            this.trapInfoVariableBindings = trapInfoVariableBindings;
        }

        /// <summary>
        /// Gets the variable binding with the specified OID.
        /// </summary>
        /// <param name = "oid">The OID of the trap variable binding to get.</param>
        /// <value>The trap variable binding with the specified OID. If a trap variable binding with the specified OID is not found, an exception is thrown.</value>
        /// <exception cref = "ArgumentNullException"><paramref name = "oid"/> is <see langword = "null"/>.</exception>
        /// <exception cref = "KeyNotFoundException">An element with the specified key does not exist in the collection.</exception>
        /// <example>
        /// <code>
        /// TrapInfoBinding binding = trapBindingCollection["1.1.1"];
        /// </code>
        /// </example>
        public Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding this[string oid]
        {
            get
            {
                return this.trapInfoVariableBindings[oid];
            }
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return string.Join(System.Environment.NewLine, this.Items);
        }
    }

    /// <summary>
    /// Represents all the info as received from a trap in a protocol that has the TrapOID@setBindings attribute set to "allBindingInfo".
    /// </summary>
    public class TrapInfo
    {
        private readonly string oid;
        private readonly System.Net.IPAddress source;
        private readonly System.DateTime receivedTime;
        private readonly Skyline.DataMiner.Library.Protocol.Snmp.Trap.ReadOnlyTrapInfoVariableBindingCollection variableBindings;
        internal TrapInfo(string oid, System.Net.IPAddress source, int ticks, Skyline.DataMiner.Library.Protocol.Snmp.Trap.ReadOnlyTrapInfoVariableBindingCollection variableBindings)
        {
            if (source == null)
            {
                throw new System.ArgumentNullException("source");
            }

            if (variableBindings == null)
            {
                throw new System.ArgumentNullException("variableBindings");
            }

            if (System.String.IsNullOrWhiteSpace(oid))
            {
                throw new System.ArgumentException("The OID cannot be null, empty or white space.", "oid");
            }

            this.oid = oid;
            this.source = source;
            this.variableBindings = variableBindings;
            int ticksDifference;
            {
                int currentTimeTicks = System.Environment.TickCount & System.Int32.MaxValue; // Make sure negative numbers aren't used.
                int trapTimeTicks = ticks & System.Int32.MaxValue; // Make sure negative numbers aren't used.
                if (currentTimeTicks >= trapTimeTicks)
                {
                    ticksDifference = currentTimeTicks - trapTimeTicks;
                }
                else
                {
                    ticksDifference = (int.MaxValue - trapTimeTicks) + currentTimeTicks + 1;
                }
            }

            receivedTime = System.DateTime.Now.AddMilliseconds(-ticksDifference);
        }

        /// <summary>
        /// Gets the variable bindings of this trap.
        /// </summary>
        /// <value>The variable bindings.</value>
        public Skyline.DataMiner.Library.Protocol.Snmp.Trap.ReadOnlyTrapInfoVariableBindingCollection VariableBindings
        {
            get
            {
                return variableBindings;
            }
        }

        /// <summary>
        /// Gets the trap OID.
        /// </summary>
        /// <value>The trap OID.</value>
        public string Oid
        {
            get
            {
                return oid;
            }
        }

        /// <summary>
        /// Gets the trap source IP address.
        /// </summary>
        /// <value>The trap source IP address.</value>
        public System.Net.IPAddress Source
        {
            get
            {
                return source;
            }
        }

        /// <summary>
        /// Gets the time when the trap was received in the SLSNMPManager process.
        /// </summary>
        /// <value>The time when the trap was received in the SLSNMPManager process.</value>
        /// <remarks>This value is calculated based on a tick count (representing the number of milliseconds that have elapsed since the system was started at the moment the trap was received in the SLSNMPManager process).
        /// This tick count will wrap around to zero if the system is run continuously for 24.9 days.</remarks>
        public System.DateTime ReceivedTime
        {
            get
            {
                return receivedTime;
            }
        }

        /// <summary>
        /// Parses the trap object received from SLProtocol into a TrapInfo object.
        /// </summary>
        /// <param name = "trapInfo">The trap info object when the TrapOID@setBindings attribute set to "allBindingInfo".</param>
        /// <exception cref = "ArgumentNullException"><paramref name = "trapInfo"/> is <see langword = "null"/>.</exception>
        /// <exception cref = "ArgumentException"><paramref name = "trapInfo"/> is invalid.</exception>
        /// <returns>An object of type TrapInfo.</returns>
        /// <example>
        /// <code>
        /// TrapInfo trap = TrapInfo.FromTrapData(trapInfo);
        /// </code>
        /// </example>
        public static Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfo FromTrapData(object trapInfo)
        {
            return Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoParser.Parse(trapInfo);
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("Trap[OID: ");
            sb.Append(Oid);
            sb.Append(", Source: ");
            sb.Append(Source);
            sb.Append(", Received: ");
            sb.Append(ReceivedTime);
            sb.Append("Variable binding count: " + VariableBindings.Count);
            sb.Append("]" + System.Environment.NewLine);
            return sb.ToString();
        }
    }

    internal class TrapInfoParser
    {
        private TrapInfoParser()
        {
        }

        /// <summary>
        /// Parses the object returned from SLProtocol when using allBindingInfo on a parameter in a DataMiner Protocol.
        /// </summary>
        /// <param name = "trapInfo">The object returned from SLProtocol when using allBindingInfo on a parameter in a DataMiner Protocol.</param>
        /// <exception cref = "ArgumentNullException"><paramref name = "trapInfo"/> is <see langword = "null"/>.</exception>
        /// <exception cref = "ArgumentException"><paramref name = "trapInfo"/> is invalid.</exception>
        /// <exception cref = "FormatException"><paramref name = "trapInfo"/>Source is not a valid IP address.</exception>
        /// <returns>An instance of the <see cref = "TrapInfo"/> class.</returns>
        /// <example>
        /// <code>TrapInfo trap = TrapInfoParser.Parse(trapInfo);</code>
        /// </example>
        public static Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfo Parse(object trapInfo)
        {
            if (trapInfo == null)
            {
                throw new System.ArgumentNullException("trapInfo");
            }

            object[] trapInfoArray = trapInfo as object[];
            if (trapInfoArray == null || trapInfoArray.Length < 1)
            {
                throw new System.ArgumentException("Retrieved invalid trap information.", "trapInfo");
            }

            object[] generalTrapInfo = trapInfoArray[0] as object[];
            if (generalTrapInfo == null || generalTrapInfo.Length < 3)
            {
                throw new System.ArgumentException("Retrieved invalid trap information: generalTrapInfo was not the correct array.", "trapInfo");
            }

            string oid = System.Convert.ToString(generalTrapInfo[0], System.Globalization.CultureInfo.CurrentCulture);
            System.Net.IPAddress source = System.Net.IPAddress.Parse(System.Convert.ToString(generalTrapInfo[1], System.Globalization.CultureInfo.CurrentCulture));
            int ticks = GetTicks(generalTrapInfo[2]);
            Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection trapBindings = GetBindings(trapInfoArray);
            return new Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfo(oid, source, ticks, new Skyline.DataMiner.Library.Protocol.Snmp.Trap.ReadOnlyTrapInfoVariableBindingCollection(trapBindings));
        }

        private static Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection GetBindings(object[] trapInfoArray)
        {
            Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection bindings = new Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBindingCollection();
            for (int i = 1; i < trapInfoArray.Length; i++)
            {
                object[] binding = trapInfoArray[i] as object[];
                if (binding == null || binding.Length < 2)
                {
                    throw new System.ArgumentException("Retrieved invalid trap information.");
                }
                else
                {
                    string oid = System.Convert.ToString(binding[0], System.Globalization.CultureInfo.CurrentCulture);
                    string value = System.Convert.ToString(binding[1], System.Globalization.CultureInfo.CurrentCulture);
                    bindings.Add(new Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding(oid, value));
                }
            }

            return bindings;
        }

        private static int GetTicks(object timeInfo)
        {
            int iTick;
            if (System.Int32.TryParse(System.Convert.ToString(timeInfo, System.Globalization.CultureInfo.CurrentCulture), out iTick))
            {
                return iTick;
            }
            else
            {
                throw new System.ArgumentException("Retrieved invalid time ticks in trap information");
            }
        }
    }

    /// <summary>
    /// Represents a trap variable binding.
    /// </summary>
    [System.Serializable]
    public sealed class TrapInfoVariableBinding : System.IEquatable<Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding>
    {
        private readonly string value;
        private readonly string oid;
        internal TrapInfoVariableBinding(string oid, string value)
        {
            this.value = value;
            this.oid = oid;
        }

        /// <summary>
        /// Gets the value of this variable binding.
        /// </summary>
        /// <value>The value of this variable binding.</value>
        public string Value
        {
            get
            {
                return value;
            }
        }

        /// <summary>
        /// Gets the OID of this trap variable binding.
        /// </summary>
        /// <value>The OID of this trap variable binding.</value>
        public string Oid
        {
            get
            {
                return oid;
            }
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name = "obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(obj, null))
                return false;
            if (object.ReferenceEquals(this, obj))
                return true;
            if (this.GetType() != obj.GetType())
                return false;
            return this.Equals(obj as Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding);
        }

        /// <summary>
        /// Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref = "TrapInfoVariableBinding"/>  instance.
        /// </summary>
        /// <param name = "other">The object to compare to this instance.</param>
        /// <returns><c>true</c> if the <paramref name = "other"/> equals the value of this instance; otherwise, <c>false</c>.</returns>
        /// <remarks><paramref name = "other"/> is considered equal to this binding if both the OID and value are equal.</remarks>
        public bool Equals(Skyline.DataMiner.Library.Protocol.Snmp.Trap.TrapInfoVariableBinding other)
        {
            if (other == null)
            {
                return false;
            }

            return Value == other.Value && Oid == other.Oid;
        }

        /// <summary>
        /// Calculates the hash code for this object.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = 13;
            hash = (hash * 7) + Value.GetHashCode();
            hash = (hash * 7) + Oid.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append("[OID: ");
            sb.Append(Oid);
            sb.Append(", value: ");
            sb.Append(Value);
            sb.Append(']');
            return sb.ToString();
        }
    }
}]]>
		</QAction>
		<QAction id="1" name="Precompiled Code" encoding="csharp" options="precompile" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[namespace Skyline.Protocol
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Text;

    namespace MyExtension
    {
        #region Enumerations
        #endregion

        #region Structs
        #endregion

        #region Classes
        public class MyClass
        {
            #region Fields
            #endregion

            #region Constructors
            #endregion

            #region Enumerations
            #endregion

            #region Properties
            #endregion

            #region Methods
            #endregion

            #region Structs
            #endregion
        }
        #endregion
    }
}]]>
		</QAction>
		<QAction id="2" name="After Startup Load CSV" encoding="csharp" triggers="2" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class.
/// </summary>
public static class QAction
{
    /// <summary>
    /// The QAction entry point.
    /// </summary>
    /// <param name="protocol">Link with SLProtocol process.</param>
    public static void Run(SLProtocolExt protocol)
    {
		int rows = protocol.importcsvsnmptrapinformation.RowCount;
		string line;
		var dictionary = new Dictionary<string, string>();
		string csvFile = @"C:\Skyline DataMiner\Files\Csv\AllTrapsExport.csv";
		Regex CSVParser = new Regex(",");
		string[] x;
		string value;
		int index;
		string oidResult;
		char charsToTrim;
		string decriptionResult;
		int rowNumber;

		try
        {
				//Clear Virtual Table
				if (rows > 0 )
				{
					for (int i = rows; i >= 1; i--)
					{
						protocol.importcsvsnmptrapinformation.DeleteRow(i - 1);
					}
				}

				//Import CSV File
				using (StreamReader sr = new StreamReader(csvFile))
				{
					while ((line = sr.ReadLine()) != null)
					{
						x = CSVParser.Split(line);
						if (x.Length == 2 && x[0] != "OID")
						{
							value = x[0].ToString();
							index = value.LastIndexOf('.');
							oidResult = (value.Substring(++index));
							charsToTrim = '"';
							decriptionResult = x[1].Trim(charsToTrim);
							dictionary.Add(oidResult, decriptionResult);
						}
					}
				}	

				//Add Data to Virtual Table
				ImportcsvsnmptrapinformationQActionTable  importcsvsnmptrapinformationQActions = new ImportcsvsnmptrapinformationQActionTable(protocol, 400, "ImportSNMPtrapInformation");

				rowNumber = 0;
								
				foreach (KeyValuePair<string, string> item in dictionary)
				{
					ImportcsvsnmptrapinformationQActionRow row = new ImportcsvsnmptrapinformationQActionRow();
					row.Indextraptable_401 = Convert.ToString(rowNumber);
					row.Indextrapkeys_402 = item.Key;
					row.Indextrapdecriptions_403 = item.Value;
					importcsvsnmptrapinformationQActions.AddRow(row.ToObjectArray());
					rowNumber++;
				}
		}
		catch (Exception ex)
        {
            protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
        }
    }
}
]]>
		</QAction>
		<QAction id="3" name="Trap Processor" encoding="csharp" triggers="20" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[using System;
using System.Net;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

using Skyline.DataMiner.Scripting;
using System.Net.Sockets;
using Skyline.DataMiner.Net.Helper;
using Skyline.DataMiner.Library.Protocol.Snmp.Trap;
using System.IO;
using System.Text.RegularExpressions;

/// <summary>
/// DataMiner QAction Class.
/// </summary>
public static class QAction
{
    /// <summary>
    /// The QAction entry point.
    /// </summary>
    /// <param name="protocol">Link with SLProtocol process.</param>
    public static void Run(SLProtocolExt protocol, object trapInfo)
    {

		TrapInfo trap;
		string trapOid;
		DateTime receivedTime;
		IPAddress source;
		object ipAddress;
		int index;
		string oidResult;
		DateTime timeNow;

		Dictionary<int, string> csvtableValue;
		int trapKeys;
		string trapValues;
		string valueOutput;

		int rowsCountCSV;
		uint trapCSVImportTable;
		uint trapCSVImportRowPosition;
		uint trapKeysColumnPosition;
		uint trapValuesColumnPosition;
		uint[] cellDetailsKeys;
		uint[] cellDetailsValue;

		int alarmRowCount;
		List<string> alarmList;
		uint alarmsTableID;
		uint alarmRowPosition;
		uint[] alarmCellDetails;
		uint keysColumnPosition;

		try
        {
			if (Convert.ToUInt16(protocol.GetParameter(31)) == 1)
			{
				//Gather Trap Data
				trap = TrapInfo.FromTrapData(trapInfo) ?? null;

				//trap = null;
				if (trap != null)
				{
					trapOid = trap.Oid;
					receivedTime = trap.ReceivedTime; // The time when the trap was received in the SLSNMPManager
					timeNow = DateTime.Now;
					//If no IP address in Trap message just add lookup
					source = trap.Source ?? IPAddress.Loopback; // The source IP address
					ipAddress = source.ToString();

					//If received time isn't in Trap message add current time
					if (receivedTime == null)
					{
						receivedTime = timeNow;
					}
					if (trapOid != null)
					{
						//Get OID last digits 
						index = trapOid.LastIndexOf('.');
						oidResult = (trapOid.Substring(++index));

						//Get Trap Import Data into a dictionary object
						rowsCountCSV = protocol.importcsvsnmptrapinformation.RowCount; rowsCountCSV++;
						ImportcsvsnmptrapinformationQActionTable importsnmptrapinformationQActions = new ImportcsvsnmptrapinformationQActionTable(protocol, 400, "ImportSNMPtrapInformation");
						csvtableValue = new Dictionary<int, string>();

						trapCSVImportTable = 400;
						trapKeysColumnPosition = 2;
						trapValuesColumnPosition = 3;

						//Build dictionary object with Trap Table Data
						for (uint i = 1; i < rowsCountCSV; i++)
						{
							trapCSVImportRowPosition = i;
							cellDetailsKeys = new uint[] { trapCSVImportTable, trapCSVImportRowPosition, trapKeysColumnPosition };
							cellDetailsValue = new uint[] { trapCSVImportTable, trapCSVImportRowPosition, trapValuesColumnPosition };
							csvtableValue.Add(trapKeys = Convert.ToUInt16(protocol.NotifyProtocol(122, cellDetailsKeys, null)), trapValues = Convert.ToString(protocol.NotifyProtocol(122, cellDetailsValue, null)));
						}

						//Grab all parameters from column 6 "Keys" To check if Alarm is already in the table
						alarmRowCount = protocol.alarmsandnotications.RowCount;
						alarmList = new List<string>();
						alarmsTableID = 300;
						keysColumnPosition = 6;

						for (uint i = 1; i <= alarmRowCount; i++)
						{
							alarmRowPosition = i;
							alarmCellDetails = new uint[] { alarmsTableID, alarmRowPosition, keysColumnPosition };
							alarmList.Add(Convert.ToString(protocol.NotifyProtocol(122, alarmCellDetails, null)));
						}

						//Search for OID result in dictionary object key table and return trap value
						if (csvtableValue.TryGetValue(Convert.ToInt16(oidResult), out valueOutput))
						{
							if (!alarmList.Contains(oidResult))
							{
								AlarmsandnoticationsQActionTable alarmSandNoticationsTable = new AlarmsandnoticationsQActionTable(protocol, 300, "AlarmsAndNotications");
								//Build row with received trap data
								AlarmsandnoticationsQActionRow row = new AlarmsandnoticationsQActionRow();
								row.Time_302 = Convert.ToString(receivedTime);
								row.Ipaddress_303 = Convert.ToString(ipAddress);
								row.Message_304 = valueOutput;
								row.Key_306 = oidResult;
								alarmSandNoticationsTable.AddRow(row.ToObjectArray());
							}
						}
						else
						{
							if (!alarmList.Contains(oidResult))
							{
								AlarmsandnoticationsQActionTable alarmSandNoticationsTable = new AlarmsandnoticationsQActionTable(protocol, 300, "AlarmsAndNotications");
								//oidResult didn't match CSV Trap imput
								AlarmsandnoticationsQActionRow row = new AlarmsandnoticationsQActionRow();
								row.Time_302 = Convert.ToString(receivedTime);
								row.Ipaddress_303 = Convert.ToString(ipAddress);
								row.Message_304 = "You've received a Trap message (Alarm) but the received Trap OID" + " " + trapOid + " " + "('OidResult' Parameter) doesn't match any Trap Key in the Trap Keys column. A new Import with updated SNMP Trap CSV file may be needed....";
								protocol.Log("You've received a Trap message (Alarm) but the received Trap OID" + " " + trapOid + " " + "('OidResult' Parameter) doesn't match any Trap Key in the Trap Keys column. A new Import with updated SNMP Trap CSV file may be needed....", LogType.Allways, LogLevel.LogEverything);
								row.Key_306 = oidResult;
								alarmSandNoticationsTable.AddRow(row.ToObjectArray());
							}
						}
					}
					else
					{
						protocol.Log("Trap Object is Null.............", LogType.Allways, LogLevel.LogEverything);
					}
				}
				else
				{
					protocol.Log("trapOid Parameter is Null.............", LogType.Allways, LogLevel.LogEverything);
				}
			}
		}
        catch (Exception ex)
        {
            protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
        }
    }
}

]]>
		</QAction>
		<QAction id="4" name="Traps processing toggle button" encoding="csharp" triggers="31" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: QActionName.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocol protocol, object trapInfo)
	{
		try
		{
			protocol.SetParameter(30, protocol.GetParameter(31));
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="20" name="Remove all rows" encoding="csharp" triggers="11" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: Remove all rows.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			int rows = protocol.alarmsandnotications.RowCount;

			for (int i = rows; i >= 1; i--)
			{
				protocol.alarmsandnotications.DeleteRow(i - 1);
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		<QAction id="21" name="Remove Row" encoding="csharp" triggers="305" row="true" dllImport="[ProtocolName].[ProtocolVersion].QAction.63000.dll">
			
			<![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

using Skyline.DataMiner.Scripting;

/// <summary>
/// DataMiner QAction Class: Table.
/// </summary>
public static class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			string key = protocol.RowKey();

			protocol.DeleteRow(300, key);

		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
	</QActions>
	<Groups>
		<Group id="2">
			<Name>After Startup</Name>
			<Description>After Startup</Description>
			<Type>poll action</Type>
			<Content>
				<Action>2</Action>
			</Content>
		</Group>
		<Group id="20">
			<Name>DCMonitoring </Name>
			<Description>DC Monitoring</Description>
			<Type>poll</Type>
			<Content>
				<Param>2000</Param>
				<Param>2001</Param>
				<Param>2002</Param>
				<Param>2003</Param>
				<Param>2004</Param>
				<Param>2005</Param>
				<Param>2006</Param>
				<Param>2007</Param>
				<Param>2008</Param>
				<Param>2009</Param>
			</Content>
		</Group>
		<Group id="21">
			<Name>DCMonitoring2</Name>
			<Description>DC Monitoring2</Description>
			<Type>poll</Type>
			<Content>
				<Param>2010</Param>
				<Param>2011</Param>
				<Param>2012</Param>
				<Param>2013</Param>
				<Param>2014</Param>
				<Param>2015</Param>
				<Param>2016</Param>
			</Content>
		</Group>
		<Group id="22">
			<Name>SystemInformationMonitoringSlow</Name>
			<Description>System Information Monitoring Slow</Description>
			<Type>poll</Type>
			<Content>
				<Param>101</Param>
				<Param>103</Param>
				<Param>104</Param>
				<Param>105</Param>
			</Content>
		</Group>
		<Group id="24">
			<Name>SystemInformationMonitoringFast</Name>
			<Description>System Information Monitoring Fast</Description>
			<Type>poll</Type>
			<Content>
				<Param>100</Param>
				<Param>102</Param>
			</Content>
		</Group>
		<Group id="30">
			<Name>ModuleTableMonitoring </Name>
			<Description>Module Table Monitoring</Description>
			<Type>poll</Type>
			<Content>
				<Param>3000</Param>
			</Content>
		</Group>
		<!--<Group id="40">
			<Name>TrapsTableMonitoring </Name>
			<Description>Traps Table Monitoring</Description>
			<Type>poll</Type>
			<Content>
				<Param>300</Param>
			</Content>
		</Group>-->
	</Groups>
	<Triggers>
		<Trigger id="1">
			<Name>After Startup</Name>
			<On>protocol</On>
			<Time>after startup</Time>
			<Type>action</Type>
			<Content>
				<Id>1</Id>
			</Content>
		</Trigger>
	</Triggers>
	<Actions>
		<Action id="1">
			<Name>After Startup Group</Name>
			<On id="2">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="2">
			<Name>After Startup QAction</Name>
			<On id="2">parameter</On>
			<Type>run actions</Type>
		</Action>
	</Actions>
	<Timers>
		<Timer id="1">
			<Name>Fast Timer (10s)</Name>
			<Time initial="true">10000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>24</Group>
			</Content>
		</Timer>
		<Timer id="2">
			<Name>Medium Timer (1m)</Name>
			<Time initial="true" dataDisplay="30000">60000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>20</Group>
				<Group>21</Group>
				<Group>22</Group>
				<Group>30</Group>
			</Content>
		</Timer>
		<Timer id="3">
			<Name>Slow Timer (1h)</Name>
			<Time initial="true">3600000</Time>
			<Interval>75</Interval>
			<Content>
				<Group>22</Group>
			</Content>
		</Timer>
	</Timers>
	<PortSettings>
	</PortSettings>
	<VersionHistory>
		<Branches>
			<Branch id="1">
				<Comment>Main Branch</Comment>
				<SystemVersions>
					<SystemVersion id="0">
						<MajorVersions>
							<MajorVersion id="0">
								<MinorVersions>
									<MinorVersion id="1">
										<Date>2021-mm-dd</Date>
										<Provider>
											<Author />
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<NewFeature>Initial version</NewFeature>
										</Changes>
									</MinorVersion>
								</MinorVersions>
							</MajorVersion>
						</MajorVersions>
					</SystemVersion>
				</SystemVersions>
			</Branch>
		</Branches>
	</VersionHistory>
</Protocol>
